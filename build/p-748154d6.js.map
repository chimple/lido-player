{"version":3,"names":["DragSelectedMapKey","SelectedValuesKey","NextContainerKey","ActivityChangeKey","GameCompletedKey","ElementDropKey","ElementClickKey","TraceMode","dispatchCustomEvent","eventName","detail","event","CustomEvent","window","dispatchEvent","dispatchNextContainerEvent","dispatchGameCompletedEvent","dispatchActivityChangeEvent","index","dispatchElementDropEvent","dragElement","dropElement","isCorrect","createdAt","Date","toISOString","dispatchClickEvent","element","format","first","middle","last","getElementScale","el","transform","getComputedStyle","matrix","match","matrixValues","split","scaleX","parseFloat","enableDraggingWithScaling","isDragging","startX","startY","initialX","initialY","container","document","getElementById","console","error","onStart","removeHighlight","MouseEvent","clientX","clientY","touches","style","opacity","cursor","addEventListener","onMove","onEnd","rect1","getBoundingClientRect","rect2","verticalDistance","top","horizontalDistance","left","observer","MutationObserver","mutationsList","mutation","type","attributeName","observerConfig","attributes","attributeFilter","observe","containerScale","dx","dy","newLeft","newTop","containerRect","elementRect","numbers","result","map","Number","initialElementLeftPx","initialElementTopPx","maxRight","width","Math","abs","maxLeft","maxTop","maxBottom","height","newLeftClamp","min","newTopClamp","allElements","querySelectorAll","mostOverlappedElement","maxOverlapArea","forEach","otherElement","otherRect","overlapWidth","max","right","overlapHeight","bottom","overlapArea","border","backgroundColor","endEv","removeEventListener","onElementDropComplete","ev","onClickDropOrDragElement","async","selectedValueData","localStorage","getItem","dragSelectedData","selectedValue","JSON","parse","filter","value","setItem","stringify","dragSelected","dropIndex","parentElement","getAttribute","log","hasOwnProperty","handleShowCheck","matchStringPattern","onCorrect","executeActions","onInCorrect","onActivityComplete","actionsString","thisElement","actions","parseActions","i","length","action","targetElement","actor","currentTransform","childElementCount","appendChild","firstChild","classList","add","audioUrl","convertUrlToRelative","audioElement","newAudio","createElement","id","body","pause","currentTime","src","play","highlightSpeakingElement","ended","Promise","resolve","setTimeout","stopHighlightForSpeakingElement","isNumber","isNaN","input","actionStrings","_a","trim","actionString","actorAction","part","lastDotIndex","lastIndexOf","substring","push","replace","pattern","arr","patternGroups","group","arrIndex","options","Set","startsWith","endsWith","choices","slice","option","includes","choice","has","delete","countPatternWords","wordCount","isAllowOnlyCorrect","dragScore","sortedKeys","Object","keys","sort","a","b","parseInt","sortedValues","reduce","acc","key","concat","objectiveString","selectValues","checkButton","showCheck","remove","validateObjectiveStatus","objectiveArray","res","triggerNextContainer","isContinueOnCorrect","initEventsForElement","canplay","addClickListenerForClickType","handleDropElement","onEntry","onTouchListenerForOnTouch","onTouch","onclick","onClick","boxShadow","transition","objective","highlightedElements","innerHTML","head","ariaPressed","selectedDropElement","querySelector","selectedDragElement","dropRect","dragRect","translateX","translateY","styleId","url","baseUrl"],"sources":["src/utils/constants.ts","src/utils/customEvents.ts","src/utils/utils.ts"],"sourcesContent":["export const DragSelectedMapKey = 'dragSelectedMap';\nexport const SelectedValuesKey = 'selectedValues';\nexport const ActivityScoreKey = 'activityScore';\nexport const ActivityEndKey = 'activityEnd';\nexport const LessonEndKey = 'lessonEnd';\nexport const NextContainerKey = 'nextContainer';\nexport const ActivityChangeKey = 'activityChange';\nexport const GameCompletedKey = 'gameCompleted';\nexport const GameExitKey = 'gameExit';\nexport const ElementDropKey = 'elementDrop';\nexport const ElementClickKey = 'elementClick';\n\nexport enum TraceMode {\n  NoFlow = 'noFlow',\n  ShowFlow = 'showFlow',\n  FreeTrace = 'freeTrace',\n  BlindTracing = 'blindTracing',\n  BlindFreeTrace = 'blindFreeTrace',\n}\n","import { ActivityChangeKey, ActivityEndKey, ElementClickKey, ElementDropKey, GameCompletedKey, GameExitKey, LessonEndKey, NextContainerKey } from './constants';\n\nfunction dispatchCustomEvent(eventName: string, detail: any) {\n  const event = new CustomEvent(eventName, { detail });\n  window.dispatchEvent(event);\n}\n\nexport function dispatchActivityEndEvent(index: number, totalIndex: number, score: number) {\n  dispatchCustomEvent(ActivityEndKey, { index, totalIndex, score });\n}\n\nexport function dispatchLessonEndEvent(score: number) {\n  dispatchCustomEvent(LessonEndKey, { score });\n}\n\nexport function dispatchNextContainerEvent() {\n  dispatchCustomEvent(NextContainerKey, {});\n}\n\nexport function dispatchGameCompletedEvent() {\n  dispatchCustomEvent(GameCompletedKey, {});\n}\n\nexport function dispatchGameExitEvent() {\n  dispatchCustomEvent(GameExitKey, {});\n}\n\nexport function dispatchActivityChangeEvent(index: number) {\n  dispatchCustomEvent(ActivityChangeKey, { index });\n}\n\nexport function dispatchElementDropEvent(dragElement: HTMLElement, dropElement: HTMLElement, isCorrect: boolean) {\n  dispatchCustomEvent(ElementDropKey, { dragElement, dropElement, isCorrect: isCorrect, createdAt: new Date().toISOString() });\n}\n\nexport function dispatchClickEvent(element: HTMLElement, isCorrect: boolean) {\n  dispatchCustomEvent(ElementClickKey, { element, isCorrect: isCorrect, createdAt: new Date().toISOString() });\n}\n","import { ActivityScoreKey, DragSelectedMapKey, SelectedValuesKey } from './constants';\nimport { dispatchActivityEndEvent, dispatchClickEvent, dispatchElementDropEvent, dispatchLessonEndEvent, dispatchNextContainerEvent } from './customEvents';\n\nexport function format(first?: string, middle?: string, last?: string): string {\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\n// Function to get the scale of an element\nconst getElementScale = (el: HTMLElement): number => {\n  const transform = window.getComputedStyle(el).transform;\n  if (transform === 'none') {\n    return 1; // No scaling\n  } else {\n    const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n    if (matrix) {\n      const matrixValues = matrix[1].split(', ');\n      const scaleX = parseFloat(matrixValues[0]);\n      return scaleX; // Assuming uniform scaling (same scale in X and Y)\n    }\n  }\n  return 1; // Fallback to no scaling\n};\n\nfunction enableDraggingWithScaling(element: HTMLElement): void {\n  let isDragging = false;\n  let startX = 0;\n  let startY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  // Fetch the container element\n  const container = document.getElementById('container');\n  if (!container) {\n    console.error(`Container with ID \"container\" not found.`);\n    return;\n  }\n\n  const onStart = (event: MouseEvent | TouchEvent): void => {\n    removeHighlight(element);\n    isDragging = true;\n\n    if (event instanceof MouseEvent) {\n      startX = event.clientX;\n      startY = event.clientY;\n    } else {\n      startX = event.touches[0].clientX;\n      startY = event.touches[0].clientY;\n    }\n\n    // Apply dragging styles to the element\n    element.style.opacity = '0.8';\n    element.style.cursor = 'grabbing';\n\n    // Parse the current transform values at the start of each drag\n    const transform = window.getComputedStyle(element).transform;\n    if (transform !== 'none') {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        initialX = parseFloat(matrixValues[4]);\n        initialY = parseFloat(matrixValues[5]);\n      }\n    } else {\n      initialX = 0;\n      initialY = 0;\n    }\n\n    document.addEventListener('mousemove', onMove);\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchmove', onMove);\n    document.addEventListener('touchend', onEnd);\n  };\n\n  const rect1 = container.getBoundingClientRect();\n  const rect2 = element.getBoundingClientRect();\n\n  let verticalDistance = rect1.top - rect2.top;\n  let horizontalDistance = rect1.left - rect2.left;\n\n  const observer = new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n        const rect1 = container.getBoundingClientRect();\n        const rect2 = element.getBoundingClientRect();\n        verticalDistance = rect1.top - rect2.top;\n        horizontalDistance = rect1.left - rect2.left;\n      }\n    }\n  });\n\n  // Configure the observer to watch for attribute changes\n  const observerConfig = {\n    attributes: true, // Monitor attribute changes\n    attributeFilter: ['style'], // Only observe changes to the 'style' attribute\n  };\n\n  // Start observing the element\n  observer.observe(container, observerConfig);\n\n  const onMove = (event: MouseEvent | TouchEvent): void => {\n    if (!isDragging) return;\n\n    const containerScale = getElementScale(container);\n\n    let dx = 0;\n    let dy = 0;\n\n    if (event instanceof MouseEvent) {\n      dx = (event.clientX - startX) / containerScale;\n      dy = (event.clientY - startY) / containerScale;\n    } else {\n      dx = (event.touches[0].clientX - startX) / containerScale;\n      dy = (event.touches[0].clientY - startY) / containerScale;\n    }\n\n    // Calculate the new position considering scaling\n    const newLeft = initialX + dx;\n    const newTop = initialY + dy;\n\n    // Get the dimensions and scale-corrected position of the container and element\n    const containerRect = container.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n\n    const numbers = element.style.transform.match(/-?\\d+(\\.\\d+)?/g);\n    const result = numbers.map(Number);\n    const initialElementLeftPx = elementRect.left / containerScale - result[0];\n    const initialElementTopPx = elementRect.top - result[1];\n\n    const maxRight = containerRect.width / containerScale - Math.abs(horizontalDistance / containerScale) - elementRect.width / containerScale;\n    const maxLeft = containerRect.left - initialElementLeftPx;\n    const maxTop = containerRect.top - initialElementTopPx;\n    const maxBottom = containerRect.height / containerScale - Math.abs(verticalDistance / containerScale) - elementRect.height / containerScale;\n\n    const newLeftClamp = newLeft + initialElementLeftPx <= containerRect.left ? maxLeft : Math.min(newLeft, maxRight);\n    const newTopClamp = newTop + initialElementTopPx <= containerRect.top ? maxTop : Math.min(newTop, maxBottom);\n\n    // Apply transform with translation within boundaries\n    element.style.transform = `translate(${newLeftClamp}px, ${newTopClamp}px)`;\n\n    // Check for overlaps and highlight only the most overlapping element\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Check if there is overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    // Reset styles for all elements\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Apply styles only to the most overlapped element\n    if (mostOverlappedElement) {\n      mostOverlappedElement.style.border = '2px dashed #ff0000'; // Red dashed border\n      mostOverlappedElement.style.backgroundColor = 'rgba(255, 0, 0, 0.1)'; // Light red background\n    }\n  };\n\n  const onEnd = (endEv): void => {\n    isDragging = false;\n    document.removeEventListener('mousemove', onMove);\n    document.removeEventListener('mouseup', onEnd);\n    document.removeEventListener('touchmove', onMove);\n    document.removeEventListener('touchend', onEnd);\n\n    // Reset styles when dragging ends\n    element.style.opacity = '';\n    element.style.cursor = 'move';\n\n    // Reset overlapping styles from all elements\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Check for overlaps and log the most overlapping element\n    const elementRect = element.getBoundingClientRect();\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Calculate overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    onElementDropComplete(element, mostOverlappedElement);\n  };\n  // Initialize draggable element styles\n  element.style.cursor = 'move';\n  element.style.transform = 'translate(0, 0)'; // Initialize transform for consistent dragging\n\n  element.addEventListener('mousedown', onStart);\n  element.addEventListener('touchstart', onStart);\n  element.addEventListener('click', ev => {\n    onClickDropOrDragElement(element, 'drag');\n  });\n}\n\nasync function onElementDropComplete(dragElement: HTMLElement, dropElement: HTMLElement): Promise<void> {\n  if (!dropElement) {\n    const selectedValueData = localStorage.getItem(SelectedValuesKey);\n    const dragSelectedData = localStorage.getItem(DragSelectedMapKey);\n    if (selectedValueData) {\n      let selectedValue = JSON.parse(selectedValueData);\n      selectedValue = selectedValue.filter(value => value != dragElement['value']);\n      localStorage.setItem(SelectedValuesKey, JSON.stringify(selectedValue));\n    }\n    if (dragSelectedData) {\n      let dragSelected = JSON.parse(dragSelectedData);\n      const dropIndex = dragElement.parentElement.getAttribute('tabIndex');\n      console.log('drop index', dropIndex);\n      if (dropIndex && dragSelected.hasOwnProperty(dropIndex)) {\n        delete dragSelected[dropIndex];\n      }\n      localStorage.setItem(DragSelectedMapKey, JSON.stringify(dragSelected));\n    }\n    handleShowCheck();\n    return;\n  }\n\n  // Add pulse and highlight effect for a successful match\n\n  const isCorrect = matchStringPattern(dropElement['value'], [dragElement['value']]);\n  dispatchElementDropEvent(dragElement, dropElement, isCorrect);\n  if (isCorrect) {\n    // Perform actions if onMatch is defined\n    const onCorrect = dropElement.getAttribute('onCorrect');\n    if (onCorrect) {\n      await executeActions(onCorrect, dropElement, dragElement);\n    }\n  } else {\n    const onInCorrect = dropElement.getAttribute('onInCorrect');\n\n    await executeActions(onInCorrect, dropElement, dragElement);\n\n    // showWrongAnswerAnimation([dropElement, dragElement]);\n  }\n\n  await onActivityComplete(dragElement, dropElement);\n}\n\n// Function to execute actions parsed from the onMatch string\nconst executeActions = async (actionsString: string, thisElement: HTMLElement, element?: HTMLElement): Promise<void> => {\n  const actions = parseActions(actionsString);\n\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i];\n    const targetElement = action.actor === 'this' ? thisElement : action.actor === 'element' ? element : document.getElementById(action.actor);\n\n    if (targetElement) {\n      // Handle the 'transform' property separately\n      switch (action.action) {\n        case 'transform': {\n          const currentTransform = window.getComputedStyle(targetElement).transform;\n          targetElement.style.transform = currentTransform !== 'none' ? `${currentTransform} ${action.value}` : action.value;\n          break;\n        }\n        case 'alignMatch': {\n          const dropElement = targetElement;\n          const dragElement = element;\n\n          if (dropElement.childElementCount == 0) {\n            dragElement.style.transform = 'translate(0, 0)';\n            dropElement.appendChild(dragElement);\n          } else {\n            dragElement.style.transform = 'translate(0, 0)';\n            dragElement.parentElement.appendChild(dropElement.firstChild);\n            dropElement.appendChild(dragElement);\n          }\n          break;\n        }\n        case 'addClass': {\n          targetElement.classList.add(action.value);\n          break;\n        }\n        case 'speak': {\n          {\n            let audioUrl = targetElement.getAttribute('audio');\n            if (audioUrl) {\n              audioUrl = convertUrlToRelative(audioUrl);\n              let audioElement = document.getElementById('audio') as HTMLAudioElement;\n              if (!audioElement) {\n                const newAudio = document.createElement('audio');\n                newAudio.id = 'audio';\n                document.body.appendChild(newAudio);\n                audioElement = newAudio;\n              }\n\n              audioElement.pause();\n              audioElement.currentTime = 0;\n              audioElement.src = audioUrl;\n              console.log('🚀 ~ executeActions ~ audioElement.src:', audioElement.src);\n\n              try {\n                await audioElement.play();\n                highlightSpeakingElement(targetElement);\n                while (!audioElement.ended || audioElement.error) {\n                  await new Promise(resolve => setTimeout(resolve, 100));\n                }\n                stopHighlightForSpeakingElement(targetElement);\n              } catch (error) {\n                console.log('🚀 ~ executeActions ~ audioElement.src: error', error);\n              }\n            }\n            break;\n          }\n        }\n\n        case 'sleep': {\n          const isNumber = !isNaN(Number(action.value));\n          if (isNumber) {\n            await new Promise(resolve => setTimeout(resolve, Number(action.value)));\n          }\n          break;\n        }\n\n        default: {\n          targetElement.style[action.action] = action.value;\n          break;\n        }\n      }\n    }\n  }\n};\n\n// Function to parse actions string\nconst parseActions = (input: string): Array<{ actor: string; action: string; value: string }> => {\n  const actions = [];\n  if (!input) return actions;\n  const actionStrings = input.split(';')?.map(action => action.trim());\n\n  actionStrings.forEach(actionString => {\n    if (actionString) {\n      const [actorAction, value] = actionString.split('=').map(part => part.trim());\n      const lastDotIndex = actorAction.lastIndexOf('.');\n      if (lastDotIndex !== -1) {\n        const actor = actorAction.substring(0, lastDotIndex).trim();\n        const action = actorAction.substring(lastDotIndex + 1).trim();\n        actions.push({ actor, action, value: value.replace(/['\"]/g, '') });\n      }\n    }\n  });\n\n  return actions;\n};\n\nconst matchStringPattern = (pattern: string, arr: string[]): boolean => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let arrIndex = 0;\n  let options = new Set<string>();\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      // Inside parentheses: '|' acts like \"OR\" condition\n      const choices = group\n        .slice(1, -1)\n        .split('|')\n        .map(option => option.trim());\n\n      if (arrIndex >= arr.length) return false;\n\n      if (!choices.includes(arr[arrIndex])) return false;\n\n      arrIndex++;\n    } else if (group.includes('|')) {\n      // Outside parentheses: '|' acts as optional order\n      const choices = group.split('|').map(option => option.trim());\n\n      for (const choice of choices) {\n        options.add(choice);\n      }\n    } else {\n      // Exact match required\n      if (arrIndex >= arr.length || arr[arrIndex] !== group) return false;\n\n      arrIndex++;\n    }\n  }\n\n  // Validate the optional ordered items against the remaining array elements\n  while (arrIndex < arr.length) {\n    if (!options.has(arr[arrIndex])) {\n      return false;\n    }\n    options.delete(arr[arrIndex]);\n    arrIndex++;\n  }\n\n  return arrIndex === arr.length;\n};\n\nconst countPatternWords = (pattern: string): number => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let wordCount = 0;\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      wordCount += 1;\n    } else {\n      wordCount += group.split('|').length;\n    }\n  }\n\n  return wordCount;\n};\n\nasync function onActivityComplete(dragElement?: HTMLElement, dropElement?: HTMLElement) {\n  const container = document.getElementById('container');\n  if (!container) return;\n\n  const isAllowOnlyCorrect = container.getAttribute('isAllowOnlyCorrect') === 'true';\n  if (isAllowOnlyCorrect) {\n    const isCorrect = matchStringPattern(dropElement['value'], [dragElement['value']]);\n    if (!isCorrect) {\n      dragElement.style.transform = 'translate(0,0)';\n      return;\n    }\n  }\n\n  await executeActions(\"this.alignMatch='true'\", dropElement, dragElement);\n\n  let dragScore = JSON.parse(localStorage.getItem(DragSelectedMapKey) ?? '{}');\n  if (!dragScore[dropElement.getAttribute('tabindex')]) {\n    dragScore[dropElement.getAttribute('tabindex')] = [];\n  }\n\n  // dragScore[mostOverlappedElement.getAttribute('tabindex')].push(element['value']);\n  dragScore[dropElement.getAttribute('tabindex')] = [dragElement['value']];\n\n  localStorage.setItem(DragSelectedMapKey, JSON.stringify(dragScore));\n  const sortedKeys = Object.keys(dragScore).sort((a, b) => parseInt(a) - parseInt(b));\n  const sortedValues = sortedKeys.reduce((acc, key) => acc.concat(dragScore[key]), []);\n  localStorage.setItem(SelectedValuesKey, JSON.stringify(sortedValues));\n\n  handleShowCheck();\n}\n\nconst storeActivityScore = (score: number) => {\n  const appHome = document.querySelector('app-home');\n  if (!appHome) return;\n  const index = Number(appHome.getAttribute('index') ?? 0);\n  const totalIndex = Number(appHome.getAttribute('totalIndex') ?? 0);\n\n  const activityScore = JSON.parse(localStorage.getItem(ActivityScoreKey) ?? '{}');\n  const activityScoreKey = index.toString();\n  activityScore[activityScoreKey] = score;\n\n  //send Custom Event to parent\n  // window.dispatchEvent(new CustomEvent(ActivityEndKey, { detail: { index: index, totalIndex: totalIndex, score: score } }));\n  dispatchActivityEndEvent(index, totalIndex, score);\n\n  localStorage.setItem(ActivityScoreKey, JSON.stringify(activityScore));\n  if (totalIndex - 1 == index) {\n    const scoresArray: number[] = Object.values(activityScore);\n    const finalScore = scoresArray.reduce((acc, cur) => acc + cur, 0) / scoresArray.length;\n    // window.dispatchEvent(new CustomEvent(LessonEndKey, { detail: { score: finalScore } }));\n    dispatchLessonEndEvent(finalScore);\n    localStorage.removeItem(ActivityScoreKey);\n  }\n};\n\nconst handleShowCheck = () => {\n  const container = document.getElementById('container');\n  const objectiveString = container['objective'];\n  const selectValues = JSON.parse(localStorage.getItem(SelectedValuesKey) ?? '[]');\n\n  const checkButton = document.getElementById('checkButton');\n\n  if (!selectValues || selectValues.length !== countPatternWords(objectiveString)) {\n    executeActions(\"this.addClass='disable-check-button'\", checkButton);\n    return;\n  }\n\n  const showCheck = container.getAttribute('showCheck') == 'true';\n\n  if (showCheck) {\n    checkButton.classList.remove('disable-check-button');\n  } else {\n    validateObjectiveStatus();\n  }\n};\n\nconst validateObjectiveStatus = async () => {\n  const container = document.getElementById('container');\n  if (!container) return;\n  const objectiveString = container['objective'];\n  const objectiveArray = JSON.parse(localStorage.getItem(SelectedValuesKey) ?? '[]');\n  const res = matchStringPattern(objectiveString, objectiveArray);\n\n  if (res) {\n    const onCorrect = container.getAttribute('onCorrect');\n    if (onCorrect) {\n      await executeActions(onCorrect, container);\n    }\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    triggerNextContainer();\n  } else {\n    const onInCorrect = container.getAttribute('onInCorrect');\n    await executeActions(onInCorrect, container);\n    const isContinueOnCorrect = container.getAttribute('isContinueOnCorrect') === 'true';\n    if (!isContinueOnCorrect) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      triggerNextContainer();\n    }\n  }\n};\n\nexport const triggerNextContainer = () => {\n  // const event = new CustomEvent('nextContainer');\n  console.log('🚀 ~ triggerNextContainer ~ event:', event);\n  // window.dispatchEvent(event);\n  dispatchNextContainerEvent();\n};\n\nexport const initEventsForElement = async (element: HTMLElement, type: string) => {\n  const container = document.getElementById('container');\n  if (!container) return;\n  const canplay = container.getAttribute('canplay');\n  if (canplay != null && canplay === 'false') return;\n  switch (type) {\n    case 'drag': {\n      enableDraggingWithScaling(element);\n      break;\n    }\n    case 'click': {\n      addClickListenerForClickType(element);\n      break;\n    }\n    case 'drop': {\n      handleDropElement(element);\n      break;\n    }\n    default:\n      break;\n  }\n  const onEntry = element.getAttribute('onEntry');\n\n  await executeActions(onEntry, element);\n\n  onTouchListenerForOnTouch(element);\n};\n\nfunction onTouchListenerForOnTouch(element: HTMLElement) {\n  if (!element) return;\n  const onTouch = element.getAttribute('onTouch');\n  console.log(onTouch);\n\n  if (!onTouch) return;\n  element.onclick = async () => {\n    console.log('🚀 ~ element.onclick= ~ onTouch:', onTouch);\n    if (!onTouch) return;\n    await executeActions(onTouch, element);\n  };\n}\n\nfunction addClickListenerForClickType(element: HTMLElement): void {\n  element.style.cursor = 'pointer';\n  if (!element) {\n    console.error('No element provided.');\n    return;\n  }\n\n  const onClick = async () => {\n    const container = document.getElementById('container');\n    console.log('Element clicked:', element);\n    if (element.getAttribute('id') == 'checkButton') {\n      triggerNextContainer();\n      return;\n    }\n\n    localStorage.setItem(SelectedValuesKey, JSON.stringify([element['value']]));\n    element.style.border = '2px solid yellow';\n    element.style.boxShadow = '0px 0px 10px rgba(255, 255, 0, 0.7)';\n\n    element.style.transition = 'transform 0.2s ease, border 0.5s ease';\n    element.style.transform = 'scale(1.1)';\n\n    element.style.transform = 'scale(1)';\n    element.style.border = '';\n    element.style.boxShadow = '';\n\n    const objective = container['objective'];\n    const isCorrect = matchStringPattern(objective, [element['value']]);\n    dispatchClickEvent(element, isCorrect);\n    if (isCorrect) {\n      const onCorrect = element.getAttribute('onCorrect');\n      await executeActions(onCorrect, element);\n    } else {\n      const onInCorrect = element.getAttribute('onInCorrect');\n      await executeActions(onInCorrect, element);\n\n      // showWrongAnswerAnimation([element]);\n    }\n\n    await onActivityComplete();\n  };\n  element.addEventListener('click', onClick);\n}\n\nexport function showWrongAnswerAnimation(elements: HTMLElement[]): void {\n  const styleId = 'wrong-answer-animation-style';\n\n  executeActions(\"tryAgain.speak='true'\", document.getElementById('tryAgain'));\n\n  // Check if the style is already added, if not, add it\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n          @keyframes enhanced-shake {\n              0% { left: 0; }\n              10% { left: -8px; }\n              20% { left: 8px; }\n              30% { left: -8px; }\n              40% { left: 8px; }\n              50% { left: -6px; }\n              60% { left: 6px; }\n              70% { left: -4px; }\n              80% { left: 4px; }\n              90% { left: -2px; }\n              100% { left: 0; }\n          }\n\n          \n          .wrong-answer {\n              position: relative; /* Enable relative positioning to move the element */\n              animation: enhanced-shake 0.6s cubic-bezier(0.36, 0.07, 0.19, 0.97);\n              background-color: #ffdddd; /* Flash red background to indicate wrong answer */\n              box-shadow: 0 0 10px rgba(255, 0, 0, 0.5); /* Subtle red shadow */\n\n              border: 4px solid red;\n          }\n\n          \n      `;\n\n    document.head.appendChild(style);\n  }\n\n  elements.forEach(element => {\n    // Add the class to trigger the animation\n    element.classList.add('wrong-answer');\n\n    // Remove the class after the animation ends to reset the element\n    element.addEventListener(\n      'animationend',\n      () => {\n        element.classList.remove('wrong-answer');\n      },\n      { once: true },\n    );\n  });\n}\n\nfunction handleDropElement(element: HTMLElement): void {\n  element.onclick = () => {\n    onClickDropOrDragElement(element, 'drop');\n  };\n}\n\nasync function onClickDropOrDragElement(element: HTMLElement, type: 'drop' | 'drag'): Promise<void> {\n  // Remove the highlight class from elements matching the selector\n  const highlightedElements = document.querySelectorAll(`[type='${type}']`);\n\n  highlightedElements.forEach(el => {\n    removeHighlight(el as HTMLElement);\n  });\n\n  // Dynamically create the highlight class if it doesn't exist\n  if (!document.getElementById('dynamic-highlight-style')) {\n    const style = document.createElement('style');\n    style.id = 'dynamic-highlight-style';\n    style.innerHTML = `\n      .highlight {\n        border: 4px solid #e74c3c; /* Thicker red border for more visibility */\n        border-radius: 12px; /* Larger rounded corners */\n        background-color: rgba(231, 76, 60, 0.3); /* Stronger, more noticeable background */\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2), 0 12px 40px rgba(0, 0, 0, 0.2); /* Stronger shadow */\n        outline: 4px solid rgba(231, 76, 60, 0.6); /* Glow effect */\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  element?.classList.add('highlight');\n  element.ariaPressed = 'true';\n\n  const selectedDropElement: HTMLElement = type === 'drop' ? element : document.querySelector(\"[type='drop'].highlight\");\n  const selectedDragElement: HTMLElement = type === 'drag' ? element : document.querySelector(\"[type='drag'].highlight\");\n\n  if (selectedDropElement && selectedDragElement) {\n    // Add a transition for a smooth, slower movement\n    (selectedDragElement as HTMLElement).style.transition = 'transform 0.5s ease'; // 0.5s for a slower move\n\n    // Reset the transform of the drag element before calculating the new position\n    (selectedDragElement as HTMLElement).style.transform = '';\n    const container = document.getElementById('container');\n\n    const containerScale = getElementScale(container);\n    console.log('🚀 ~ onClickDropOrDragElement ~ containerScale:', containerScale);\n\n    // Get the positions of the drop and drag elements\n    const dropRect = selectedDropElement.getBoundingClientRect();\n    const dragRect = selectedDragElement.getBoundingClientRect();\n\n    // Calculate the difference in positions\n    const translateX = (dropRect.left - dragRect.left) / containerScale;\n    const translateY = (dropRect.top - dragRect.top) / containerScale;\n\n    // Move the drag element to the drop position\n    selectedDragElement.style.transform = `translate(${translateX}px, ${translateY}px)`;\n\n    // Remove highlights after moving the element\n    const allElements = document.querySelectorAll(`*`);\n    allElements.forEach(el => {\n      removeHighlight(el as HTMLElement);\n    });\n\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await onElementDropComplete(selectedDragElement, selectedDropElement);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    selectedDragElement.style.transform = 'translate(0px, 0px)';\n  }\n}\n\nfunction removeHighlight(element: HTMLElement): void {\n  element.classList.remove('highlight');\n  element.ariaPressed = 'false';\n}\n\n// Function to highlight the speaking element\nfunction highlightSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Add a custom class for highlighting\n  element.classList.add('speaking-highlight');\n\n  // Inject keyframe animation and class styles into the document's head if it doesn't already exist\n  const styleId = 'speaking-highlight-style';\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n      .speaking-highlight {\n        box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9); /* Stronger orange glow effect */\n        border: 3px solid orange;\n        transition: box-shadow 0.5s ease-in-out, transform 0.5s ease-in-out;\n        transform: scale(1.05); /* Subtle scale effect to pop the element */\n        animation: pulseEffect 1.5s infinite; /* Pulsing animation */\n      }\n\n      @keyframes pulseEffect {\n        0% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n        50% {\n          box-shadow: 0 0 30px 15px rgba(255, 165, 0, 1);\n          transform: scale(1.1);\n        }\n        100% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n}\n\n// Function to stop highlighting\nfunction stopHighlightForSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Remove the custom class for highlighting\n  element.classList.remove('speaking-highlight');\n\n  // Remove inline styles\n  element.style.boxShadow = '';\n  element.style.border = '';\n}\n\nexport function convertUrlToRelative(url: string): string {\n  //check if url is web\n  if (url.startsWith('http')) {\n    return url;\n  }\n  const container = document.getElementById('container');\n  if (!container) return url;\n  const baseUrl = container.getAttribute('baseUrl');\n  if (!baseUrl) return url;\n  return baseUrl + url;\n}\n"],"mappings":"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","ignoreList":[]}
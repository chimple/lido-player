{"version":3,"names":["appColCss","AppColStyle0","AppCol","componentDidLoad","initEventsForElement","this","el","type","render","style","height","width","backgroundColor","bgColor","top","y","left","x","display","visible","zIndex","z","h","Host","key","id","class","tabindex","tabIndex","value","ariaLabel","ariaHidden","audio","onTouch","onMatch","onCorrect","onInCorrect","onEntry","appContainerCss","AppContainerStyle0","AppContainer","scaleContainer","container","widths","window","innerWidth","_a","screen","push","Math","min","document","documentElement","clientHeight","scaleX","scaleY","scale","transform","body","addEventListener","position","console","log","canplay","objective","showCheck","isContinueOnCorrect","indexCss","AppHomeStyle0","animationCss","AppHomeStyle1","appHomeCss","AppHomeStyle2","AppHome","nextContainer","index","undefined","currentContainerIndex","localStorage","removeItem","SelectedValuesKey","DragSelectedMapKey","containers","length","dispatchEvent","CustomEvent","detail","showCompletionMessage","event","setTimeout","initialIndex","componentWillLoad","e","parseXMLData","xmlData","disconnectedCallback","removeEventListener","parser","DOMParser","xmlDoc","parseFromString","rootElement","parseContainers","parseElement","element","tagName","nodeName","toLowerCase","props","Array","from","attributes","forEach","attr","name","children","childNodes","map","child","nodeType","textContent","trim","filter","Boolean","componentMapping","Object","assign","baseUrl","warn","containerElements","querySelectorAll","parsedElement","renderDots","_","onClick","jumpToContainer","totalIndex","appImageCss","AppImageStyle0","AppImage","alignItems","justifyContent","src","convertUrlToRelative","alt","appPosCss","AppPosStyle0","AppPos","appRandomCss","AppRandomStyle0","AppRandom","slotElements","randomTop","random","randomLeft","AppRoot","xmlPath","resolvedPath","startsWith","getAssetPath","response","fetch","ok","Error","statusText","data","text","error","appRowCss","AppRowStyle0","AppRow","appShapeCss","AppShapeStyle0","AppShape","shapeType","appTextCss","AppTextStyle0","AppText","fontSize","fontFamily","font","color","fontColor","string","appTraceCss","AppTraceStyle0","AppTrace","initializeSVG","state","fileIndex","currentPathIndex","lastLength","totalPathLength","isDragging","circle","paths","svg","proximityThreshold","freeTraceProximityThreshold","rafId","pointerMoveEvent","activePointerId","mode","flowMarkers","freeTraceLines","loadAnotherSVG","fetchSVG","url","calculateBoundingBox","padding","minX","Infinity","minY","maxX","maxY","path","getTotalLength","numPoints","i","point","getPointAtLength","insertSVG","svgText","svgContainer","getElementById","innerHTML","svgElement","querySelector","removeAttribute","bbox","viewBoxWidth","viewBoxHeight","setAttribute","getSVGElement","getPaths","createFlowMarkersForPath","markerCount","totalLength","interval","markers","nextPoint","angle","atan2","arrowMarker","createElementNS","PI","parentNode","appendChild","updateFlowIndicators","indicators","indicator","TraceMode","NoFlow","ShowFlow","setupDrawingPath","pathLength","greenPath","cloneNode","toString","classList","add","BlindTracing","BlindFreeTrace","setupDraggableCircle","firstPathStart","addEventListeners","evt","preventDefault","pointerPos","getPointerPosition","circlePos","parseFloat","getAttribute","distance","getDistanceSquared","pointerId","setPointerCapture","requestAnimationFrame","handlePointerMove","_b","_c","_d","currentPath","proximitySquared","FreeTrace","distanceSquared","closestPoint","getClosestPointOnPath","distanceToPathSquared","currentFreePath","newPath","lastPointerPos","previousPos","newPathData","midPointX","midPointY","updatedPathData","currentPathLength","distanceToEnd","moveToNextPath","triggerNextContainer","svgPoint","createSVGPoint","clientX","clientY","ctm","getScreenCTM","inverse","matrixTransform","p1","p2","dx","dy","pathNode","minDistanceSquared","coarseStep","coarseClosestPoint","coarseMinDistanceSquared","pointOnPath","fineStep","searchStart","max","searchEnd","isNext","cleanupPreviousSVG","svgSource","removeChild","remove","nextPath","startPoint","appWrapCss","AppWrapStyle0","AppWrap"],"sources":["src/components/column/app-col.css?tag=app-col","src/components/column/AppCol.tsx","src/components/container/app-container.css?tag=app-container","src/components/container/AppContainer.tsx","src/index.css?tag=app-home","src/utils/css/animation.css?tag=app-home","src/components/home/app-home.css?tag=app-home","src/components/home/AppHome.tsx","src/components/image/app-image.css?tag=app-image","src/components/image/AppImage.tsx","src/components/position/app-pos.css?tag=app-pos","src/components/position/AppPos.tsx","src/components/random/app-random.css?tag=app-random","src/components/random/AppRandom.tsx","src/components/root/AppRoot.tsx","src/components/row/app-row.css?tag=app-row","src/components/row/AppRow.tsx","src/components/shape/app-shape.css?tag=app-shape","src/components/shape/AppShape.tsx","src/components/text/app-text.css?tag=app-text","src/components/text/AppText.tsx","src/components/trace/app-trace.css?tag=app-trace","src/components/trace/app-trace.tsx","src/components/wrap/app-wrap.css?tag=app-wrap","src/components/wrap/AppWrap.tsx"],"sourcesContent":[".col {\n  /* position: absolute; */\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  /* position: relative; */\n  padding: 15px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  align-items: center;\n}\n\n.col > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppCol\n *\n * The `AppCol` component is a dynamic column-like UI element that can be\n * customized via various properties such as dimensions, position, visibility,\n * background color, and event handlers. It is designed to work within\n * containers (`app-container`) and can include child components like\n * `app-text`, `app-row`, etc.\n */\n@Component({\n  tag: 'app-col',\n  styleUrl: 'app-col.css',\n  shadow: false,\n})\nexport class AppCol {\n  /**\n   * The unique identifier for the column component.\n   */\n  @Prop() id: string;\n\n  /**\n   * The value associated with the column component. Typically used for internal logic.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the column component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the column component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * The z-index of the column to control stacking order.\n   */\n  @Prop() z: string;\n\n  /**\n   * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the column, which can be used for styling or specific logic handling.\n   */\n  @Prop() type: string;\n\n  /**\n   * The tab index value, used to set the tab order of the column for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * A boolean that controls whether the column is visible (`true`) or hidden (`false`).\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * Audio file URL or identifier for sound that will be associated with the column.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler for a touch event, where a custom function can be triggered when the column is touched.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler for a matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element that represents this component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * This lifecycle hook is called after the component is rendered in the DOM.\n   * It initializes events for the column based on the provided type.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles applied to the column, mainly for positioning and background.\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host\n        id={this.id}\n        class=\"col\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        <slot />\n      </Host>\n    );\n  }\n}\n",".container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: var(--bgColor, #ffffff);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppContainer\n *\n * The `AppContainer` component acts as a container for other elements. It scales responsively\n * based on the window size, adjusts background color, and provides various configurable properties\n * such as dimensions, positioning, visibility, and custom event handlers.\n */\n@Component({\n  tag: 'app-container',\n  styleUrl: 'app-container.css',\n  shadow: false,\n})\nexport class AppContainer {\n  /**\n   * Unique identifier for the container.\n   */\n  @Prop() id: string;\n\n  /**\n   * Objective or purpose of the container. Can be used for internal logic or tracking.\n   */\n  @Prop() objective: string;\n\n  /**\n   * Value assigned to the container. This can be used for logic related to this component.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the container (CSS value).\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the container (CSS value).\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the container.\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the container.\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index to control the stacking order of the container.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the container (CSS color value).\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Type of the container, which can be used for conditional logic or styling purposes.\n   */\n  @Prop() type: string;\n\n  /**\n   * TabIndex for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the container.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the container is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when the container is entered, useful for triggering animations or logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Boolean that controls the playability of the game.\n   */\n  @Prop() canplay: boolean = true;\n\n  /**\n   * Indicates whether the \"Check\" button should be visible or not. Expected values: \"true\" or \"false\".\n   */\n  @Prop() showCheck: string;\n\n  /**\n   * Specifies whether the activity should continue automatically upon a correct response. Expected values: \"true\" or \"false\".\n   */\n  @Prop() isContinueOnCorrect: string;\n\n  /**\n   * Base URL for the container.\n   */\n  @Prop() baseUrl: string = '';\n\n  /**\n   * Reference to the HTML element that represents this container component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Scales the container based on the window or screen size, maintaining the aspect ratio.\n   * The container scales according to the minimum dimension of the screen.\n   *\n   * @param container The container element to be scaled.\n   */\n  scaleContainer(container: HTMLElement) {\n    const widths = [window.innerWidth];\n    const heights = [window.innerHeight];\n\n    if (window.screen?.width) {\n      widths.push(window.screen.width);\n      heights.push(window.screen.height);\n    }\n\n    const width = Math.min(...widths);\n    const height = document.documentElement.clientHeight;\n\n    const scaleX = width / 1600; // Scale based on a reference width of 1600px\n    const scaleY = height / 900; // Scale based on a reference height of 900px\n    const scale = Math.min(scaleX, scaleY);\n\n    // Center the container and apply scaling\n    container.style.transform = `translate(-50%, -50%) scale(${scale})`;\n  }\n\n  /**\n   * Lifecycle hook that runs after the component is loaded.\n   * - It scales the container.\n   * - It sets the background color of the body.\n   * - Adds event listeners for `resize` and `load` to rescale the container on window size changes.\n   */\n  componentDidLoad() {\n    this.scaleContainer(this.el);\n    document.body.style.backgroundColor = this.bgColor;\n\n    // Re-scale the container on window resize or load events\n    window.addEventListener('resize', () => this.scaleContainer(this.el));\n    window.addEventListener('load', () => this.scaleContainer(this.el));\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Define the styles for the container element\n    const style = {\n      backgroundColor: this.bgColor,\n      width: '1600px', // Fixed width of the container\n      height: '900px', // Fixed height of the container\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)', // Centering the container\n    };\n    console.log('🚀 ~ AppContainer ~ canplay:', this.canplay);\n\n    return (\n      <Host\n        id=\"container\"\n        tabindex={0}\n        class=\"container\"\n        objective={this.objective}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        onTouch={this.onTouch}\n        onInCorrect={this.onInCorrect}\n        onCorrect={this.onCorrect}\n        onEntry={this.onEntry}\n        showCheck={this.showCheck}\n        isContinueOnCorrect={this.isContinueOnCorrect}\n      >\n        <slot />\n      </Host>\n    );\n  }\n}\n","\n\n@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\n\nbody {\n  overflow: hidden;\n}\n\n.disable-check-button {\n  pointer-events: none; \n  background-color: #9393935c !important; \n  color: white;\n}\n","/* animations */\n\n@keyframes rightToPlace {\n  from {\n    transform: translateX(2000px);\n  }\n  to {\n    left: 0;\n  }\n}\n\n@keyframes placeToLeft {\n  from {\n  }\n  to {\n    transform: translateX(-2000px);\n  }\n}\n\n@keyframes shake {\n  0% {\n    transform: translateX(0);\n    color: red;\n    outline: 4px solid red;\n  }\n  10% {\n    transform: translateX(-5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  20% {\n    transform: translateX(5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  30% {\n    transform: translateX(-5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  40% {\n    transform: translateX(5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  50% {\n    transform: translateX(-5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  60% {\n    transform: translateX(5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  70% {\n    transform: translateX(-5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  80% {\n    transform: translateX(5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  90% {\n    transform: translateX(-5px);\n    color: red;\n    outline: 4px solid red;\n  }\n  100% {\n    transform: translateX(0);\n    color: red;\n    outline: 4px solid red;\n  }\n}\n\n@keyframes fallAndBounce {\n  0% {\n    transform: translateY(-1000px);\n  }\n  25%{\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-200px);\n  }\n  75% {\n    transform: translateY(0);\n  }\n  90% {\n    transform: translateY(-100px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n",".snackbar {\n  visibility: visible;\n  min-width: 250px;\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  border-radius: 2px;\n  padding: 16px;\n  position: fixed;\n  z-index: 1;\n  bottom: 30px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 17px;\n}\n\n.dot-container {\n  text-align: center;\n  position: fixed;\n  z-index: 1;\n  width: fit-content;\n  top: 1%;\n  left: 50%;\n  transform: translate(-50%);\n}\n\n.dot {\n  height: 15px;\n  width: 15px;\n  margin: 0 4px;\n  background-color: #bbb;\n  border-radius: 50%;\n  display: inline-block;\n  transition: background-color 0.3s;\n  cursor: pointer;\n}\n\n.dot.completed {\n  background-color: grey;\n}\n\n.dot.current {\n  background-color: green;\n}\n\n.dot:not(.completed):not(.current) {\n  background-color: #bbb;\n}\n","import { Component, Prop, h, State, Host } from '@stencil/core';\nimport { DragSelectedMapKey, SelectedValuesKey } from '../../utils/constants';\n\n/**\n * @component AppHome\n *\n * The `AppHome` component renders a series of containers parsed from the provided XML data.\n * It handles navigation between containers, resets the state on page reloads or container transitions,\n * and displays progress indicators (dots) for each container.\n */\n@Component({\n  tag: 'app-home',\n  shadow: false,\n  styleUrls: ['./../../index.css', '../../utils/css/animation.css', './app-home.css'],\n})\nexport class AppHome {\n  /**\n   * XML data passed to the component, which is parsed and used to render various containers.\n   */\n  @Prop() xmlData: string;\n\n  /**\n   * Initial index of the container being displayed.\n   */\n  @Prop() initialIndex: number = 0;\n\n  /**\n   * Boolean that controls the playability of the game.\n   */\n  @Prop() canplay: boolean = true;\n\n  /**\n   * Base URL for the containers.\n   */\n  @Prop() baseUrl: string = '';\n\n  /**\n   * Current index of the container being displayed.\n   */\n  @State() currentContainerIndex: number = this.initialIndex;\n\n  /**\n   * Boolean that controls the display of the completion message after all containers have been viewed.\n   */\n  @State() showCompletionMessage: boolean = false;\n\n  /**\n   * Array that stores the parsed containers from the XML data.\n   */\n  @State() containers: any[] = [];\n\n  /**\n   * Event handler for transitioning to the next container in the sequence.\n   * If the last container is reached, it shows a completion message.\n   */\n  nextContainer = (index?: number | undefined) => {\n    if (index != undefined && index == this.currentContainerIndex) return;\n    // Clear selected values from localStorage on container transition\n    localStorage.removeItem(SelectedValuesKey);\n    localStorage.removeItem(DragSelectedMapKey);\n\n    if (index != undefined && index < this.containers.length) {\n      // Move to the next container\n      this.currentContainerIndex = index;\n      window.dispatchEvent(new CustomEvent('activityChange', { detail: { index: this.currentContainerIndex } }));\n    } else if (this.currentContainerIndex < this.containers.length - 1) {\n      // Move to the next container\n      this.currentContainerIndex++;\n      window.dispatchEvent(new CustomEvent('activityChange', { detail: { index: this.currentContainerIndex } }));\n    } else if (this.currentContainerIndex >= this.containers.length - 1) {\n      // Show the completion message if all containers have been viewed\n      this.showCompletionMessage = true;\n      const event = new CustomEvent('gameCompleted');\n      window.dispatchEvent(event);\n\n      this.currentContainerIndex = 0;\n      // Hide the completion message after 3 seconds\n      setTimeout(() => {\n        this.showCompletionMessage = false;\n      }, 3000);\n    }\n\n    // Reset the containers array to trigger a re-render\n    this.containers = [...this.containers];\n  };\n\n  /**\n   * Lifecycle method that runs before the component is loaded. It sets up event listeners for transitioning\n   * between containers and parses the XML data into containers.\n   */\n  componentWillLoad() {\n    // Listen for 'nextContainer' event to transition between containers\n    window.addEventListener('nextContainer', () => {\n      this.nextContainer();\n    });\n\n    window.addEventListener('changeContainer', (e: any) => {\n      this.nextContainer(e.detail.index);\n    });\n\n    // Parse the provided XML data\n    this.parseXMLData(this.xmlData);\n\n    // Remove stored values in localStorage when the page is about to be unloaded\n    window.addEventListener('beforeunload', () => {\n      localStorage.removeItem(SelectedValuesKey);\n      localStorage.removeItem(DragSelectedMapKey);\n    });\n  }\n\n  /**\n   * Lifecycle method that cleans up event listeners when the component is removed from the DOM.\n   */\n  disconnectedCallback() {\n    window.removeEventListener('nextContainer', () => {\n      this.nextContainer();\n    });\n    window.removeEventListener('changeContainer', (e: any) => {\n      this.nextContainer(e.detail.index);\n    });\n  }\n\n  /**\n   * Parses the provided XML string into an XML DOM object and extracts the containers from it.\n   *\n   * @param xmlData - The XML data as a string.\n   */\n  private parseXMLData(xmlData: string) {\n    if (xmlData) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n      const rootElement = xmlDoc.documentElement;\n\n      // Parse containers from the root XML element\n      this.parseContainers(rootElement);\n    }\n  }\n\n  /**\n   * Recursively parses an XML element and its children, converting them into corresponding Stencil components.\n   *\n   * @param element - The XML element to parse.\n   * @returns The corresponding Stencil component with parsed props and children.\n   */\n  private parseElement(element: Element): any {\n    const tagName = element.nodeName.toLowerCase();\n    const props: { [key: string]: any } = {};\n\n    // Extract attributes from the element and map them to props\n    Array.from(element.attributes).forEach(attr => {\n      props[attr.name] = attr.value;\n    });\n\n    // Recursively parse child elements\n    const children = Array.from(element.childNodes)\n      .map(child => {\n        if (child.nodeType === 1) {\n          return this.parseElement(child as Element);\n        } else if (child.nodeType === 3 && child.textContent.trim() !== '') {\n          return child.textContent;\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    // Map XML tags to Stencil components\n    const componentMapping = {\n      'app-container': (\n        <app-container {...props} canplay={this.canplay} baseUrl={this.baseUrl}>\n          {children}\n        </app-container>\n      ),\n      'app-col': <app-col {...props}>{children}</app-col>,\n      'app-trace': <app-trace {...props}>{children}</app-trace>,\n      'app-image': <app-image {...props}>{children}</app-image>,\n      'app-row': <app-row {...props}>{children}</app-row>,\n      'app-text': <app-text {...props}>{children}</app-text>,\n      'app-pos': <app-pos {...props}>{children}</app-pos>,\n      'app-shape': <app-shape {...props}>{children}</app-shape>,\n      'app-wrap': <app-wrap {...props}>{children}</app-wrap>,\n      'app-random': <app-random {...props}>{children}</app-random>,\n    };\n\n    // If the tag is known, return the corresponding Stencil component, otherwise log a warning\n    if (componentMapping[tagName]) {\n      return componentMapping[tagName];\n    } else {\n      console.warn(`Unknown tag: ${tagName}`);\n      return null;\n    }\n  }\n\n  /**\n   * Parses the `app-container` elements from the XML root element and stores them in the `containers` state.\n   *\n   * @param rootElement - The root element of the parsed XML document.\n   */\n  private parseContainers(rootElement: Element) {\n    const containers = [];\n    const containerElements = rootElement.querySelectorAll('app-container');\n\n    // Parse each container and add it to the array\n    containerElements.forEach(container => {\n      const parsedElement = this.parseElement(container);\n      if (parsedElement) {\n        containers.push(parsedElement);\n      }\n    });\n\n    this.containers = containers;\n  }\n\n  /**\n   * Renders navigation dots for each container, indicating the progress of the user.\n   * Clicking on a dot allows the user to jump to a specific container.\n   */\n  private renderDots() {\n    return (\n      <div id=\"dot-indicator\" class=\"dot-container\">\n        {this.containers.map((_, index) => (\n          <span\n            class={`dot ${index < this.currentContainerIndex ? 'completed' : index === this.currentContainerIndex ? 'current' : ''}`}\n            onClick={() => this.jumpToContainer(index)}\n          ></span>\n        ))}\n      </div>\n    );\n  }\n\n  /**\n   * Jumps to a specific container based on the index of the dot clicked.\n   *\n   * @param index - The index of the container to jump to.\n   */\n  private jumpToContainer(index: number) {\n    this.nextContainer(index);\n    // this.currentContainerIndex = index;\n    // this.containers = [...this.containers]; // Trigger re-render\n  }\n\n  render() {\n    if (!this.xmlData) {\n      // If no XML data is provided, prompt the user to provide it\n      return <div>Please provide XML data.</div>;\n    }\n\n    return (\n      <Host index={this.currentContainerIndex} totalIndex={this.containers.length}>\n        {/* Render the current container */}\n        <div key={this.currentContainerIndex}>{this.containers[this.currentContainerIndex]}</div>\n\n        {/* Render navigation dots below the container */}\n        {this.renderDots()}\n\n        {/* Show completion message if all containers have been displayed */}\n        {this.showCompletionMessage && <div class=\"snackbar\">All containers have been displayed!</div>}\n      </Host>\n    );\n  }\n}\n",".image {\n  user-select: none;\n  -webkit-user-drag: none;\n  object-fit: contain;\n  max-width: 100%;\n  max-height: 100%;\n  aspect-ratio: 1 / 1; /* Ensures the image retains a 1:1 aspect ratio\n  /* The image will scale to fit within its container, keeping the aspect ratio */\n}\n","import { Component, Prop, h, Element, Host, getAssetPath } from '@stencil/core';\nimport { convertUrlToRelative, initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppImage\n *\n * The `AppImage` component displays an image element within a container. It is a versatile\n * component that allows dynamic sizing, positioning, visibility control, and event handling.\n * The component is designed to work in different types of environments, supporting custom\n * events such as touch, match, and entry events.\n */\n@Component({\n  tag: 'app-image',\n  styleUrl: 'app-image.css',\n  shadow: false,\n})\nexport class AppImage {\n  /**\n   * The value associated with the image. Typically used for internal logic or identification.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the image component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the image component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the image relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the image component, which can be used for conditional logic or styling purposes.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the image.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the image is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the image is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * The source URL of the image to be displayed.\n   */\n  @Prop() src: string;\n\n  /**\n   * Reference to the HTML element that represents this image component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle method that runs after the component has been loaded into the DOM.\n   * It initializes custom events based on the `type` of the image component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles for the image, including dimensions, positioning, and visibility\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'flex' : 'none',\n      alignItems: 'center', // Vertically center the image\n      justifyContent: 'center', // Horizontally center the image\n    };\n\n    return (\n      <Host\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        value={this.value}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        <img class=\"image\" src={convertUrlToRelative(this.src)} alt=\"\" style={style} />\n      </Host>\n    );\n  }\n}\n",".pos {\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  position: fixed;\n  \n}\n\n.pos > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppPos\n *\n * The `AppPos` component is used to position a block-level element with dynamic styling and event handling.\n * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom\n * events for interaction such as touch, match, and entry events.\n */\n@Component({\n  tag: 'app-pos',\n  styleUrl: 'app-pos.css',\n  shadow: false,\n})\nexport class AppPos {\n  /**\n   * Unique identifier for the positional element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value assigned to the component, often used for internal logic or data tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the element relative to others.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * The type of the component, used for conditional logic or specific styles.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index to support keyboard navigation within the component.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs (e.g., custom logic for interactions).\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the component is entered, often used to trigger animations or custom logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element that represents this `app-pos` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that is called after the component has been rendered in the DOM.\n   * It initializes custom events based on the `type` of the component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the component\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n    };\n\n    return (\n      <Host\n        id={this.id}\n        class=\"pos\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        value={this.value}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n",".random {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute; /* Container is now relative */\n}\n\n.random > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n/**\n * @component AppRandom\n *\n * The `AppRandom` component randomly positions its child elements within its container.\n * This component can be used when a random layout of elements is required. It allows\n * full customization via props such as dimensions, positioning, visibility, and event handling.\n */\n@Component({\n  tag: 'app-random',\n  styleUrl: 'app-random.css',\n  shadow: false,\n})\nexport class AppRandom {\n  /**\n   * Unique identifier for the random container.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the component, often used for internal logic.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the container relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * The type of the component, used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the component is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It randomly positions all child elements within the container using CSS `top` and `left` percentages.\n   */\n  componentDidLoad() {\n    // Select all direct child elements of the component\n    const slotElements = this.el.querySelectorAll('.random > *');\n\n    // Iterate over each child and apply random positions\n    slotElements.forEach((child: HTMLElement) => {\n      const randomTop = Math.random() * 100; // Random value between 0 and 100 for vertical position\n      const randomLeft = Math.random() * 100; // Random value between 0 and 100 for horizontal position\n\n      child.style.top = `${randomTop}%`;\n      child.style.left = `${randomLeft}%`;\n    });\n  }\n\n  render() {\n    // Inline styles for the container, including dimensions, positioning, and visibility\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host\n        class=\"random\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        {/* Slot to render child elements that will be randomly positioned */}\n        <slot />\n      </Host>\n    );\n  }\n}\n","import { Component, h, State, Prop, getAssetPath } from '@stencil/core';\n\n/**\n * @component AppRoot\n *\n * The `AppRoot` component is the main application entry point. It loads an external XML data file\n * from a specified URL or asset path and passes it down to the `app-home` component for rendering.\n * The XML path can be configured via a prop.\n */\n@Component({\n  tag: 'app-root',\n  shadow: false,\n  assetsDirs: ['assets'], // Specifies the directory for static assets\n})\nexport class AppRoot {\n  /**\n   * Prop to hold the XML file path or URL. This can be a relative path or an external URL.\n   */\n  @Prop() xmlPath: string;\n\n  /**\n   * Initial index of the container being displayed.\n   */\n  @Prop() initialIndex: number = 0;\n\n  /**\n   * Boolean that controls the playability of the game.\n   */\n  @Prop() canplay: boolean = true;\n\n  /**\n   * Base URL for the containers.\n   */\n  @Prop() baseUrl: string = '';\n\n  /**\n   * State variable to hold the XML data fetched from the specified path or URL.\n   */\n  @State() xmlData: string;\n\n  /**\n   * Lifecycle method that runs before the component is loaded.\n   * It fetches the XML data from the specified path or URL and sets it to the component's state.\n   */\n  async componentWillLoad() {\n    // Validate the xmlPath prop\n    // if (!this.xmlPath) {\n    //   console.error('XML path is not provided.');\n    //   return;\n    // }\n    const xmlPath = this.xmlPath ?? this.baseUrl + '/index.xml';\n    console.log('🚀 ~ AppRoot ~ componentWillLoad ~ this.baseUrl:', this.baseUrl);\n    console.log('🚀 ~ AppRoot ~ componentWillLoad ~ this.xmlPath:', this.xmlPath);\n    console.log('🚀 ~ AppRoot ~ componentWillLoad ~ xmlPath:', xmlPath);\n    // Fetch the XML data\n    try {\n      const resolvedPath = xmlPath.startsWith('http')\n        ? xmlPath // Use the provided URL if it's an HTTP/HTTPS link\n        : getAssetPath(xmlPath); // Otherwise, resolve it as an asset path\n\n      const response = await fetch(resolvedPath);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch XML data: ${response.statusText}`);\n      }\n      const data = await response.text();\n\n      // Store the XML data in the component's state\n      this.xmlData = data;\n    } catch (error) {\n      console.error('Error fetching XML data:', error);\n      this.xmlData = null;\n    }\n  }\n\n  render() {\n    // Show a loading message until the XML data is fetched\n    if (this.xmlData === undefined) {\n      return <div>Loading...</div>;\n    }\n\n    // Show an error message if the XML data could not be fetched\n    if (this.xmlData === null) {\n      return <div>Error loading XML data. Please check the path or URL.</div>;\n    }\n\n    // Once the XML data is loaded, pass it to the `app-home` component\n    return <app-home initialIndex={this.initialIndex} canplay={this.canplay} xmlData={this.xmlData} baseUrl={this.baseUrl}></app-home>;\n  }\n}\n",".row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* position: absolute; */\n}\n\n.row > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppRow\n *\n * The `AppRow` component is used to create a flexible row element that can contain other elements.\n * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.\n */\n@Component({\n  tag: 'app-row',\n  styleUrl: 'app-row.css',\n  shadow: false,\n})\nexport class AppRow {\n  /**\n   * Value associated with the row, typically used for internal logic or data.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the row (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the row (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the row relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the row, used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the row.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the row is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs within the row.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the row is entered, often used for triggering animations or custom logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-row` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is loaded into the DOM.\n   * It initializes custom events based on the `type` of the row component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the row component\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none', // Flexbox for row layout\n      zIndex: this.z,\n      backgroundColor: this.bgColor, // Apply background color if provided\n    };\n\n    return (\n      <Host\n        class=\"row\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n",".shape {\n  position: absolute;\n  top: var(--y);\n  left: var(--x);\n  display: var(--display);\n  z-index: var(--z);\n}\n\n.rectangle {\n  border-radius: 0;\n}\n\n.circle {\n  width: var(--width); /* Ensures width is always used for both dimensions */\n  height: var(--width); /* Make height equal to width for a perfect circle */\n  border-radius: 50%; /* 50% border-radius for a perfect circle */\n  background-color: var(--bgColor);\n}\n\n.ellipse {\n  width: var(--width);\n  height: var(--height);\n  border-radius: 50%; /* Create an ellipse shape */\n  background-color: var(--bgColor);\n}\n\n/* other shapes */\n\n.triangle {\n  width: var(--triangleWidth);\n  height: var(--triangleHeight);\n  background-color: var(--bgColor);\n  clip-path: polygon(50% 0%, 100% 100%, 0% 100%);\n}\n\n.rightTriangle {\n  width: var(--triangleWidth);\n  height: var(--triangleHeight);\n  background-color: var(--bgColor);\n  clip-path: polygon(100% 0%, 100% 100%, 0% 100%);\n}\n\n.leftTriangle {\n  width: var(--triangleWidth);\n  height: var(--triangleHeight);\n  background-color: var(--triangleBgColor);\n  clip-path: polygon(0% 0%, 100% 100%, 0% 100%);\n}\n\n.parallelogram {\n  width: var(--paralleWidth);\n  height: var(--paralleHeight);\n  transform: skew(20deg);\n}\n\n.star {\n  width: var(--starWidth);\n  height: var(--starHeight);\n  background-color: var(--starBgColor);\n  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);\n}\n\n.pentagon {\n  width: var(--pentagonWidth);\n  height: var(--pentagonHeight);\n  background-color: var(--pentagonBgColor);\n  clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);\n}\n\n.heptagon {\n  width: var(--heptagonWidth);\n  height: var(--heptagonHeight);\n  background-color: var(--heptagonBgColor);\n  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);\n}\n\n.octagon {\n  width: var(--octagonWidth);\n  height: var(--octagonHeight);\n  background-color: var(--octagonBgColor);\n  clip-path: polygon(25% 0%, 75% 0%, 100% 25%, 100% 75%, 75% 100%, 25% 100%, 0% 75%, 0% 25%);\n}\n\n.rhombus {\n  width: var(--rhombusWidth);\n  height: var(--rhombusHeight);\n  background-color: var(--rhombusBgColor);\n  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n}\n\n.heart {\n  height: var(--heartHeight);\n  width: var(--heartWidth);\n  border-image: radial-gradient(var(--heartBgColor) 69%, #0000 70%) 84.5%/50%;\n  clip-path: polygon(-41% 0, 50% 91%, 141% 0);\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppShape\n *\n * The `AppShape` component is used to display various types of shapes like rectangles, circles, or polygons.\n * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.\n * Additionally, it supports custom events for interaction like touch, match, and entry.\n */\n@Component({\n  tag: 'app-shape',\n  styleUrl: 'app-shape.css',\n  shadow: false,\n})\nexport class AppShape {\n  /**\n   * Unique identifier for the shape element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the shape, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the shape (CSS value, e.g., '100px', '50%').\n   * This is ignored for polygons.\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the shape (CSS value, e.g., '100px', '50%').\n   * This is ignored for polygons.\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the shape relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue').\n   * This is ignored for polygons.\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the shape, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').\n   */\n  @Prop() shapeType: string;\n\n  /**\n   * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the shape.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the shape is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the shape.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the shape is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-shape` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is loaded into the DOM.\n   * It initializes custom events based on the `type` of the shape component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the shape component\n    const style = {\n      height: this.shapeType !== 'polygon' ? this.height : undefined, // Set height unless it's a polygon\n      width: this.shapeType !== 'polygon' ? this.width : undefined, // Set width unless it's a polygon\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n      zIndex: this.z,\n      backgroundColor: this.shapeType !== 'polygon' ? this.bgColor : 'transparent', // Apply background only if not a polygon\n    };\n\n    return (\n      <Host\n        class={`shape ${this.shapeType}`} // Apply shape-specific class\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for any child elements */}\n      </Host>\n    );\n  }\n}\n",".text {\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.3s ease;\n  user-select: none;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-radius: 8px;\n  color: #333;\n  cursor: pointer;\n}\n\n.text:hover {\n  background-color: #f0f0f0;\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppText\n *\n * The `AppText` component is used to display text with customizable styling.\n * It allows you to set the font, size, color, and background color, along with\n * positioning and visibility control. The component supports custom events like touch, match, and entry.\n */\n@Component({\n  tag: 'app-text',\n  styleUrl: 'app-text.css',\n  shadow: false,\n})\nexport class AppText {\n  /**\n   * Unique identifier for the text element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the text element, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The string of text to be displayed in the component.\n   */\n  @Prop() string: string;\n\n  /**\n   * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').\n   */\n  @Prop() font: string;\n\n  /**\n   * Font size for the text (CSS value, e.g., '16px', '1.5em').\n   */\n  @Prop() fontSize: string;\n\n  /**\n   * Font color for the text (CSS color value, e.g., '#000000', 'red').\n   */\n  @Prop() fontColor: string;\n\n  /**\n   * When set to `true`, the text will highlight while being spoken, typically used for accessibility.\n   */\n  @Prop() highlightWhileSpeaking: boolean;\n\n  /**\n   * Height of the text component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * Width of the text component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the text component relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the component, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the text component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the text component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the text component.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the text component is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-text` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It initializes custom events based on the `type` of the text component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to customize the appearance and positioning of the text component\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      fontSize: this.fontSize,\n      fontFamily: this.font,\n      color: this.fontColor,\n      display: this.visible ? 'flex' : 'none', // Show or hide based on visibility prop\n    };\n\n    return (\n      <Host\n        class=\"text\"\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n        id={this.id}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n      >\n        {this.string}\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n  position: relative;\n}\n\n#svgContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 50px; /* Leave space for controls */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n}\n\nsvg {\n  width: 100%;\n  height: 100%;\n  max-height: calc(100vh - 50px);\n  /* border: 1px solid black; */\n  touch-action: none;\n}\n\n#draggableCircle {\n  cursor: pointer;\n  fill: red;\n  transition: fill 0.2s, r 0.2s;\n}\n\n.blindTracing {\n  stroke: none !important;\n}\n\n.blindFreeTrace {\n  stroke: none !important;\n}\n\n.hovered {\n  cursor: grab;\n  fill: darkred;\n}\n\n#controls {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-top: 1px solid #ccc;\n}\n\nbutton {\n  padding: 10px;\n  font-size: 16px;\n}\n\n@media (max-width: 600px) {\n  button {\n    padding: 8px;\n    font-size: 14px;\n  }\n}\n.trace-path-green {\n  stroke: green !important;\n}\n\n","import { Component, Prop, h, Host, State } from '@stencil/core';\nimport { triggerNextContainer } from '../../utils/utils';\nimport { TraceMode } from '../../utils/constants';\n\n// Enum for different tracing modes\n\n@Component({\n  tag: 'app-trace',\n  styleUrl: 'app-trace.css',\n  shadow: false,\n  assetsDirs: ['svg'],\n})\nexport class AppTrace {\n  /**\n   * Various configuration properties for `app-trace`\n   */\n  /**\n   * Unique identifier for this `app-trace` component instance.\n   */\n  @Prop() id: string;\n\n  /**\n   * Source URL or path for the SVG file used in this component.\n   */\n  @Prop() svgSource: string;\n\n  /**\n   * A custom string value associated with the component for additional data or identification.\n   */\n  @Prop() value: string;\n\n  /**\n   * Specifies the height of the component container, accepts any valid CSS height value (e.g., `\"100px\"`, `\"50%\"`).\n   */\n  @Prop() height: string;\n\n  /**\n   * Specifies the width of the component container, accepts any valid CSS width value (e.g., `\"100px\"`, `\"50%\"`).\n   */\n  @Prop() width: string;\n\n  /**\n   * Defines the x-coordinate position (left offset) of the component container, using any valid CSS `left` value (e.g., `\"10px\"`, `\"5%\"`).\n   */\n  @Prop() x: string;\n\n  /**\n   * Defines the y-coordinate position (top offset) of the component container, using any valid CSS `top` value (e.g., `\"10px\"`, `\"5%\"`).\n   */\n  @Prop() y: string;\n\n  /**\n   * Sets the z-index of the component, controlling its stacking order on the page.\n   */\n  @Prop() z: string;\n\n  /**\n   * Accessible label for screen readers, providing a textual description of the component's purpose.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * Controls visibility for assistive technologies. If `\"true\"`, the component is hidden from screen readers.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * Sets the tab order of the component within the page, enabling keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Mode for the tracing interaction, defining how users interact with the SVG paths.\n   * Options may include `\"noFlow\"`, `\"showFlow\"`, `\"freeTrace\"`, `\"blindTracing\"`, and `\"blindFreeTrace\"`.\n   */\n  @Prop() mode: string;\n\n  //   @Element() el!: HTMLElement;\n\n  @State() fileIndex: number = -1;\n  @State() isDragging: boolean = false;\n  @State() activePointerId: number | null = null;\n\n  // MODES = ['noFlow', 'showFlow', 'freeTrace', 'blindTracing', 'blindFreeTrace'];\n\n  // Handle the pointermove event with optimizations\n  // Update the path trace as the red circle moves\n  async initializeSVG() {\n    let state = {\n      fileIndex: -1,\n      currentPathIndex: 0,\n      lastLength: 0,\n      totalPathLength: 0,\n      isDragging: false,\n      circle: null as SVGCircleElement | null,\n      paths: [] as SVGGeometryElement[],\n      svg: null as SVGSVGElement | null,\n      proximityThreshold: 100, // General proximity threshold\n      freeTraceProximityThreshold: 50, // Reduced proximity threshold for free trace\n      rafId: null as number | null,\n      pointerMoveEvent: null as PointerEvent | null,\n      activePointerId: null as number | null,\n      mode: this.mode,\n      flowMarkers: [] as SVGPolygonElement[],\n      freeTraceLines: [] as SVGPathElement[],\n    };\n\n    await this.loadAnotherSVG(state, true); // Load the first SVG\n  }\n\n  componentWillLoad() {\n    this.initializeSVG();\n  }\n  // Fetch the SVG file asynchronously\n  async fetchSVG(url: string): Promise<string> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch SVG (${url}): ${response.statusText}`);\n    }\n    return await response.text();\n  }\n\n  // to calculate the bounding box of all paths\n  calculateBoundingBox(paths: SVGGeometryElement[], padding = 22) {\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n    paths.forEach(path => {\n      const length = path.getTotalLength();\n      const numPoints = 100; // Number of points to sample along the path\n      for (let i = 0; i <= numPoints; i++) {\n        const point = path.getPointAtLength((i / numPoints) * length);\n        if (point.x < minX) minX = point.x;\n        if (point.y < minY) minY = point.y;\n        if (point.x > maxX) maxX = point.x;\n        if (point.y > maxY) maxY = point.y;\n      }\n    });\n    // Apply padding\n    minX -= padding;\n    minY -= padding;\n    maxX += padding;\n    maxY += padding;\n    return { minX, minY, maxX, maxY };\n  }\n\n  // Insert the fetched SVG into the container and adjust viewBox\n  insertSVG(svgText: string) {\n    const svgContainer = document.getElementById('svgContainer') as HTMLElement;\n    svgContainer.innerHTML = svgText;\n\n    // After inserting, get the SVG element\n    const svgElement = svgContainer.querySelector('svg') as SVGSVGElement;\n\n    // Remove the width and height attributes from the SVG element\n    svgElement.removeAttribute('width');\n    svgElement.removeAttribute('height');\n\n    // Get all paths\n    const paths = svgElement.querySelectorAll('path, line') as NodeListOf<SVGGeometryElement>;\n\n    // Calculate bounding box\n    const bbox = this.calculateBoundingBox(Array.from(paths));\n\n    // Set the viewBox to the bounding box\n    const viewBoxWidth = bbox.maxX - bbox.minX;\n    const viewBoxHeight = bbox.maxY - bbox.minY;\n    svgElement.setAttribute('viewBox', `${bbox.minX} ${bbox.minY} ${viewBoxWidth} ${viewBoxHeight}`);\n  }\n\n  // Retrieve the SVG element from the container\n  getSVGElement() {\n    const svgContainer = document.getElementById('svgContainer') as HTMLElement;\n    return svgContainer.querySelector('svg');\n  }\n\n  // Get all path and line elements from the SVG\n  getPaths(svg: SVGSVGElement) {\n    return Array.from(svg.querySelectorAll('path, line'));\n  }\n\n  // Create flow markers along the path to guide the user\n  createFlowMarkersForPath(path: SVGGeometryElement, markerCount = 10) {\n    const totalLength = path.getTotalLength();\n    const interval = totalLength / (markerCount + 1); // Space markers evenly\n    const markers: SVGPolygonElement[] = [];\n\n    for (let i = 1; i <= markerCount; i++) {\n      const point = path.getPointAtLength(i * interval);\n      const nextPoint = path.getPointAtLength((i + 0.5) * interval); // Slightly ahead point for direction\n\n      // Create an arrow marker\n      const angle = Math.atan2(nextPoint.y - point.y, nextPoint.x - point.x);\n      const arrowMarker = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n      arrowMarker.setAttribute('points', '-5,-5 0,0 -5,5');\n      arrowMarker.setAttribute('fill', 'blue');\n      arrowMarker.setAttribute('transform', `translate(${point.x},${point.y}) rotate(${(angle * 180) / Math.PI})`);\n      arrowMarker.setAttribute('class', 'flow-indicator');\n      markers.push(arrowMarker);\n      path.parentNode?.appendChild(arrowMarker); // Append to the same SVG container\n    }\n    return markers;\n  }\n\n  // Show or hide flow indicators based on mode\n  updateFlowIndicators(state: any) {\n    const indicators = state.svg.querySelectorAll('.flow-indicator');\n    indicators.forEach(indicator => {\n      if (state.mode === TraceMode.NoFlow) {\n        (indicator as HTMLElement).style.display = 'none';\n      } else if (state.mode === TraceMode.ShowFlow) {\n        (indicator as HTMLElement).style.display = 'block';\n      }\n    });\n  }\n\n  // Create a new path element for the drawing effect\n  setupDrawingPath(state: any) {\n    state.paths.forEach((path: any, index: number) => {\n      const pathLength = path.getTotalLength();\n\n      // Create green path for tracing effect\n      const greenPath = path.cloneNode() as SVGPathElement;\n      greenPath.setAttribute('stroke', 'green');\n      greenPath.setAttribute('stroke-width', '13');\n      greenPath.setAttribute('stroke-dasharray', pathLength.toString());\n      greenPath.setAttribute('stroke-dashoffset', pathLength.toString()); // Hidden initially\n      path.parentNode.appendChild(greenPath, path);\n\n      path.setAttribute('class', 'trace-path'); // Add class for easier reference\n      greenPath.setAttribute('class', 'trace-path-green'); // Add class for easier reference\n\n      (path as any).greenPath = greenPath;\n      path.classList.add(state.mode);\n\n      // Conditionally hide or show the black path based on blind tracing mode\n      if (state.mode === TraceMode.BlindTracing || state.mode === TraceMode.BlindFreeTrace) {\n        // In blind tracing or blind free trace mode, hide the black path\n        path.setAttribute('stroke', 'none');\n      } else {\n        // In other modes, show the black path\n        path.setAttribute('stroke', '#000');\n        path.setAttribute('stroke-width', '10');\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke-dasharray', pathLength.toString());\n        path.setAttribute('stroke-dashoffset', '0'); // Fully visible initially\n      }\n\n      // Only create flow markers for the current path in normal modes\n      if (index === state.currentPathIndex && state.mode === TraceMode.ShowFlow) {\n        state.flowMarkers = this.createFlowMarkersForPath(path);\n      }\n    });\n\n    state.totalPathLength = state.paths[state.currentPathIndex].getTotalLength();\n  }\n\n  // Set up the draggable circle at the start of the first path\n  setupDraggableCircle(state: any) {\n    const firstPathStart = state.paths[0].getPointAtLength(0);\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    circle.setAttribute('id', 'draggableCircle');\n    circle.setAttribute('cx', firstPathStart.x.toString());\n    circle.setAttribute('cy', firstPathStart.y.toString());\n    circle.setAttribute('r', '20'); // Radius of the draggable circle\n    circle.setAttribute('fill', 'red');\n    state.svg?.appendChild(circle);\n    state.circle = circle;\n  }\n\n  // Add necessary event listeners using Pointer Events\n  addEventListeners(state: any) {\n    // Ensure the circle exists before adding events\n    if (!state.circle || !state.paths || state.paths.length === 0) return;\n\n    // Handle pointerdown on the circle to start dragging\n    state.circle.addEventListener('pointerdown', (evt: PointerEvent) => {\n      evt.preventDefault(); // Prevent default actions like text selection\n      const pointerPos = this.getPointerPosition(evt, state.svg!);\n      const circlePos = {\n        x: parseFloat(state.circle.getAttribute('cx')!),\n        y: parseFloat(state.circle.getAttribute('cy')!),\n      };\n      const distance = this.getDistanceSquared(pointerPos, circlePos);\n      if (distance <= state.proximityThreshold * state.proximityThreshold) {\n        state.isDragging = true;\n        state.activePointerId = evt.pointerId;\n        // Capture the pointer to continue receiving events even if it leaves the element\n        state.circle.setPointerCapture(evt.pointerId);\n      }\n    });\n\n    // Handle pointermove on the SVG to update the circle position\n    state.svg?.addEventListener('pointermove', (evt: PointerEvent) => {\n      if (!state.isDragging || evt.pointerId !== state.activePointerId) return;\n\n      state.pointerMoveEvent = evt;\n      if (!state.rafId) {\n        state.rafId = requestAnimationFrame(() => {\n          this.handlePointerMove(state);\n          state.rafId = null;\n        });\n      }\n    });\n\n    // Handle pointerup and pointercancel on the SVG to stop dragging\n    state.svg?.addEventListener('pointerup', (evt: PointerEvent) => {\n      if (evt.pointerId === state.activePointerId) {\n        state.isDragging = false;\n        state.activePointerId = null;\n      }\n    });\n\n    state.svg?.addEventListener('pointercancel', (evt: PointerEvent) => {\n      if (evt.pointerId === state.activePointerId) {\n        state.isDragging = false;\n        state.activePointerId = null;\n      }\n    });\n\n    // Optional: Prevent context menu on long press\n    state.svg?.addEventListener('contextmenu', (evt: MouseEvent) => {\n      evt.preventDefault();\n    });\n  }\n\n  // Modified handlePointerMove function\n  handlePointerMove(state: any) {\n    if (!state.isDragging) return;\n    if (!state.circle || !state.paths || state.paths.length === 0) return;\n\n    const evt = state.pointerMoveEvent as PointerEvent;\n    const pointerPos = this.getPointerPosition(evt, state.svg!);\n    const circlePos = {\n      x: parseFloat(state.circle.getAttribute('cx')!),\n      y: parseFloat(state.circle.getAttribute('cy')!),\n    };\n\n    const currentPath = state.paths[state.currentPathIndex];\n    if (!currentPath) {\n      console.error('No valid path found at the current index');\n      return;\n    }\n\n    // Use a reduced proximity threshold for free trace mode\n    let proximitySquared;\n    if (state.mode === TraceMode.FreeTrace || state.mode === TraceMode.BlindFreeTrace) {\n      proximitySquared = state.freeTraceProximityThreshold * state.freeTraceProximityThreshold;\n    } else {\n      proximitySquared = state.proximityThreshold * state.proximityThreshold;\n    }\n\n    // Calculate the distance between the pointer and the draggable circle\n    const distanceSquared = this.getDistanceSquared(pointerPos, circlePos);\n\n    // If the pointer is outside the proximity threshold, do not proceed with drawing or moving\n    if (distanceSquared > proximitySquared) {\n      return; // Skip any further actions\n    }\n\n    const closestPoint = this.getClosestPointOnPath(currentPath, pointerPos);\n\n    // Ensure drawing happens only within proximity threshold\n    const distanceToPathSquared = this.getDistanceSquared(pointerPos, closestPoint);\n    if (distanceToPathSquared > proximitySquared) {\n      return; // Skip drawing if too far from the path\n    }\n\n    // For free trace mode and blind free trace mode, allow free drawing only if within the reduced proximity threshold\n    if (state.mode === TraceMode.FreeTrace || state.mode === TraceMode.BlindFreeTrace) {\n      // Initialize the currentFreePath array if it's not created\n      if (!state.currentFreePath) {\n        state.currentFreePath = [];\n      }\n\n      // Create a new path element if it's the first trace for the current path index\n      if (!state.currentFreePath[state.currentPathIndex]) {\n        const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        newPath.setAttribute('stroke', 'green');\n        newPath.setAttribute('stroke-width', '8');\n        newPath.setAttribute('fill', 'none');\n\n        // Start the new path at the current pointer position\n        newPath.setAttribute('d', `M${pointerPos.x},${pointerPos.y}`);\n        state.svg?.appendChild(newPath);\n        state.currentFreePath[state.currentPathIndex] = newPath;\n\n        // Reset lastPointerPos for the new path\n        state.lastPointerPos = pointerPos;\n      }\n\n      // Get the previous position to draw a smooth curve\n      const previousPos = state.lastPointerPos || pointerPos;\n\n      // Create a quadratic curve from the previous point to the current point\n      const newPathData = state.currentFreePath[state.currentPathIndex].getAttribute('d');\n      const midPointX = (previousPos.x + pointerPos.x) / 2;\n      const midPointY = (previousPos.y + pointerPos.y) / 2;\n      const updatedPathData = `${newPathData} Q ${previousPos.x},${previousPos.y} ${midPointX},${midPointY}`;\n\n      // Update the path's 'd' attribute with the new curve\n      state.currentFreePath[state.currentPathIndex].setAttribute('d', updatedPathData);\n\n      // Move the draggable circle with the freehand trace\n      state.circle.setAttribute('cx', pointerPos.x.toString());\n      state.circle.setAttribute('cy', pointerPos.y.toString());\n\n      // Make sure the red dot (circle) is always on top\n      state.svg?.appendChild(state.circle); // This moves the circle to the last child, making it the topmost\n\n      // Update the last pointer position\n      state.lastPointerPos = pointerPos;\n\n      const currentPathLength = currentPath.getTotalLength();\n      const distanceToEnd = currentPathLength - closestPoint.length;\n\n      // If close to the end of the path, move to the next path\n      if (distanceToEnd < 5) {\n        this.moveToNextPath(state);\n        state.currentFreePath[state.currentPathIndex] = null; // Reset free path for next path\n      }\n\n      return; // Exit early since we're in free trace or blind free trace mode\n    }\n\n    // In normal modes, allow movement and drawing only within the general proximity threshold\n    if (state.isDragging && closestPoint.length >= state.lastLength) {\n      state.lastLength = closestPoint.length;\n      state.circle.setAttribute('cx', closestPoint.x.toString());\n      state.circle.setAttribute('cy', closestPoint.y.toString());\n\n      // Make sure the red dot (circle) is always on top\n      state.svg?.appendChild(state.circle); // This moves the circle to the last child, making it the topmost\n\n      currentPath.greenPath?.setAttribute('stroke-dashoffset', (state.totalPathLength - state.lastLength).toString());\n    }\n\n    // Check if the current path is completed\n    if (state.totalPathLength - 1 - state.lastLength < 5 && state.currentPathIndex < state.paths.length - 1) {\n      this.moveToNextPath(state);\n    } else if (state.totalPathLength - 1 - state.lastLength < 5 && state.currentPathIndex === state.paths.length - 1) {\n      //   this.loadAnotherSVG(state, true);\n      triggerNextContainer();\n    }\n  }\n\n  // Get the pointer position relative to the SVG\n  getPointerPosition(evt: PointerEvent, svg: SVGSVGElement) {\n    const svgPoint = svg.createSVGPoint();\n    svgPoint.x = evt.clientX;\n    svgPoint.y = evt.clientY;\n    const ctm = svg.getScreenCTM()?.inverse();\n    return ctm ? svgPoint.matrixTransform(ctm) : { x: evt.clientX, y: evt.clientY };\n  }\n\n  // Calculate the squared Euclidean distance between two points\n  getDistanceSquared(p1: { x: number; y: number }, p2: { x: number; y: number }) {\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n  }\n\n  // Find the closest point on the given path to the specified point using two-pass sampling\n  getClosestPointOnPath(pathNode: SVGGeometryElement, point: { x: number; y: number }) {\n    const pathLength = pathNode.getTotalLength();\n    let closestPoint = { x: 0, y: 0, length: 0 };\n    let minDistanceSquared = Infinity;\n\n    // First pass: coarse sampling\n    const coarseStep = 20; // Increased step for better performance\n    let coarseClosestPoint = { x: 0, y: 0, length: 0 };\n    let coarseMinDistanceSquared = Infinity;\n\n    for (let i = 0; i <= pathLength; i += coarseStep) {\n      const pointOnPath = pathNode.getPointAtLength(i);\n      const distanceSquared = this.getDistanceSquared(point, pointOnPath);\n\n      if (distanceSquared < coarseMinDistanceSquared) {\n        coarseMinDistanceSquared = distanceSquared;\n        coarseClosestPoint = {\n          x: pointOnPath.x,\n          y: pointOnPath.y,\n          length: i,\n        };\n      }\n    }\n\n    // Second pass: fine sampling around coarseClosestPoint\n    const fineStep = 2; // Increased step to reduce computations\n    const searchStart = Math.max(coarseClosestPoint.length - coarseStep, 0);\n    const searchEnd = Math.min(coarseClosestPoint.length + coarseStep, pathLength);\n\n    for (let i = searchStart; i <= searchEnd; i += fineStep) {\n      const pointOnPath = pathNode.getPointAtLength(i);\n      const distanceSquared = this.getDistanceSquared(point, pointOnPath);\n\n      if (distanceSquared < minDistanceSquared) {\n        minDistanceSquared = distanceSquared;\n        closestPoint = { x: pointOnPath.x, y: pointOnPath.y, length: i };\n      }\n    }\n\n    return closestPoint;\n  }\n\n  // Load the next or previous SVG based on the isNext flag\n  async loadAnotherSVG(state: any, isNext: boolean) {\n    state.isDragging = false;\n\n    // Update fileIndex based on whether isNext is true or false\n    // if (isNext) {\n    //   state.fileIndex++;\n    //   if (state.fileIndex >= this.svgFiles.length) {\n    //     state.fileIndex = this.svgFiles.length - 1; // Stay at the last file\n    //     return;\n    //   }\n    // } else {\n    //   state.fileIndex--;\n    //   if (state.fileIndex < 0) {\n    //     state.fileIndex = 0; // Stay at the first file\n    //     return;\n    //   }\n    // }\n\n    try {\n      if (state.svg) {\n        this.cleanupPreviousSVG(state);\n      }\n\n      //   const svgText = await this.fetchSVG(this.svgSource ?? this.svgFiles[state.fileIndex]);\n      const svgText = await this.fetchSVG(this.svgSource);\n\n      this.insertSVG(svgText);\n\n      state.svg = this.getSVGElement();\n      state.paths = this.getPaths(state.svg);\n\n      this.setupDrawingPath(state);\n      this.setupDraggableCircle(state);\n      this.addEventListeners(state);\n    } catch (error) {\n      console.error(`Error loading SVG (${this.svgSource}):`, error);\n    }\n  }\n\n  // Cleanup previous SVG's elements and state\n  cleanupPreviousSVG(state: any) {\n    if (state.circle) {\n      state.svg?.removeChild(state.circle);\n      state.circle = null;\n    }\n\n    const indicators = state.svg?.querySelectorAll('.flow-indicator') as NodeListOf<SVGPolygonElement>;\n    indicators.forEach(indicator => {\n      indicator.remove(); // Remove all previous flow indicators\n    });\n\n    state.currentPathIndex = 0;\n    state.lastLength = 0;\n    state.totalPathLength = state.paths[0].getTotalLength();\n  }\n\n  // Move to the next path in the SVG\n  moveToNextPath(state: any) {\n    state.isDragging = false;\n    state.currentPathIndex++;\n    state.lastLength = 0;\n\n    if (state.currentPathIndex >= state.paths.length) {\n      //   this.loadAnotherSVG(state, true);\n      triggerNextContainer();\n      return;\n    }\n\n    const nextPath = state.paths[state.currentPathIndex];\n    if (!nextPath) {\n      console.error('No valid path found at the next index');\n      return;\n    }\n\n    state.totalPathLength = nextPath.getTotalLength();\n\n    const startPoint = nextPath.getPointAtLength(0);\n    state.circle?.setAttribute('cx', startPoint.x.toString());\n    state.circle?.setAttribute('cy', startPoint.y.toString());\n\n    if (state.mode === TraceMode.ShowFlow) {\n      state.flowMarkers = this.createFlowMarkersForPath(nextPath);\n    }\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      position: 'absolute' as const,\n    };\n\n    // List of SVG file names to process sequentially\n    // const svgFiles = ['A_test.svg', 'B_test.svg', 'C_test.svg', 'D_test.svg', 'अ_test.svg', 'ट_test.svg', 'क_test.svg', 'ख_test.svg', 'ग_test.svg']; // Add more SVG file names as needed\n\n    return (\n      <Host class=\"trace\" id={this.id} style={style} aria-label={this.ariaLabel} aria-hidden={this.ariaHidden} tabindex={this.tabIndex}>\n        <div id=\"svgContainer\"></div>\n      </Host>\n    );\n  }\n}\n",".wrap {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, auto));\n}\n\n.wrap > * {\n  padding: 10px;\n  background-color: var(--child-bg-color, #f0f0f0);\n  box-sizing: border-box;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppWrap\n *\n * The `AppWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.\n * The component can display its content as a grid and supports custom events like touch, match, and entry.\n * It allows for full customization via props like dimensions, background color, visibility, and z-index.\n */\n@Component({\n  tag: 'app-wrap',\n  styleUrl: 'app-wrap.css',\n  shadow: false,\n})\nexport class AppWrap {\n  /**\n   * Unique identifier for the wrap element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the wrap element, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the wrap container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the wrap container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.\n   */\n  @Prop() ariaLabel: string;\n\n  /**\n   * The ARIA hidden attribute of the container. Used for accessibility to hide the element.\n   */\n  @Prop() ariaHidden: string;\n\n  /**\n   * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the wrap container relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the wrap container, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the wrap container.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the wrap container is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.\n   */\n  @Prop() onInCorrect: string;\n\n  /**\n   * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onCorrect: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the wrap container.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-wrap` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It initializes custom events based on the `type` of the wrap container.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the wrap container, with grid layout applied\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'grid' : 'none', // Use grid layout\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host\n        class=\"wrap\"\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        aria-label={this.ariaLabel}\n        aria-hidden={this.ariaHidden}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onCorrect={this.onCorrect}\n        onInCorrect={this.onInCorrect}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["appColCss","AppColStyle0","AppCol","componentDidLoad","initEventsForElement","this","el","type","render","style","height","width","backgroundColor","bgColor","top","y","left","x","display","visible","zIndex","z","h","Host","key","class","tabindex","tabIndex","value","audio","onTouch","onMatch","onEntry","appContainerCss","AppContainerStyle0","AppContainer","scaleContainer","container","widths","window","innerWidth","_a","screen","push","Math","min","document","documentElement","clientHeight","scaleX","scaleY","scale","transform","body","addEventListener","position","id","objective","AppHome","nextContainer","localStorage","removeItem","SelectedValuesKey","DragSelectedMapKey","currentContainerIndex","containers","length","showCompletionMessage","event","CustomEvent","dispatchEvent","setTimeout","componentWillLoad","parseXMLData","xmlData","disconnectedCallback","removeEventListener","parser","DOMParser","xmlDoc","parseFromString","rootElement","parseContainers","parseElement","element","tagName","nodeName","toLowerCase","props","Array","from","attributes","forEach","attr","name","children","childNodes","map","child","nodeType","textContent","trim","filter","Boolean","componentMapping","Object","assign","console","warn","containerElements","querySelectorAll","parsedElement","renderDots","_","index","onClick","jumpToContainer","appImageCss","AppImageStyle0","AppImage","alignItems","justifyContent","src","appPosCss","AppPosStyle0","AppPos","appRandomCss","AppRandomStyle0","AppRandom","slotElements","randomTop","random","randomLeft","AppRoot","res","getAssetPath","response","fetch","data","text","appRowCss","AppRowStyle0","AppRow","appShapeCss","AppShapeStyle0","AppShape","shapeType","undefined","appTextCss","AppTextStyle0","AppText","fontSize","fontFamily","font","color","fontColor","string","appWrapCss","AppWrapStyle0","AppWrap"],"sources":["src/components/column/app-col.css?tag=app-col","src/components/column/AppCol.tsx","src/components/container/app-container.css?tag=app-container","src/components/container/AppContainer.tsx","src/components/home/AppHome.tsx","src/components/image/app-image.css?tag=app-image","src/components/image/AppImage.tsx","src/components/position/app-pos.css?tag=app-pos","src/components/position/AppPos.tsx","src/components/random/app-random.css?tag=app-random","src/components/random/AppRandom.tsx","src/components/root/AppRoot.tsx","src/components/row/app-row.css?tag=app-row","src/components/row/AppRow.tsx","src/components/shape/app-shape.css?tag=app-shape","src/components/shape/AppShape.tsx","src/components/text/app-text.css?tag=app-text","src/components/text/AppText.tsx","src/components/wrap/app-wrap.css?tag=app-wrap","src/components/wrap/AppWrap.tsx"],"sourcesContent":[".col {\n  /* position: absolute; */\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  /* position: relative; */\n  padding: 15px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  align-items: center;\n}\n\n.col > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppCol\n *\n * The `AppCol` component is a dynamic column-like UI element that can be\n * customized via various properties such as dimensions, position, visibility,\n * background color, and event handlers. It is designed to work within\n * containers (`app-container`) and can include child components like\n * `app-text`, `app-row`, etc.\n */\n@Component({\n  tag: 'app-col',\n  styleUrl: 'app-col.css',\n  shadow: false,\n})\nexport class AppCol {\n  /**\n   * The unique identifier for the column component.\n   */\n  @Prop() id: string;\n\n  /**\n   * The value associated with the column component. Typically used for internal logic.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the column component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the column component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * The z-index of the column to control stacking order.\n   */\n  @Prop() z: string;\n\n  /**\n   * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the column, which can be used for styling or specific logic handling.\n   */\n  @Prop() type: string;\n\n  /**\n   * The tab index value, used to set the tab order of the column for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * A boolean that controls whether the column is visible (`true`) or hidden (`false`).\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * Audio file URL or identifier for sound that will be associated with the column.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler for a touch event, where a custom function can be triggered when the column is touched.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler for a matching action, which can be used to hide the column or trigger other custom logic.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element that represents this component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * This lifecycle hook is called after the component is rendered in the DOM.\n   * It initializes events for the column based on the provided type.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles applied to the column, mainly for positioning and background.\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host\n        class=\"col\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        <slot />\n      </Host>\n    );\n  }\n}\n",".container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: var(--bgColor, #ffffff);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n/**\n * @component AppContainer\n *\n * The `AppContainer` component acts as a container for other elements. It scales responsively\n * based on the window size, adjusts background color, and provides various configurable properties\n * such as dimensions, positioning, visibility, and custom event handlers.\n */\n@Component({\n  tag: 'app-container',\n  styleUrl: 'app-container.css',\n  shadow: false,\n})\nexport class AppContainer {\n  /**\n   * Unique identifier for the container.\n   */\n  @Prop() id: string;\n\n  /**\n   * Objective or purpose of the container. Can be used for internal logic or tracking.\n   */\n  @Prop() objective: string;\n\n  /**\n   * Value assigned to the container. This can be used for logic related to this component.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the container (CSS value).\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the container (CSS value).\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the container.\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the container.\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index to control the stacking order of the container.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the container (CSS color value).\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Type of the container, which can be used for conditional logic or styling purposes.\n   */\n  @Prop() type: string;\n\n  /**\n   * TabIndex for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the container.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the container is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a specific match condition is met within the container.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the container is entered, useful for triggering animations or logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element that represents this container component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Scales the container based on the window or screen size, maintaining the aspect ratio.\n   * The container scales according to the minimum dimension of the screen.\n   *\n   * @param container The container element to be scaled.\n   */\n  scaleContainer(container: HTMLElement) {\n    const widths = [window.innerWidth];\n    const heights = [window.innerHeight];\n\n    if (window.screen?.width) {\n      widths.push(window.screen.width);\n      heights.push(window.screen.height);\n    }\n\n    const width = Math.min(...widths);\n    const height = document.documentElement.clientHeight;\n\n    const scaleX = width / 1600; // Scale based on a reference width of 1600px\n    const scaleY = height / 900; // Scale based on a reference height of 900px\n    const scale = Math.min(scaleX, scaleY);\n\n    // Center the container and apply scaling\n    container.style.transform = `translate(-50%, -50%) scale(${scale})`;\n  }\n\n  /**\n   * Lifecycle hook that runs after the component is loaded.\n   * - It scales the container.\n   * - It sets the background color of the body.\n   * - Adds event listeners for `resize` and `load` to rescale the container on window size changes.\n   */\n  componentDidLoad() {\n    this.scaleContainer(this.el);\n    document.body.style.backgroundColor = this.bgColor;\n\n    // Re-scale the container on window resize or load events\n    window.addEventListener('resize', () => this.scaleContainer(this.el));\n    window.addEventListener('load', () => this.scaleContainer(this.el));\n  }\n\n  render() {\n    // Define the styles for the container element\n    const style = {\n      backgroundColor: this.bgColor,\n      width: '1600px', // Fixed width of the container\n      height: '900px', // Fixed height of the container\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)', // Centering the container\n    };\n\n    return (\n      <Host id=\"container\" class=\"container\" objective={this.objective} style={style}>\n        <slot />\n      </Host>\n    );\n  }\n}\n","import { Component, Prop, h, State } from '@stencil/core';\nimport { DragSelectedMapKey, SelectedValuesKey } from '../../utils/constants';\n\n/**\n * @component AppHome\n *\n * The `AppHome` component renders a series of containers parsed from the provided XML data.\n * It handles navigation between containers, resets the state on page reloads or container transitions,\n * and displays progress indicators (dots) for each container.\n */\n@Component({\n  tag: 'app-home',\n  shadow: false,\n})\nexport class AppHome {\n  /**\n   * XML data passed to the component, which is parsed and used to render various containers.\n   */\n  @Prop() xmlData: string;\n\n  /**\n   * Current index of the container being displayed.\n   */\n  @State() currentContainerIndex: number = 0;\n\n  /**\n   * Boolean that controls the display of the completion message after all containers have been viewed.\n   */\n  @State() showCompletionMessage: boolean = false;\n\n  /**\n   * Array that stores the parsed containers from the XML data.\n   */\n  @State() containers: any[] = [];\n\n  /**\n   * Lifecycle method that runs before the component is loaded. It sets up event listeners for transitioning\n   * between containers and parses the XML data into containers.\n   */\n  componentWillLoad() {\n    // Listen for 'nextContainer' event to transition between containers\n    window.addEventListener('nextContainer', this.nextContainer);\n\n    // Parse the provided XML data\n    this.parseXMLData(this.xmlData);\n\n    // Remove stored values in localStorage when the page is about to be unloaded\n    window.addEventListener('beforeunload', () => {\n      localStorage.removeItem(SelectedValuesKey);\n      localStorage.removeItem(DragSelectedMapKey);\n    });\n  }\n\n  /**\n   * Lifecycle method that cleans up event listeners when the component is removed from the DOM.\n   */\n  disconnectedCallback() {\n    window.removeEventListener('nextContainer', this.nextContainer);\n  }\n\n  /**\n   * Parses the provided XML string into an XML DOM object and extracts the containers from it.\n   *\n   * @param xmlData - The XML data as a string.\n   */\n  private parseXMLData(xmlData: string) {\n    if (xmlData) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n      const rootElement = xmlDoc.documentElement;\n\n      // Parse containers from the root XML element\n      this.parseContainers(rootElement);\n    }\n  }\n\n  /**\n   * Recursively parses an XML element and its children, converting them into corresponding Stencil components.\n   *\n   * @param element - The XML element to parse.\n   * @returns The corresponding Stencil component with parsed props and children.\n   */\n  private parseElement(element: Element): any {\n    const tagName = element.nodeName.toLowerCase();\n    const props: { [key: string]: any } = {};\n\n    // Extract attributes from the element and map them to props\n    Array.from(element.attributes).forEach(attr => {\n      props[attr.name] = attr.value;\n    });\n\n    // Recursively parse child elements\n    const children = Array.from(element.childNodes)\n      .map(child => {\n        if (child.nodeType === 1) {\n          return this.parseElement(child as Element);\n        } else if (child.nodeType === 3 && child.textContent.trim() !== '') {\n          return child.textContent;\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    // Map XML tags to Stencil components\n    const componentMapping = {\n      'app-container': <app-container {...props}>{children}</app-container>,\n      'app-col': <app-col {...props}>{children}</app-col>,\n      'app-image': <app-image {...props}>{children}</app-image>,\n      'app-row': <app-row {...props}>{children}</app-row>,\n      'app-text': <app-text {...props}>{children}</app-text>,\n      'app-pos': <app-pos {...props}>{children}</app-pos>,\n      'app-shape': <app-shape {...props}>{children}</app-shape>,\n      'app-wrap': <app-wrap {...props}>{children}</app-wrap>,\n      'app-random': <app-random {...props}>{children}</app-random>,\n    };\n\n    // If the tag is known, return the corresponding Stencil component, otherwise log a warning\n    if (componentMapping[tagName]) {\n      return componentMapping[tagName];\n    } else {\n      console.warn(`Unknown tag: ${tagName}`);\n      return null;\n    }\n  }\n\n  /**\n   * Parses the `app-container` elements from the XML root element and stores them in the `containers` state.\n   *\n   * @param rootElement - The root element of the parsed XML document.\n   */\n  private parseContainers(rootElement: Element) {\n    const containers = [];\n    const containerElements = rootElement.querySelectorAll('app-container');\n\n    // Parse each container and add it to the array\n    containerElements.forEach(container => {\n      const parsedElement = this.parseElement(container);\n      if (parsedElement) {\n        containers.push(parsedElement);\n      }\n    });\n\n    this.containers = containers;\n  }\n\n  /**\n   * Event handler for transitioning to the next container in the sequence.\n   * If the last container is reached, it shows a completion message.\n   */\n  private nextContainer = () => {\n    // Clear selected values from localStorage on container transition\n    localStorage.removeItem(SelectedValuesKey);\n    localStorage.removeItem(DragSelectedMapKey);\n\n    if (this.currentContainerIndex < this.containers.length - 1) {\n      // Move to the next container\n      this.currentContainerIndex++;\n    } else {\n      // Show the completion message if all containers have been viewed\n      this.showCompletionMessage = true;\n      const event = new CustomEvent('gameCompleted');\n      window.dispatchEvent(event);\n\n      // Hide the completion message after 3 seconds\n      setTimeout(() => {\n        this.showCompletionMessage = false;\n      }, 3000);\n    }\n\n    // Reset the containers array to trigger a re-render\n    this.containers = [...this.containers];\n  };\n\n  /**\n   * Renders navigation dots for each container, indicating the progress of the user.\n   * Clicking on a dot allows the user to jump to a specific container.\n   */\n  private renderDots() {\n    return (\n      <div class=\"dot-container\">\n        {this.containers.map((_, index) => (\n          <span\n            class={`dot ${index < this.currentContainerIndex ? 'completed' : index === this.currentContainerIndex ? 'current' : ''}`}\n            onClick={() => this.jumpToContainer(index)}\n          ></span>\n        ))}\n      </div>\n    );\n  }\n\n  /**\n   * Jumps to a specific container based on the index of the dot clicked.\n   *\n   * @param index - The index of the container to jump to.\n   */\n  private jumpToContainer(index: number) {\n    this.currentContainerIndex = index;\n    this.containers = [...this.containers]; // Trigger re-render\n  }\n\n  render() {\n    if (!this.xmlData) {\n      // If no XML data is provided, prompt the user to provide it\n      return <div>Please provide XML data.</div>;\n    }\n\n    return (\n      <div>\n        {/* Render the current container */}\n        <div key={this.currentContainerIndex}>{this.containers[this.currentContainerIndex]}</div>\n\n        {/* Render navigation dots below the container */}\n        {this.renderDots()}\n\n        {/* Show completion message if all containers have been displayed */}\n        {this.showCompletionMessage && <div class=\"snackbar\">All containers have been displayed!</div>}\n\n        <style>\n          {`\n            .snackbar {\n              visibility: visible;\n              min-width: 250px;\n              background-color: #333;\n              color: #fff;\n              text-align: center;\n              border-radius: 2px;\n              padding: 16px;\n              position: fixed;\n              z-index: 1;\n              bottom: 30px;\n              left: 50%;\n              transform: translateX(-50%);\n              font-size: 17px;\n            }\n\n            .dot-container {\n              text-align: center;\n              position: relative;\n              z-index: 1;\n            }\n\n            .dot {\n              height: 15px;\n              width: 15px;\n              margin: 0 4px;\n              background-color: #bbb;\n              border-radius: 50%;\n              display: inline-block;\n              transition: background-color 0.3s;\n              cursor: pointer;\n            }\n\n            .dot.completed {\n              background-color: black;\n            }\n\n            .dot.current {\n              background-color: green;\n            }\n\n            .dot:not(.completed):not(.current) {\n              background-color: #bbb;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n",".image {\n  user-select: none;\n  -webkit-user-drag: none;\n  object-fit: cover;\n  max-width: 100%;\n  max-height: 100%;\n  aspect-ratio: 1 / 1; /* Ensures the image retains a 1:1 aspect ratio */\n  /* The image will scale to fit within its container, keeping the aspect ratio */\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppImage\n * \n * The `AppImage` component displays an image element within a container. It is a versatile\n * component that allows dynamic sizing, positioning, visibility control, and event handling.\n * The component is designed to work in different types of environments, supporting custom\n * events such as touch, match, and entry events.\n */\n@Component({\n  tag: 'app-image',\n  styleUrl: 'app-image.css',\n  shadow: false,\n})\nexport class AppImage {\n  /**\n   * The value associated with the image. Typically used for internal logic or identification.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the image component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the image component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the image relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the image component, which can be used for conditional logic or styling purposes.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the image.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the image is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the image is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * The source URL of the image to be displayed.\n   */\n  @Prop() src: string;\n\n  /**\n   * Reference to the HTML element that represents this image component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle method that runs after the component has been loaded into the DOM.\n   * It initializes custom events based on the `type` of the image component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles for the image, including dimensions, positioning, and visibility\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'flex' : 'none',\n      alignItems: 'center', // Vertically center the image\n      justifyContent: 'center', // Horizontally center the image\n    };\n\n    return (\n      <Host\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        value={this.value}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Render the image element */}\n        <img class=\"image\" src={this.src} />\n      </Host>\n    );\n  }\n}\n",".pos {\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  position: fixed;\n}\n\n.pos > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppPos\n *\n * The `AppPos` component is used to position a block-level element with dynamic styling and event handling.\n * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom\n * events for interaction such as touch, match, and entry events.\n */\n@Component({\n  tag: 'app-pos',\n  styleUrl: 'app-pos.css',\n  shadow: false,\n})\nexport class AppPos {\n  /**\n   * Unique identifier for the positional element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value assigned to the component, often used for internal logic or data tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the element relative to others.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * The type of the component, used for conditional logic or specific styles.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index to support keyboard navigation within the component.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs (e.g., custom logic for interactions).\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the component is entered, often used to trigger animations or custom logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element that represents this `app-pos` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that is called after the component has been rendered in the DOM.\n   * It initializes custom events based on the `type` of the component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the component\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n    };\n\n    return (\n      <Host\n        class=\"pos\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        value={this.value}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n",".random {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute; /* Container is now relative */\n}\n\n.random > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n/**\n * @component AppRandom\n * \n * The `AppRandom` component randomly positions its child elements within its container.\n * This component can be used when a random layout of elements is required. It allows\n * full customization via props such as dimensions, positioning, visibility, and event handling.\n */\n@Component({\n  tag: 'app-random',\n  styleUrl: 'app-random.css',\n  shadow: false,\n})\nexport class AppRandom {\n  /**\n   * Unique identifier for the random container.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the component, often used for internal logic.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the container relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * The type of the component, used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the component is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It randomly positions all child elements within the container using CSS `top` and `left` percentages.\n   */\n  componentDidLoad() {\n    // Select all direct child elements of the component\n    const slotElements = this.el.querySelectorAll('.random > *');\n\n    // Iterate over each child and apply random positions\n    slotElements.forEach((child: HTMLElement) => {\n      const randomTop = Math.random() * 100; // Random value between 0 and 100 for vertical position\n      const randomLeft = Math.random() * 100; // Random value between 0 and 100 for horizontal position\n\n      child.style.top = `${randomTop}%`;\n      child.style.left = `${randomLeft}%`;\n    });\n  }\n\n  render() {\n    // Inline styles for the container, including dimensions, positioning, and visibility\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host\n        class=\"random\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Slot to render child elements that will be randomly positioned */}\n        <slot />\n      </Host>\n    );\n  }\n}\n","import { Component, getAssetPath, h, State } from '@stencil/core';\n\n/**\n * @component AppRoot\n *\n * The `AppRoot` component is the main application entry point. It loads an external XML data file\n * from the `assets` directory and passes it down to the `app-home` component for rendering. The component\n * uses the Stencil lifecycle to fetch the XML data asynchronously before rendering the content.\n */\n@Component({\n  tag: 'app-root',\n  shadow: false,\n  assetsDirs: ['assets'], // Specifies the directory for static assets\n})\nexport class AppRoot {\n  /**\n   * State variable to hold the XML data fetched from the external file.\n   */\n  @State() xmlData: string;\n\n  /**\n   * Lifecycle method that runs before the component is loaded.\n   * It fetches the XML data from the assets folder and sets it to the component's state.\n   */\n  async componentWillLoad() {\n    // Get the path to the XML file from the assets directory\n    const res = getAssetPath('./assets/xmlData.xml');\n\n    // Fetch the XML data asynchronously\n    const response = await fetch(res);\n    const data = await response.text();\n\n    // Store the XML data in the component's state\n    this.xmlData = data;\n  }\n\n  render() {\n    // Show a loading message until the XML data is fetched\n    if (!this.xmlData) {\n      return <div>Loading...</div>;\n    }\n\n    // Once the XML data is loaded, pass it to the `app-home` component\n    return <app-home xmlData={this.xmlData}></app-home>;\n  }\n}\n",".row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* position: absolute; */\n}\n\n.row > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppRow\n *\n * The `AppRow` component is used to create a flexible row element that can contain other elements.\n * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.\n */\n@Component({\n  tag: 'app-row',\n  styleUrl: 'app-row.css',\n  shadow: false,\n})\nexport class AppRow {\n  /**\n   * Value associated with the row, typically used for internal logic or data.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the row (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the row (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the row relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the row, used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the row.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the row is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs within the row.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the row is entered, often used for triggering animations or custom logic.\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-row` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is loaded into the DOM.\n   * It initializes custom events based on the `type` of the row component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the row component\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none', // Flexbox for row layout\n      zIndex: this.z,\n      backgroundColor: this.bgColor, // Apply background color if provided\n    };\n\n    return (\n      <Host\n        class=\"row\"\n        type={this.type}\n        tabindex={this.tabIndex}\n        value={this.value}\n        style={style}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n",".shape {\n  position: absolute;\n  top: var(--y);\n  left: var(--x);\n  display: var(--display);\n  z-index: var(--z);\n}\n\n.rectangle {\n  border-radius: 0;\n}\n\n.circle {\n  width: var(--width); /* Ensures width is always used for both dimensions */\n  height: var(--width); /* Make height equal to width for a perfect circle */\n  border-radius: 50%; /* 50% border-radius for a perfect circle */\n  background-color: var(--bgColor);\n}\n\n.ellipse {\n  width: var(--width);\n  height: var(--height);\n  border-radius: 50%; /* Create an ellipse shape */\n  background-color: var(--bgColor);\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppShape\n *\n * The `AppShape` component is used to display various types of shapes like rectangles, circles, or polygons.\n * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.\n * Additionally, it supports custom events for interaction like touch, match, and entry.\n */\n@Component({\n  tag: 'app-shape',\n  styleUrl: 'app-shape.css',\n  shadow: false,\n})\nexport class AppShape {\n  /**\n   * Unique identifier for the shape element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the shape, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the shape (CSS value, e.g., '100px', '50%').\n   * This is ignored for polygons.\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the shape (CSS value, e.g., '100px', '50%').\n   * This is ignored for polygons.\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the shape relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue').\n   * This is ignored for polygons.\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the shape, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').\n   */\n  @Prop() shapeType: string;\n\n  /**\n   * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the shape.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the shape is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the shape.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the shape is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-shape` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is loaded into the DOM.\n   * It initializes custom events based on the `type` of the shape component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the shape component\n    const style = {\n      height: this.shapeType !== 'polygon' ? this.height : undefined, // Set height unless it's a polygon\n      width: this.shapeType !== 'polygon' ? this.width : undefined, // Set width unless it's a polygon\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none', // Toggle visibility\n      zIndex: this.z,\n      backgroundColor: this.shapeType !== 'polygon' ? this.bgColor : 'transparent', // Apply background only if not a polygon\n    };\n\n    return (\n      <Host\n        class={`shape ${this.shapeType}`} // Apply shape-specific class\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for any child elements */}\n      </Host>\n    );\n  }\n}\n",".text {\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.3s ease;\n  user-select: none;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-radius: 8px;\n  color: #333;\n  cursor: pointer;\n}\n\n.text:hover {\n  background-color: #f0f0f0;\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppText\n *\n * The `AppText` component is used to display text with customizable styling.\n * It allows you to set the font, size, color, and background color, along with\n * positioning and visibility control. The component supports custom events like touch, match, and entry.\n */\n@Component({\n  tag: 'app-text',\n  styleUrl: 'app-text.css',\n  shadow: false,\n})\nexport class AppText {\n  /**\n   * Unique identifier for the text element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the text element, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The string of text to be displayed in the component.\n   */\n  @Prop() string: string;\n\n  /**\n   * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').\n   */\n  @Prop() font: string;\n\n  /**\n   * Font size for the text (CSS value, e.g., '16px', '1.5em').\n   */\n  @Prop() fontSize: string;\n\n  /**\n   * Font color for the text (CSS color value, e.g., '#000000', 'red').\n   */\n  @Prop() fontColor: string;\n\n  /**\n   * When set to `true`, the text will highlight while being spoken, typically used for accessibility.\n   */\n  @Prop() highlightWhileSpeaking: boolean;\n\n  /**\n   * Height of the text component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * Width of the text component (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the text component relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the component, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier for an audio file associated with the text component.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the text component is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the text component.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the text component is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-text` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It initializes custom events based on the `type` of the text component.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to customize the appearance and positioning of the text component\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      fontSize: this.fontSize,\n      fontFamily: this.font,\n      color: this.fontColor,\n      display: this.visible ? 'flex' : 'none', // Show or hide based on visibility prop\n    };\n\n    return (\n      <Host\n        class=\"text\"\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n        id={this.id}\n        style={style}\n      >\n        {this.string}\n      </Host>\n    );\n  }\n}\n",".wrap {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, auto));\n}\n\n.wrap > * {\n  padding: 10px;\n  background-color: var(--child-bg-color, #f0f0f0);\n  box-sizing: border-box;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initEventsForElement } from '../../utils/utils';\n\n/**\n * @component AppWrap\n *\n * The `AppWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.\n * The component can display its content as a grid and supports custom events like touch, match, and entry.\n * It allows for full customization via props like dimensions, background color, visibility, and z-index.\n */\n@Component({\n  tag: 'app-wrap',\n  styleUrl: 'app-wrap.css',\n  shadow: false,\n})\nexport class AppWrap {\n  /**\n   * Unique identifier for the wrap element.\n   */\n  @Prop() id: string;\n\n  /**\n   * Value associated with the wrap element, typically used for internal logic or tracking.\n   */\n  @Prop() value: string;\n\n  /**\n   * The height of the wrap container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() height: string;\n\n  /**\n   * The width of the wrap container (CSS value, e.g., '100px', '50%').\n   */\n  @Prop() width: string;\n\n  /**\n   * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').\n   */\n  @Prop() x: string;\n\n  /**\n   * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').\n   */\n  @Prop() y: string;\n\n  /**\n   * Z-index for stacking order of the wrap container relative to other elements.\n   */\n  @Prop() z: string;\n\n  /**\n   * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').\n   */\n  @Prop() bgColor: string;\n\n  /**\n   * Defines the type of the wrap container, which can be used for conditional logic or specific styling.\n   */\n  @Prop() type: string;\n\n  /**\n   * Tab index for keyboard navigation.\n   */\n  @Prop() tabIndex: number;\n\n  /**\n   * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.\n   */\n  @Prop() visible: boolean;\n\n  /**\n   * URL or identifier of an audio file associated with the wrap container.\n   */\n  @Prop() audio: string;\n\n  /**\n   * Event handler triggered when the wrap container is touched or clicked.\n   */\n  @Prop() onTouch: string;\n\n  /**\n   * Event handler triggered when a matching action occurs with the wrap container.\n   */\n  @Prop() onMatch: string;\n\n  /**\n   * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).\n   */\n  @Prop() onEntry: string;\n\n  /**\n   * Reference to the HTML element representing this `app-wrap` component.\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * Lifecycle hook that runs after the component is rendered in the DOM.\n   * It initializes custom events based on the `type` of the wrap container.\n   */\n  componentDidLoad() {\n    initEventsForElement(this.el, this.type);\n  }\n\n  render() {\n    // Inline styles to position and size the wrap container, with grid layout applied\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'grid' : 'none', // Use grid layout\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host\n        class=\"wrap\"\n        value={this.value}\n        type={this.type}\n        tabindex={this.tabIndex}\n        style={style}\n        audio={this.audio}\n        onTouch={this.onTouch}\n        onMatch={this.onMatch}\n        onEntry={this.onEntry}\n      >\n        {/* Slot for child elements */}\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}
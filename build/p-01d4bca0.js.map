{"version":3,"names":["DragSelectedMapKey","SelectedValuesKey","TraceMode","format","first","middle","last","getElementScale","el","transform","window","getComputedStyle","matrix","match","matrixValues","split","scaleX","parseFloat","enableDraggingWithScaling","element","isDragging","startX","startY","initialX","initialY","container","document","getElementById","console","error","onStart","event","removeHighlight","MouseEvent","clientX","clientY","touches","style","opacity","cursor","addEventListener","onMove","onEnd","rect1","getBoundingClientRect","rect2","verticalDistance","top","horizontalDistance","left","observer","MutationObserver","mutationsList","mutation","type","attributeName","observerConfig","attributes","attributeFilter","observe","containerScale","dx","dy","newLeft","newTop","containerRect","elementRect","numbers","result","map","Number","initialElementLeftPx","initialElementTopPx","maxRight","width","Math","abs","maxLeft","maxTop","maxBottom","height","newLeftClamp","min","newTopClamp","allElements","querySelectorAll","mostOverlappedElement","maxOverlapArea","forEach","otherElement","otherRect","overlapWidth","max","right","overlapHeight","bottom","overlapArea","border","backgroundColor","endEv","removeEventListener","onElementDropComplete","ev","onClickDropOrDragElement","async","dragElement","dropElement","dragScore","JSON","parse","_a","localStorage","getItem","getAttribute","setItem","stringify","sortedKeys","Object","keys","sort","a","b","parseInt","sortedValues","reduce","acc","key","concat","matchStringPattern","onMatch","executeActions","showWrongAnswerAnimation","onActivityComplete","actionsString","thisElement","actions","parseActions","i","length","action","targetElement","actor","currentTransform","value","audioUrl","audioElement","newAudio","createElement","id","body","appendChild","pause","currentTime","src","log","play","highlightSpeakingElement","ended","Promise","resolve","setTimeout","stopHighlightForSpeakingElement","isNumber","isNaN","input","actionStrings","trim","actionString","actorAction","part","lastDotIndex","lastIndexOf","substring","push","replace","pattern","arr","patternGroups","group","arrIndex","options","Set","startsWith","endsWith","choices","slice","option","includes","choice","add","has","delete","objectiveString","objectiveArray","res","removeItem","triggerNextContainer","CustomEvent","dispatchEvent","initEventsForElement","canplay","addClickListenerForClickType","handleDropElement","onEntry","onTouchListenerForOnTouch","onTouch","onclick","onClick","boxShadow","transition","objective","elements","styleId","innerHTML","head","classList","remove","once","highlightedElements","ariaPressed","selectedDropElement","querySelector","selectedDragElement","dropRect","dragRect","translateX","translateY"],"sources":["src/utils/constants.ts","src/utils/utils.ts"],"sourcesContent":["export const DragSelectedMapKey = 'dragSelectedMap';\nexport const SelectedValuesKey = 'selectedValues';\n\nexport enum TraceMode {\n  NoFlow = 'noFlow',\n  ShowFlow = 'showFlow',\n  FreeTrace = 'freeTrace',\n  BlindTracing = 'blindTracing',\n  BlindFreeTrace = 'blindFreeTrace',\n}\n","import { DragSelectedMapKey, SelectedValuesKey } from './constants';\n\nexport function format(first?: string, middle?: string, last?: string): string {\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\n// Function to get the scale of an element\nconst getElementScale = (el: HTMLElement): number => {\n  const transform = window.getComputedStyle(el).transform;\n  if (transform === 'none') {\n    return 1; // No scaling\n  } else {\n    const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n    if (matrix) {\n      const matrixValues = matrix[1].split(', ');\n      const scaleX = parseFloat(matrixValues[0]);\n      return scaleX; // Assuming uniform scaling (same scale in X and Y)\n    }\n  }\n  return 1; // Fallback to no scaling\n};\n\nfunction enableDraggingWithScaling(element: HTMLElement): void {\n  let isDragging = false;\n  let startX = 0;\n  let startY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  // Fetch the container element\n  const container = document.getElementById('container');\n  if (!container) {\n    console.error(`Container with ID \"container\" not found.`);\n    return;\n  }\n\n  const onStart = (event: MouseEvent | TouchEvent): void => {\n    removeHighlight(element);\n    isDragging = true;\n\n    if (event instanceof MouseEvent) {\n      startX = event.clientX;\n      startY = event.clientY;\n    } else {\n      startX = event.touches[0].clientX;\n      startY = event.touches[0].clientY;\n    }\n\n    // Apply dragging styles to the element\n    element.style.opacity = '0.8';\n    element.style.cursor = 'grabbing';\n\n    // Parse the current transform values at the start of each drag\n    const transform = window.getComputedStyle(element).transform;\n    if (transform !== 'none') {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        initialX = parseFloat(matrixValues[4]);\n        initialY = parseFloat(matrixValues[5]);\n      }\n    } else {\n      initialX = 0;\n      initialY = 0;\n    }\n\n    document.addEventListener('mousemove', onMove);\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchmove', onMove);\n    document.addEventListener('touchend', onEnd);\n  };\n\n  const rect1 = container.getBoundingClientRect();\n  const rect2 = element.getBoundingClientRect();\n\n  let verticalDistance = rect1.top - rect2.top;\n  let horizontalDistance = rect1.left - rect2.left;\n\n  const observer = new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n        const rect1 = container.getBoundingClientRect();\n        const rect2 = element.getBoundingClientRect();\n        verticalDistance = rect1.top - rect2.top;\n        horizontalDistance = rect1.left - rect2.left;\n      }\n    }\n  });\n\n  // Configure the observer to watch for attribute changes\n  const observerConfig = {\n    attributes: true, // Monitor attribute changes\n    attributeFilter: ['style'], // Only observe changes to the 'style' attribute\n  };\n\n  // Start observing the element\n  observer.observe(container, observerConfig);\n\n  const onMove = (event: MouseEvent | TouchEvent): void => {\n    if (!isDragging) return;\n\n    const containerScale = getElementScale(container);\n\n    let dx = 0;\n    let dy = 0;\n\n    if (event instanceof MouseEvent) {\n      dx = (event.clientX - startX) / containerScale;\n      dy = (event.clientY - startY) / containerScale;\n    } else {\n      dx = (event.touches[0].clientX - startX) / containerScale;\n      dy = (event.touches[0].clientY - startY) / containerScale;\n    }\n\n    // Calculate the new position considering scaling\n    const newLeft = initialX + dx;\n    const newTop = initialY + dy;\n\n    // Get the dimensions and scale-corrected position of the container and element\n    const containerRect = container.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n\n    const numbers = element.style.transform.match(/-?\\d+(\\.\\d+)?/g);\n    const result = numbers.map(Number);\n    const initialElementLeftPx = elementRect.left / containerScale - result[0];\n    const initialElementTopPx = elementRect.top - result[1];\n\n    const maxRight = containerRect.width / containerScale - Math.abs(horizontalDistance / containerScale) - elementRect.width / containerScale;\n    const maxLeft = containerRect.left - initialElementLeftPx;\n    const maxTop = containerRect.top - initialElementTopPx;\n    const maxBottom = containerRect.height / containerScale - Math.abs(verticalDistance / containerScale) - elementRect.height / containerScale;\n\n    const newLeftClamp = newLeft + initialElementLeftPx <= containerRect.left ? maxLeft : Math.min(newLeft, maxRight);\n    const newTopClamp = newTop + initialElementTopPx <= containerRect.top ? maxTop : Math.min(newTop, maxBottom);\n\n    // Apply transform with translation within boundaries\n    element.style.transform = `translate(${newLeftClamp}px, ${newTopClamp}px)`;\n\n    // Check for overlaps and highlight only the most overlapping element\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Check if there is overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    // Reset styles for all elements\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Apply styles only to the most overlapped element\n    if (mostOverlappedElement) {\n      mostOverlappedElement.style.border = '2px dashed #ff0000'; // Red dashed border\n      mostOverlappedElement.style.backgroundColor = 'rgba(255, 0, 0, 0.1)'; // Light red background\n    }\n  };\n\n  const onEnd = (endEv): void => {\n    isDragging = false;\n    document.removeEventListener('mousemove', onMove);\n    document.removeEventListener('mouseup', onEnd);\n    document.removeEventListener('touchmove', onMove);\n    document.removeEventListener('touchend', onEnd);\n\n    // Reset styles when dragging ends\n    element.style.opacity = '';\n    element.style.cursor = 'move';\n\n    // Reset overlapping styles from all elements\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Check for overlaps and log the most overlapping element\n    const elementRect = element.getBoundingClientRect();\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Calculate overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    onElementDropComplete(element, mostOverlappedElement);\n  };\n  // Initialize draggable element styles\n  element.style.cursor = 'move';\n  element.style.transform = 'translate(0, 0)'; // Initialize transform for consistent dragging\n\n  element.addEventListener('mousedown', onStart);\n  element.addEventListener('touchstart', onStart);\n  element.addEventListener('click', ev => {\n    onClickDropOrDragElement(element, 'drag');\n  });\n}\n\nasync function onElementDropComplete(dragElement: HTMLElement, dropElement: HTMLElement): Promise<void> {\n  if (!dropElement) return;\n\n  let dragScore = JSON.parse(localStorage.getItem(DragSelectedMapKey) ?? '{}');\n  if (!dragScore[dropElement.getAttribute('tabindex')]) {\n    dragScore[dropElement.getAttribute('tabindex')] = [];\n  }\n  // dragScore[mostOverlappedElement.getAttribute('tabindex')].push(element['value']);\n  dragScore[dropElement.getAttribute('tabindex')] = [dragElement['value']];\n\n  localStorage.setItem(DragSelectedMapKey, JSON.stringify(dragScore));\n  const sortedKeys = Object.keys(dragScore).sort((a, b) => parseInt(a) - parseInt(b));\n  const sortedValues = sortedKeys.reduce((acc, key) => acc.concat(dragScore[key]), []);\n  localStorage.setItem(SelectedValuesKey, JSON.stringify(sortedValues));\n\n  // Add pulse and highlight effect for a successful match\n  if (matchStringPattern(dropElement['value'], [dragElement['value']])) {\n    // Perform actions if onMatch is defined\n    const onMatch = dropElement.getAttribute('onCorrectMatch');\n    if (onMatch) {\n      await executeActions(onMatch, dropElement, dragElement);\n    }\n  } else {\n    showWrongAnswerAnimation([dropElement, dragElement]);\n  }\n\n  await onActivityComplete();\n}\n\n// Function to execute actions parsed from the onMatch string\nconst executeActions = async (actionsString: string, thisElement: HTMLElement, element?: HTMLElement): Promise<void> => {\n  const actions = parseActions(actionsString);\n\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i];\n    const targetElement = action.actor === 'this' ? thisElement : action.actor === 'element' ? element : document.getElementById(action.actor);\n\n    if (targetElement) {\n      // Handle the 'transform' property separately\n      switch (action.action) {\n        case 'transform': {\n          const currentTransform = window.getComputedStyle(targetElement).transform;\n          targetElement.style.transform = currentTransform !== 'none' ? `${currentTransform} ${action.value}` : action.value;\n          break;\n        }\n        case 'speak': {\n          {\n            const audioUrl = targetElement.getAttribute('audio');\n            if (audioUrl) {\n              let audioElement = document.getElementById('audio') as HTMLAudioElement;\n              if (!audioElement) {\n                const newAudio = document.createElement('audio');\n                newAudio.id = 'audio';\n                document.body.appendChild(newAudio);\n                audioElement = newAudio;\n              }\n\n              audioElement.pause();\n              audioElement.currentTime = 0;\n              audioElement.src = audioUrl;\n              console.log('🚀 ~ executeActions ~ audioElement.src:', audioElement.src);\n\n              try {\n                await audioElement.play();\n                highlightSpeakingElement(targetElement);\n                while (!audioElement.ended || audioElement.error) {\n                  await new Promise(resolve => setTimeout(resolve, 100));\n                }\n                stopHighlightForSpeakingElement(targetElement);\n              } catch (error) {\n                console.log('🚀 ~ executeActions ~ audioElement.src: error', error);\n              }\n            }\n            break;\n          }\n        }\n\n        case 'sleep': {\n          const isNumber = !isNaN(Number(action.value));\n          if (isNumber) {\n            await new Promise(resolve => setTimeout(resolve, Number(action.value)));\n          }\n          break;\n        }\n\n        default: {\n          targetElement.style[action.action] = action.value;\n          break;\n        }\n      }\n    }\n  }\n};\n\n// Function to parse actions string\nconst parseActions = (input: string): Array<{ actor: string; action: string; value: string }> => {\n  const actions = [];\n  if (!input) return actions;\n  const actionStrings = input.split(';')?.map(action => action.trim());\n\n  actionStrings.forEach(actionString => {\n    if (actionString) {\n      const [actorAction, value] = actionString.split('=').map(part => part.trim());\n      const lastDotIndex = actorAction.lastIndexOf('.');\n      if (lastDotIndex !== -1) {\n        const actor = actorAction.substring(0, lastDotIndex).trim();\n        const action = actorAction.substring(lastDotIndex + 1).trim();\n        actions.push({ actor, action, value: value.replace(/['\"]/g, '') });\n      }\n    }\n  });\n\n  return actions;\n};\n\nconst matchStringPattern = (pattern: string, arr: string[]): boolean => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let arrIndex = 0;\n  let options = new Set<string>();\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      // Inside parentheses: '|' acts like \"OR\" condition\n      const choices = group\n        .slice(1, -1)\n        .split('|')\n        .map(option => option.trim());\n\n      if (arrIndex >= arr.length) return false;\n\n      if (!choices.includes(arr[arrIndex])) return false;\n\n      arrIndex++;\n    } else if (group.includes('|')) {\n      // Outside parentheses: '|' acts as optional order\n      const choices = group.split('|').map(option => option.trim());\n\n      for (const choice of choices) {\n        options.add(choice);\n      }\n    } else {\n      // Exact match required\n      if (arrIndex >= arr.length || arr[arrIndex] !== group) return false;\n\n      arrIndex++;\n    }\n  }\n\n  // Validate the optional ordered items against the remaining array elements\n  while (arrIndex < arr.length) {\n    if (!options.has(arr[arrIndex])) {\n      return false;\n    }\n    options.delete(arr[arrIndex]);\n    arrIndex++;\n  }\n\n  return arrIndex === arr.length;\n};\n\nconst countPatternWords = (pattern: string): number => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let wordCount = 0;\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      wordCount += 1;\n    } else {\n      wordCount += group.split('|').length;\n    }\n  }\n\n  return wordCount;\n};\n\nasync function onActivityComplete() {\n  const container = document.getElementById('container');\n  if (!container) return;\n  const objectiveString = container['objective'];\n  const objectiveArray = JSON.parse(localStorage.getItem(SelectedValuesKey) ?? '[]');\n  const res = matchStringPattern(objectiveString, objectiveArray);\n  if (res) {\n    localStorage.removeItem(SelectedValuesKey);\n    localStorage.removeItem(DragSelectedMapKey);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    triggerNextContainer();\n  }\n}\n\nexport const triggerNextContainer = () => {\n  const event = new CustomEvent('nextContainer');\n  console.log('🚀 ~ triggerNextContainer ~ event:', event);\n  window.dispatchEvent(event);\n};\n\nexport const initEventsForElement = async (element: HTMLElement, type: string) => {\n  const container = document.getElementById('container');\n  if (!container) return;\n  const canplay = container.getAttribute('canplay');\n  if (canplay != null && canplay === 'false') return;\n  switch (type) {\n    case 'drag': {\n      enableDraggingWithScaling(element);\n      break;\n    }\n    case 'click': {\n      addClickListenerForClickType(element);\n      break;\n    }\n    case 'drop': {\n      handleDropElement(element);\n      break;\n    }\n    default:\n      break;\n  }\n  const onEntry = element.getAttribute('onEntry');\n  await executeActions(onEntry, element);\n  onTouchListenerForOnTouch(element);\n};\n\nfunction onTouchListenerForOnTouch(element: HTMLElement) {\n  if (!element) return;\n  const onTouch = element.getAttribute('onTouch');\n  if (!onTouch) return;\n  element.onclick = async () => {\n    console.log('🚀 ~ element.onclick= ~ onTouch:', onTouch);\n    if (!onTouch) return;\n    await executeActions(onTouch, element);\n  };\n}\n\nfunction addClickListenerForClickType(element: HTMLElement): void {\n  element.style.cursor = 'pointer';\n  if (!element) {\n    console.error('No element provided.');\n    return;\n  }\n\n  const onClick = async () => {\n    console.log('Element clicked:', element);\n    localStorage.setItem(SelectedValuesKey, JSON.stringify([element['value']]));\n    element.style.border = '2px solid yellow';\n    element.style.boxShadow = '0px 0px 10px rgba(255, 255, 0, 0.7)';\n\n    element.style.transition = 'transform 0.2s ease, border 0.5s ease';\n    element.style.transform = 'scale(1.1)';\n\n    element.style.transform = 'scale(1)';\n    element.style.border = '';\n    element.style.boxShadow = '';\n    const container = document.getElementById('container');\n    const objective = container['objective'];\n    if (matchStringPattern(objective, [element['value']])) {\n      const onTouch = element.getAttribute('onCorrectTouch');\n      await executeActions(onTouch, element);\n    } else {\n      showWrongAnswerAnimation([element]);\n    }\n\n    await onActivityComplete();\n  };\n  element.addEventListener('click', onClick);\n}\n\nexport function showWrongAnswerAnimation(elements: HTMLElement[]): void {\n  const styleId = 'wrong-answer-animation-style';\n\n  // Check if the style is already added, if not, add it\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n          @keyframes enhanced-shake {\n              0% { left: 0; }\n              10% { left: -8px; }\n              20% { left: 8px; }\n              30% { left: -8px; }\n              40% { left: 8px; }\n              50% { left: -6px; }\n              60% { left: 6px; }\n              70% { left: -4px; }\n              80% { left: 4px; }\n              90% { left: -2px; }\n              100% { left: 0; }\n          }\n          \n          .wrong-answer {\n              position: relative; /* Enable relative positioning to move the element */\n              animation: enhanced-shake 0.6s cubic-bezier(0.36, 0.07, 0.19, 0.97);\n              background-color: #ffdddd; /* Flash red background to indicate wrong answer */\n              box-shadow: 0 0 10px rgba(255, 0, 0, 0.5); /* Subtle red shadow */\n          }\n      `;\n    document.head.appendChild(style);\n  }\n\n  elements.forEach(element => {\n    // Add the class to trigger the animation\n    element.classList.add('wrong-answer');\n\n    // Remove the class after the animation ends to reset the element\n    element.addEventListener(\n      'animationend',\n      () => {\n        element.classList.remove('wrong-answer');\n      },\n      { once: true },\n    );\n  });\n}\n\nfunction handleDropElement(element: HTMLElement): void {\n  element.onclick = () => {\n    onClickDropOrDragElement(element, 'drop');\n  };\n}\n\nasync function onClickDropOrDragElement(element: HTMLElement, type: 'drop' | 'drag'): Promise<void> {\n  // Remove the highlight class from elements matching the selector\n  const highlightedElements = document.querySelectorAll(`[type='${type}']`);\n  highlightedElements.forEach(el => {\n    removeHighlight(el as HTMLElement);\n  });\n\n  // Dynamically create the highlight class if it doesn't exist\n  if (!document.getElementById('dynamic-highlight-style')) {\n    const style = document.createElement('style');\n    style.id = 'dynamic-highlight-style';\n    style.innerHTML = `\n      .highlight {\n        border: 4px solid #e74c3c; /* Thicker red border for more visibility */\n        border-radius: 12px; /* Larger rounded corners */\n        background-color: rgba(231, 76, 60, 0.3); /* Stronger, more noticeable background */\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2), 0 12px 40px rgba(0, 0, 0, 0.2); /* Stronger shadow */\n        outline: 4px solid rgba(231, 76, 60, 0.6); /* Glow effect */\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  element?.classList.add('highlight');\n  element.ariaPressed = 'true';\n\n  const selectedDropElement: HTMLElement = type === 'drop' ? element : document.querySelector(\"[type='drop'].highlight\");\n  const selectedDragElement: HTMLElement = type === 'drag' ? element : document.querySelector(\"[type='drag'].highlight\");\n\n  if (selectedDropElement && selectedDragElement) {\n    // Add a transition for a smooth, slower movement\n    (selectedDragElement as HTMLElement).style.transition = 'transform 0.5s ease'; // 0.5s for a slower move\n\n    // Reset the transform of the drag element before calculating the new position\n    (selectedDragElement as HTMLElement).style.transform = '';\n    const container = document.getElementById('container');\n\n    const containerScale = getElementScale(container);\n    console.log('🚀 ~ onClickDropOrDragElement ~ containerScale:', containerScale);\n\n    // Get the positions of the drop and drag elements\n    const dropRect = selectedDropElement.getBoundingClientRect();\n    const dragRect = selectedDragElement.getBoundingClientRect();\n\n    // Calculate the difference in positions\n    const translateX = (dropRect.left - dragRect.left) / containerScale;\n    const translateY = (dropRect.top - dragRect.top) / containerScale;\n\n    // Move the drag element to the drop position\n    selectedDragElement.style.transform = `translate(${translateX}px, ${translateY}px)`;\n\n    // Remove highlights after moving the element\n    const allElements = document.querySelectorAll(`*`);\n    allElements.forEach(el => {\n      removeHighlight(el as HTMLElement);\n    });\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await onElementDropComplete(selectedDragElement, selectedDropElement);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    selectedDragElement.style.transform = 'translate(0px, 0px)';\n  }\n}\n\nfunction removeHighlight(element: HTMLElement): void {\n  element.classList.remove('highlight');\n  element.ariaPressed = 'false';\n}\n\n// Function to highlight the speaking element\nfunction highlightSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Add a custom class for highlighting\n  element.classList.add('speaking-highlight');\n\n  // Inject keyframe animation and class styles into the document's head if it doesn't already exist\n  const styleId = 'speaking-highlight-style';\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n      .speaking-highlight {\n        box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9); /* Stronger orange glow effect */\n        border: 3px solid orange;\n        transition: box-shadow 0.5s ease-in-out, transform 0.5s ease-in-out;\n        transform: scale(1.05); /* Subtle scale effect to pop the element */\n        animation: pulseEffect 1.5s infinite; /* Pulsing animation */\n      }\n\n      @keyframes pulseEffect {\n        0% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n        50% {\n          box-shadow: 0 0 30px 15px rgba(255, 165, 0, 1);\n          transform: scale(1.1);\n        }\n        100% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n}\n\n// Function to stop highlighting\nfunction stopHighlightForSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Remove the custom class for highlighting\n  element.classList.remove('speaking-highlight');\n\n  // Remove inline styles\n  element.style.boxShadow = '';\n  element.style.border = '';\n}\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["appColCss","AppColStyle0","AppCol","render","style","height","this","width","backgroundColor","bgColor","top","y","left","x","display","visible","zIndex","z","h","Host","key","class","type","appContainerCss","AppContainerStyle0","AppContainer","scaleContainer","container","widths","window","innerWidth","_a","screen","push","_b","Math","min","document","documentElement","clientHeight","scaleX","scaleY","scale","transform","componentDidLoad","el","addEventListener","position","border","boxShadow","id","AppHome","parseElement","element","tagName","nodeName","toLowerCase","props","Array","from","attributes","forEach","attr","name","value","children","childNodes","map","child","nodeType","textContent","trim","filter","Boolean","componentMapping","Object","assign","console","warn","xmlData","parser","DOMParser","xmlDoc","parseFromString","rootElement","appImageCss","AppImageStyle0","AppImage","initializeDraggable","alignItems","justifyContent","src","objectiveCss","AppObjectiveStyle0","AppObjective","string","split","join","appPosCss","AppPosStyle0","AppPos","appRandomCss","AppRandomStyle0","AppRandom","slotElements","querySelectorAll","randomTop","random","randomLeft","AppRoot","componentWillLoad","res","getAssetPath","log","response","fetch","data","text","appRowCss","AppRowStyle0","AppRow","appShapeCss","AppShapeStyle0","AppShape","shapeType","undefined","appTextCss","AppTextStyle0","AppText","fontSize","fontFamily","font","appWrapCss","AppWrapStyle0","AppWrap"],"sources":["src/components/common/app-col.css?tag=app-col","src/components/common/AppCol.tsx","src/components/common/app-container.css?tag=app-container","src/components/common/AppContainer.tsx","src/components/common/AppHome.tsx","src/components/common/app-image.css?tag=app-image","src/components/common/AppImage.tsx","src/components/common/objective.css?tag=app-objective","src/components/common/Objective.tsx","src/components/common/app-pos.css?tag=app-pos","src/components/common/AppPos.tsx","src/components/common/app-random.css?tag=app-random","src/components/common/AppRandom.tsx","src/components/common/AppRoot.tsx","src/components/common/app-row.css?tag=app-row","src/components/common/AppRow.tsx","src/components/common/app-shape.css?tag=app-shape","src/components/common/AppShape.tsx","src/components/common/app-text.css?tag=app-text","src/components/common/AppText.tsx","src/components/common/app-wrap.css?tag=app-wrap","src/components/common/AppWrap.tsx"],"sourcesContent":[".col {\n  /* position: absolute; */\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  /* position: relative; */\n  padding: 15px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n}\n\n.col > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-col',\n  styleUrl: 'app-col.css',\n  shadow: false,\n})\nexport class AppCol {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host class=\"col\" type={this.type} style={style}>\n        <slot />\n      </Host>\n    );\n  }\n}\n",".container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: var(--bgColor, #ffffff);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'app-container',\n  styleUrl: 'app-container.css',\n  shadow: false,\n})\nexport class AppContainer {\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  scaleContainer(container: HTMLElement) {\n    const widths = [window.innerWidth];\n    const heights = [window.innerHeight];\n\n    if (window.screen?.width) {\n      widths.push(window.screen?.width);\n      heights.push(window.screen?.height);\n    }\n\n    const width = Math.min(...widths);\n    const height = document.documentElement.clientHeight;\n\n    const scaleX = width / 1600;\n    const scaleY = height / 900;\n    const scale = Math.min(scaleX, scaleY);\n\n    container.style.transform = `translate(-50%, -50%) scale(${scale})`; // Combine centering and scaling\n  }\n\n  componentDidLoad() {\n    this.scaleContainer(this.el);\n    window.addEventListener('resize', () => this.scaleContainer(this.el));\n    window.addEventListener('load', () => this.scaleContainer(this.el));\n  }\n\n  render() {\n    const style = {\n      // height: this.height,\n      // width: '100%',\n      // backgroundColor: this.bgColor,\n      // top: this.y,\n      // left: this.x,\n      width: '1600px',\n      height: '900px',\n      position: 'absolute',\n      backgroundColor: '#ffffff',\n      border: '1px solid #ddd',\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%,-50%)',\n    };\n\n    return <Host id=\"container\" class=\"container\" style={style}></Host>;\n  }\n}\n","import { Component, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-home',\n  shadow: false,\n})\nexport class AppHome {\n  @Prop() xmlData: string;\n  private parseElement(element: Element): any {\n    const tagName = element.nodeName.toLowerCase();\n    const props: { [key: string]: any } = {};\n\n    // Convert attributes to props using reduce for cleaner code\n    Array.from(element.attributes).forEach(attr => {\n      props[attr.name] = attr.value;\n    });\n\n    // Recursively parse child elements\n    const children = Array.from(element.childNodes)\n      .map(child => {\n        if (child.nodeType === 1) {\n          // ELEMENT_NODE\n          return this.parseElement(child as Element);\n        } else if (child.nodeType === 3 && child.textContent.trim() !== '') {\n          // TEXT_NODE\n          return child.textContent;\n        }\n        return null;\n      })\n      .filter(Boolean); // Remove null/undefined values\n\n    // Dynamically map tag names to Stencil components\n    const componentMapping = {\n      'app-container': <app-container {...props}>{children}</app-container>,\n      'app-objective': <app-objective {...props}>{children}</app-objective>,\n      'app-col': <app-col {...props}>{children}</app-col>,\n      'app-image': <app-image {...props}>{children}</app-image>,\n      'app-row': <app-row {...props}>{children}</app-row>,\n      'app-text': <app-text {...props}>{children}</app-text>,\n      'app-pos': <app-pos {...props}>{children}</app-pos>,\n      'app-shape': <app-shape {...props}>{children}</app-shape>,\n      'app-wrap': <app-wrap {...props}>{children}</app-wrap>,\n      'app-random': <app-random {...props}>{children}</app-random>,\n    };\n\n    if (componentMapping[tagName]) {\n      return componentMapping[tagName];\n    } else {\n      console.warn(`Unknown tag: ${tagName}`);\n      return null;\n    }\n  }\n\n  render() {\n    if (!this.xmlData) {\n      return <div>Please provide XML data.</div>;\n    }\n\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(this.xmlData, 'text/xml');\n\n    const rootElement = xmlDoc.documentElement;\n\n    return this.parseElement(rootElement);\n  }\n}\n",".image {\n  user-select: none;\n  -webkit-user-drag: none;\n  object-fit: cover;\n  max-width: 100%;\n  max-height: 100%;\n  aspect-ratio: 1 / 1; /* Ensures the image retains a 1:1 aspect ratio */\n  /* The image will scale to fit within its container, keeping the aspect ratio */\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { initializeDraggable } from '../../utils/utils';\n\n@Component({\n  tag: 'app-image',\n  styleUrl: 'app-image.css',\n  shadow: false,\n})\nexport class AppImage {\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n  @Prop() src: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') initializeDraggable(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'flex' : 'none',\n      alignItems: 'center', // Vertically center\n      justifyContent: 'center', // Horizontally center\n    };\n\n    return (\n      <Host type={this.type} style={style}>\n        <img class=\"image\" src={this.src} />\n      </Host>\n    );\n  }\n}\n",".objective {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #555;\n  margin-bottom: 10px;\n}\n","import { Component, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-objective',\n  styleUrl: 'objective.css',\n  shadow: false,\n})\nexport class AppObjective {\n  @Prop() value: string;\n  @Prop() string: string;\n\n  render() {\n    return <div class=\"objective\">{this.string.split(',').join(' ')}</div>;\n  }\n}\n",".pos {\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  position: fixed;\n}\n\n.pos > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-pos',\n  styleUrl: 'app-pos.css',\n  shadow: false,\n})\nexport class AppPos {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'block' : 'none',\n    };\n\n    return (\n      <Host class=\"pos\" type={this.type} style={style}>\n        <slot />\n      </Host>\n    );\n  }\n}\n",".random {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute; /* Container is now relative */\n}\n\n.random > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'app-random',\n  styleUrl: 'app-random.css',\n  shadow: false,\n})\nexport class AppRandom {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    const slotElements = this.el.querySelectorAll('.random > *');\n    slotElements.forEach((child: HTMLElement) => {\n      const randomTop = Math.random() * 100;\n      const randomLeft = Math.random() * 100;\n\n      child.style.top = `${randomTop}%`;\n      child.style.left = `${randomLeft}%`;\n    });\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none',\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host class=\"random\" type={this.type} style={style}>\n        <slot />\n      </Host>\n    );\n  }\n}\n","import { Component, getAssetPath, h, State } from '@stencil/core';\n\n@Component({\n  tag: 'app-root',\n  shadow: false,\n  assetsDirs: ['assets'],\n})\nexport class AppRoot {\n  @State() xmlData: string;\n\n  async componentWillLoad() {\n    const res = getAssetPath('./assets/xmlData.xml');\n    console.log('🚀 ~ AppRoot ~ componentWillLoad ~ res:', res);\n    const response = await fetch(res);\n    const data = await response.text();\n    this.xmlData = data;\n  }\n\n  render() {\n    if (!this.xmlData) {\n      return <div>Loading...</div>;\n    }\n\n    return <app-home xmlData={this.xmlData}></app-home>;\n  }\n}\n",".row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* position: absolute; */\n}\n\n.row > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-row',\n  styleUrl: 'app-row.css',\n  shadow: false,\n})\nexport class AppRow {\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host class=\"row\" type={this.type} style={style}>\n        {/* <slot /> */}\n      </Host>\n    );\n  }\n}\n",".shape {\n  position: absolute;\n  top: var(--y);\n  left: var(--x);\n  display: var(--display);\n  z-index: var(--z);\n}\n\n.rectangle {\n  border-radius: 0;\n}\n\n.circle {\n  width: var(--width); /* Ensures width is always used for both dimensions */\n  height: var(--width); /* Make height equal to width for a perfect circle */\n  border-radius: 50%; /* 50% border-radius for a perfect circle */\n  background-color: var(--bgColor);\n}\n\n.ellipse {\n  width: var(--width);\n  height: var(--height);\n  border-radius: 50%; /* Create an ellipse shape */\n  background-color: var(--bgColor);\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { initializeDraggable } from '../../utils/utils';\n\n@Component({\n  tag: 'app-shape',\n  styleUrl: 'app-shape.css',\n  shadow: false,\n})\nexport class AppShape {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() shapeType: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') initializeDraggable(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.shapeType !== 'polygon' ? this.height : undefined,\n      width: this.shapeType !== 'polygon' ? this.width : undefined,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none',\n      zIndex: this.z,\n      backgroundColor: this.shapeType !== 'polygon' ? this.bgColor : 'transparent',\n    };\n\n    return <Host class={`shape ${this.shapeType}`} type={this.type} style={style}></Host>;\n  }\n}\n",".text {\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.3s ease;\n  user-select: none;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-radius: 8px;\n  color: #333;\n  cursor: pointer;\n}\n\n.text:hover {\n  background-color: #f0f0f0;\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { initializeDraggable } from '../../utils/utils';\n\n@Component({\n  tag: 'app-text',\n  styleUrl: 'app-text.css',\n  shadow: false,\n})\nexport class AppText {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() string: string;\n  @Prop() font: string;\n  @Prop() fontSize: string;\n  @Prop() highlightWhileSpeaking: boolean;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') initializeDraggable(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      fontSize: this.fontSize,\n      fontFamily: this.font,\n      display: this.visible ? 'flex' : 'none',\n    };\n\n    return (\n      <Host class=\"text\" type={this.type} id={this.id} style={style}>\n        {this.string}\n      </Host>\n    );\n  }\n}\n",".wrap {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, auto));\n}\n\n.wrap > * {\n  padding: 10px;\n  background-color: var(--child-bg-color, #f0f0f0);\n  box-sizing: border-box;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-wrap',\n  styleUrl: 'app-wrap.css',\n  shadow: false,\n})\nexport class AppWrap {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'grid' : 'none', // Changed to 'grid'\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host class=\"wrap\" type={this.type} style={style}>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}
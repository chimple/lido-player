{"version":3,"names":["appColCss","AppColStyle0","AppCol","componentDidLoad","this","type","enableDraggingWithScaling","el","render","style","height","width","backgroundColor","bgColor","top","y","left","x","display","visible","zIndex","z","h","Host","key","class","tabindex","tabIndex","value","audio","onTouch","onMatch","onEntry","appContainerCss","AppContainerStyle0","AppContainer","scaleContainer","container","widths","window","innerWidth","_a","screen","push","_b","Math","min","document","documentElement","clientHeight","scaleX","scaleY","scale","transform","addEventListener","position","border","boxShadow","id","objective","AppHome","nextContainer","currentContainerIndex","containers","length","showCompletionMessage","setTimeout","componentWillLoad","parseXMLData","xmlData","disconnectedCallback","removeEventListener","parser","DOMParser","xmlDoc","parseFromString","rootElement","parseContainers","parseElement","element","tagName","nodeName","toLowerCase","props","Array","from","attributes","forEach","attr","name","children","childNodes","map","child","nodeType","textContent","trim","filter","Boolean","componentMapping","Object","assign","console","warn","containerElements","querySelectorAll","parsedElement","appImageCss","AppImageStyle0","AppImage","alignItems","justifyContent","src","objectiveCss","AppObjectiveStyle0","AppObjective","string","split","join","appPosCss","AppPosStyle0","AppPos","appRandomCss","AppRandomStyle0","AppRandom","slotElements","randomTop","random","randomLeft","AppRoot","res","getAssetPath","log","response","fetch","data","text","appRowCss","AppRowStyle0","AppRow","appShapeCss","AppShapeStyle0","AppShape","shapeType","undefined","appTextCss","AppTextStyle0","AppText","fontSize","fontFamily","font","appWrapCss","AppWrapStyle0","AppWrap"],"sources":["src/components/common/app-col.css?tag=app-col","src/components/common/AppCol.tsx","src/components/common/app-container.css?tag=app-container","src/components/common/AppContainer.tsx","src/components/common/AppHome.tsx","src/components/common/app-image.css?tag=app-image","src/components/common/AppImage.tsx","src/components/common/objective.css?tag=app-objective","src/components/common/Objective.tsx","src/components/common/app-pos.css?tag=app-pos","src/components/common/AppPos.tsx","src/components/common/app-random.css?tag=app-random","src/components/common/AppRandom.tsx","src/components/common/AppRoot.tsx","src/components/common/app-row.css?tag=app-row","src/components/common/AppRow.tsx","src/components/common/app-shape.css?tag=app-shape","src/components/common/AppShape.tsx","src/components/common/app-text.css?tag=app-text","src/components/common/AppText.tsx","src/components/common/app-wrap.css?tag=app-wrap","src/components/common/AppWrap.tsx"],"sourcesContent":[".col {\n  /* position: absolute; */\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  /* position: relative; */\n  padding: 15px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n}\n\n.col > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h,Element } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-col',\n  styleUrl: 'app-col.css',\n  shadow: false,\n})\nexport class AppCol {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host class=\"col\" type={this.type} tabindex={this.tabIndex} value={this.value} style={style} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        <slot />\n      </Host>\n    );\n  }\n}\n",".container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: var(--bgColor, #ffffff);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'app-container',\n  styleUrl: 'app-container.css',\n  shadow: false,\n})\nexport class AppContainer {\n  @Prop() id: string;\n  @Prop() objective: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex: number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  scaleContainer(container: HTMLElement) {\n    const widths = [window.innerWidth];\n    const heights = [window.innerHeight];\n\n    if (window.screen?.width) {\n      widths.push(window.screen?.width);\n      heights.push(window.screen?.height);\n    }\n\n    const width = Math.min(...widths);\n    const height = document.documentElement.clientHeight;\n\n    const scaleX = width / 1600;\n    const scaleY = height / 900;\n    const scale = Math.min(scaleX, scaleY);\n\n    container.style.transform = `translate(-50%, -50%) scale(${scale})`; // Combine centering and scaling\n  }\n\n  componentDidLoad() {\n    this.scaleContainer(this.el);\n    window.addEventListener('resize', () => this.scaleContainer(this.el));\n    window.addEventListener('load', () => this.scaleContainer(this.el));\n  }\n\n  render() {\n    const style = {\n      // height: this.height,\n      // width: '100%',\n      // backgroundColor: this.bgColor,\n      // top: this.y,\n      // left: this.x,\n      width: '1600px',\n      height: '900px',\n      position: 'absolute',\n      backgroundColor: '#ffffff',\n      border: '1px solid #ddd',\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%,-50%)',\n    };\n\n    return <Host id=\"container\" class=\"container\" objective={this.objective} style={style}></Host>;\n  }\n}\n","import { Component, Prop, h, State } from '@stencil/core';\n\n@Component({\n  tag: 'app-home',\n  shadow: false,\n})\nexport class AppHome {\n  @Prop() xmlData: string;\n  @State() currentContainerIndex: number = 0;\n  @State() showCompletionMessage: boolean = false;\n  @State() containers: any[] = [];\n\n  componentWillLoad() {\n    window.addEventListener('nextContainer', this.nextContainer);\n    this.parseXMLData(this.xmlData);\n  }\n\n  disconnectedCallback() {\n    window.removeEventListener('nextContainer', this.nextContainer);\n  }\n\n  private parseXMLData(xmlData: string) {\n    if (xmlData) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n      const rootElement = xmlDoc.documentElement;\n      this.parseContainers(rootElement);\n    }\n  }\n\n  private parseElement(element: Element): any {\n    const tagName = element.nodeName.toLowerCase();\n    const props: { [key: string]: any } = {};\n\n    Array.from(element.attributes).forEach(attr => {\n      props[attr.name] = attr.value;\n    });\n\n    const children = Array.from(element.childNodes)\n      .map(child => {\n        if (child.nodeType === 1) {\n          return this.parseElement(child as Element);\n        } else if (child.nodeType === 3 && child.textContent.trim() !== '') {\n          return child.textContent;\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    const componentMapping = {\n      'app-container': <app-container {...props}>{children}</app-container>,\n      'app-objective': <app-objective {...props}>{children}</app-objective>,\n      'app-col': <app-col {...props}>{children}</app-col>,\n      'app-image': <app-image {...props}>{children}</app-image>,\n      'app-row': <app-row {...props}>{children}</app-row>,\n      'app-text': <app-text {...props}>{children}</app-text>,\n      'app-pos': <app-pos {...props}>{children}</app-pos>,\n      'app-shape': <app-shape {...props}>{children}</app-shape>,\n      'app-wrap': <app-wrap {...props}>{children}</app-wrap>,\n      'app-random': <app-random {...props}>{children}</app-random>,\n    };\n\n    if (componentMapping[tagName]) {\n      return componentMapping[tagName];\n    } else {\n      console.warn(`Unknown tag: ${tagName}`);\n      return null;\n    }\n  }\n\n  private parseContainers(rootElement: Element) {\n    const containers = [];\n    const containerElements = rootElement.querySelectorAll('app-container');\n    containerElements.forEach(container => {\n      const parsedElement = this.parseElement(container);\n      if (parsedElement) {\n        containers.push(parsedElement);\n      }\n    });\n    this.containers = containers;\n  }\n\n  private nextContainer = () => {\n    if (this.currentContainerIndex < this.containers.length - 1) {\n      this.currentContainerIndex++;\n    } else {\n      this.showCompletionMessage = true;\n      setTimeout(() => {\n        this.showCompletionMessage = false;\n      }, 3000);\n    }\n\n    // Reset the containers to force a full re-render\n    this.containers = [...this.containers];\n  };\n\n  render() {\n    if (!this.xmlData) {\n      return <div>Please provide XML data.</div>;\n    }\n\n    return (\n      <div>\n        <div key={this.currentContainerIndex}>\n          {this.containers[this.currentContainerIndex]}\n          {/* <button onClick={this.nextContainer}>Next Container</button> */}\n        </div>\n        {this.showCompletionMessage && <div class=\"snackbar\">All containers have been displayed!</div>}\n        <style>\n          {`\n            .snackbar {\n              visibility: visible;\n              min-width: 250px;\n              background-color: #333;\n              color: #fff;\n              text-align: center;\n              border-radius: 2px;\n              padding: 16px;\n              position: fixed;\n              z-index: 1;\n              bottom: 30px;\n              left: 50%;\n              transform: translateX(-50%);\n              font-size: 17px;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n",".image {\n  user-select: none;\n  -webkit-user-drag: none;\n  object-fit: cover;\n  max-width: 100%;\n  max-height: 100%;\n  aspect-ratio: 1 / 1; /* Ensures the image retains a 1:1 aspect ratio */\n  /* The image will scale to fit within its container, keeping the aspect ratio */\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-image',\n  styleUrl: 'app-image.css',\n  shadow: false,\n})\nexport class AppImage {\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n  @Prop() src: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'flex' : 'none',\n      alignItems: 'center', // Vertically center\n      justifyContent: 'center', // Horizontally center\n    };\n\n    return (\n      <Host type={this.type} tabindex={this.tabIndex} style={style} value={this.value} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        <img class=\"image\" src={this.src} />\n      </Host>\n    );\n  }\n}\n",".objective {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #555;\n  margin-bottom: 10px;\n}\n","import { Component, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'app-objective',\n  styleUrl: 'objective.css',\n  shadow: false,\n})\nexport class AppObjective {\n  @Prop() value: string;\n  @Prop() string: string;\n\n  render() {\n    return <div class=\"objective\">{this.string.split(',').join(' ')}</div>;\n  }\n}\n",".pos {\n  top: var(--y, 0);\n  left: var(--x, 0);\n  height: var(--height, 100%);\n  width: var(--width, 100%);\n  background-color: var(--bgColor, #eeeeee);\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  position: fixed;\n}\n\n.pos > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h,Element } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-pos',\n  styleUrl: 'app-pos.css',\n  shadow: false,\n})\nexport class AppPos {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      display: this.visible ? 'block' : 'none',\n    };\n\n    return (\n      <Host class=\"pos\" type={this.type} tabindex={this.tabIndex} style={style} value={this.value} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        <slot />\n      </Host>\n    );\n  }\n}\n",".random {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute; /* Container is now relative */\n}\n\n.random > * {\n  position: absolute;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'app-random',\n  styleUrl: 'app-random.css',\n  shadow: false,\n})\nexport class AppRandom {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    const slotElements = this.el.querySelectorAll('.random > *');\n    slotElements.forEach((child: HTMLElement) => {\n      const randomTop = Math.random() * 100;\n      const randomLeft = Math.random() * 100;\n\n      child.style.top = `${randomTop}%`;\n      child.style.left = `${randomLeft}%`;\n    });\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none',\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host class=\"random\" type={this.type} tabindex={this.tabIndex} value={this.value} style={style} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        <slot />\n      </Host>\n    );\n  }\n}\n","import { Component, getAssetPath, h, State } from '@stencil/core';\n\n@Component({\n  tag: 'app-root',\n  shadow: false,\n  assetsDirs: ['assets'],\n})\nexport class AppRoot {\n  @State() xmlData: string;\n\n  async componentWillLoad() {\n    const res = getAssetPath('./assets/xmlData.xml');\n    console.log('🚀 ~ AppRoot ~ componentWillLoad ~ res:', res);\n    const response = await fetch(res);\n    const data = await response.text();\n    this.xmlData = data;\n  }\n\n  render() {\n    if (!this.xmlData) {\n      return <div>Loading...</div>;\n    }\n\n    return <app-home xmlData={this.xmlData}></app-home>;\n  }\n}\n",".row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* position: absolute; */\n}\n\n.row > * {\n  /* position: relative; */\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-row',\n  styleUrl: 'app-row.css',\n  shadow: false,\n})\nexport class AppRow {\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'flex' : 'none',\n      zIndex: this.z,\n    };\n\n    return (\n      <Host class=\"row\" type={this.type} tabindex={this.tabIndex} value={this.value} style={style} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        {/* <slot /> */}\n      </Host>\n    );\n  }\n}\n",".shape {\n  position: absolute;\n  top: var(--y);\n  left: var(--x);\n  display: var(--display);\n  z-index: var(--z);\n}\n\n.rectangle {\n  border-radius: 0;\n}\n\n.circle {\n  width: var(--width); /* Ensures width is always used for both dimensions */\n  height: var(--width); /* Make height equal to width for a perfect circle */\n  border-radius: 50%; /* 50% border-radius for a perfect circle */\n  background-color: var(--bgColor);\n}\n\n.ellipse {\n  width: var(--width);\n  height: var(--height);\n  border-radius: 50%; /* Create an ellipse shape */\n  background-color: var(--bgColor);\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-shape',\n  styleUrl: 'app-shape.css',\n  shadow: false,\n})\nexport class AppShape {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() shapeType: string;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.shapeType !== 'polygon' ? this.height : undefined,\n      width: this.shapeType !== 'polygon' ? this.width : undefined,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'block' : 'none',\n      zIndex: this.z,\n      backgroundColor: this.shapeType !== 'polygon' ? this.bgColor : 'transparent',\n    };\n\n    return <Host class={`shape ${this.shapeType}`} value={this.value} type={this.type} tabindex={this.tabIndex} style={style} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}></Host>;\n  }\n}\n",".text {\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.3s ease;\n  user-select: none;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-radius: 8px;\n  color: #333;\n  cursor: pointer;\n}\n\n.text:hover {\n  background-color: #f0f0f0;\n}\n","import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-text',\n  styleUrl: 'app-text.css',\n  shadow: false,\n})\nexport class AppText {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() string: string;\n  @Prop() font: string;\n  @Prop() fontSize: string;\n  @Prop() highlightWhileSpeaking: boolean;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      backgroundColor: this.bgColor,\n      top: this.y,\n      left: this.x,\n      zIndex: this.z,\n      fontSize: this.fontSize,\n      fontFamily: this.font,\n      display: this.visible ? 'flex' : 'none',\n    };\n\n    return (\n      <Host class=\"text\" value={this.value} type={this.type} tabindex={this.tabIndex} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry} id={this.id} style={style}>\n        {this.string}\n      </Host>\n    );\n  }\n}\n",".wrap {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, auto));\n}\n\n.wrap > * {\n  padding: 10px;\n  background-color: var(--child-bg-color, #f0f0f0);\n  box-sizing: border-box;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { enableDraggingWithScaling } from '../../utils/utils';\n\n@Component({\n  tag: 'app-wrap',\n  styleUrl: 'app-wrap.css',\n  shadow: false,\n})\nexport class AppWrap {\n  @Prop() id: string;\n  @Prop() value: string;\n  @Prop() height: string;\n  @Prop() width: string;\n  @Prop() x: string;\n  @Prop() y: string;\n  @Prop() z: string;\n  @Prop() bgColor: string;\n  @Prop() type: string;\n  @Prop() tabIndex:number;\n  @Prop() visible: boolean;\n  @Prop() audio: string;\n  @Prop() onTouch: string;\n  @Prop() onMatch: string;\n  @Prop() onEntry: string;\n\n  @Element() el: HTMLElement;\n\n  componentDidLoad() {\n    if (this.type === 'drag') enableDraggingWithScaling(this.el);\n  }\n  render() {\n    const style = {\n      height: this.height,\n      width: this.width,\n      top: this.y,\n      left: this.x,\n      display: this.visible ? 'grid' : 'none', // Changed to 'grid'\n      zIndex: this.z,\n      backgroundColor: this.bgColor,\n    };\n\n    return (\n      <Host class=\"wrap\" value={this.value} type={this.type} tabindex={this.tabIndex} style={style} audio={this.audio} onTouch={this.onTouch} onMatch={this.onMatch} onEntry={this.onEntry}>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}
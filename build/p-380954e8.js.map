{"version":3,"names":["format","first","middle","last","enableDraggingWithScaling","element","isDragging","startX","startY","initialX","initialY","container","document","getElementById","console","error","getElementScale","el","transform","window","getComputedStyle","matrix","match","matrixValues","split","scaleX","parseFloat","onStart","event","MouseEvent","clientX","clientY","touches","style","opacity","cursor","addEventListener","onMove","onEnd","rect1","getBoundingClientRect","rect2","verticalDistance","top","horizontalDistance","left","observer","MutationObserver","mutationsList","mutation","type","attributeName","observerConfig","attributes","attributeFilter","observe","containerScale","dx","dy","newLeft","newTop","containerRect","elementRect","numbers","result","map","Number","initialElementLeftPx","initialElementTopPx","maxRight","width","Math","abs","maxLeft","maxTop","maxBottom","height","newLeftClamp","min","newTopClamp","allElements","querySelectorAll","mostOverlappedElement","maxOverlapArea","forEach","otherElement","otherRect","overlapWidth","max","right","overlapHeight","bottom","overlapArea","border","backgroundColor","removeEventListener","log","applyPulseAndHighlightEffect","setTimeout","transition","boxShadow","onMatch","getAttribute","executeActions","actionsString","dropElement","dragElement","actions","parseActions","action","targetElement","actor","value","input","actionStrings","trim","actionString","actorAction","part","lastDotIndex","lastIndexOf","substring","push","replace"],"sources":["src/utils/utils.ts"],"sourcesContent":["export function format(first?: string, middle?: string, last?: string): string {\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\nexport function enableDraggingWithScaling(element: HTMLElement): void {\n  let isDragging = false;\n  let startX = 0;\n  let startY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  // Fetch the container element\n  const container = document.getElementById('container');\n  if (!container) {\n    console.error(`Container with ID \"container\" not found.`);\n    return;\n  }\n\n  // Function to get the scale of an element\n  const getElementScale = (el: HTMLElement): number => {\n    const transform = window.getComputedStyle(el).transform;\n    if (transform === 'none') {\n      return 1; // No scaling\n    } else {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        const scaleX = parseFloat(matrixValues[0]);\n        return scaleX; // Assuming uniform scaling (same scale in X and Y)\n      }\n    }\n    return 1; // Fallback to no scaling\n  };\n\n  const onStart = (event: MouseEvent | TouchEvent): void => {\n    isDragging = true;\n\n    if (event instanceof MouseEvent) {\n      startX = event.clientX;\n      startY = event.clientY;\n    } else {\n      startX = event.touches[0].clientX;\n      startY = event.touches[0].clientY;\n    }\n\n    // Apply dragging styles to the element\n    element.style.opacity = '0.8';\n    element.style.cursor = 'grabbing';\n\n    // Parse the current transform values at the start of each drag\n    const transform = window.getComputedStyle(element).transform;\n    if (transform !== 'none') {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        initialX = parseFloat(matrixValues[4]);\n        initialY = parseFloat(matrixValues[5]);\n      }\n    } else {\n      initialX = 0;\n      initialY = 0;\n    }\n\n    document.addEventListener('mousemove', onMove);\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchmove', onMove);\n    document.addEventListener('touchend', onEnd);\n  };\n\n  const rect1 = container.getBoundingClientRect();\n  const rect2 = element.getBoundingClientRect();\n\n  let verticalDistance = rect1.top - rect2.top;\n  let horizontalDistance = rect1.left - rect2.left;\n\n  const observer = new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n        const rect1 = container.getBoundingClientRect();\n        const rect2 = element.getBoundingClientRect();\n        verticalDistance = rect1.top - rect2.top;\n        horizontalDistance = rect1.left - rect2.left;\n      }\n    }\n  });\n\n  // Configure the observer to watch for attribute changes\n  const observerConfig = {\n    attributes: true, // Monitor attribute changes\n    attributeFilter: ['style'], // Only observe changes to the 'style' attribute\n  };\n\n  // Start observing the element\n  observer.observe(container, observerConfig);\n\n  const onMove = (event: MouseEvent | TouchEvent): void => {\n    if (!isDragging) return;\n\n    const containerScale = getElementScale(container);\n\n    let dx = 0;\n    let dy = 0;\n\n    if (event instanceof MouseEvent) {\n      dx = (event.clientX - startX) / containerScale;\n      dy = (event.clientY - startY) / containerScale;\n    } else {\n      dx = (event.touches[0].clientX - startX) / containerScale;\n      dy = (event.touches[0].clientY - startY) / containerScale;\n    }\n\n    // Calculate the new position considering scaling\n    const newLeft = initialX + dx;\n    const newTop = initialY + dy;\n\n    // Get the dimensions and scale-corrected position of the container and element\n    const containerRect = container.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n\n    const numbers = element.style.transform.match(/-?\\d+(\\.\\d+)?/g);\n    const result = numbers.map(Number);\n    const initialElementLeftPx = elementRect.left / containerScale - result[0];\n    const initialElementTopPx = elementRect.top - result[1];\n\n    const maxRight = containerRect.width / containerScale - Math.abs(horizontalDistance / containerScale) - elementRect.width / containerScale;\n    const maxLeft = containerRect.left - initialElementLeftPx;\n    const maxTop = containerRect.top - initialElementTopPx;\n    const maxBottom = containerRect.height / containerScale - Math.abs(verticalDistance / containerScale) - elementRect.height / containerScale;\n\n    const newLeftClamp = newLeft + initialElementLeftPx <= containerRect.left ? maxLeft : Math.min(newLeft, maxRight);\n    const newTopClamp = newTop + initialElementTopPx <= containerRect.top ? maxTop : Math.min(newTop, maxBottom);\n\n    // Apply transform with translation within boundaries\n    element.style.transform = `translate(${newLeftClamp}px, ${newTopClamp}px)`;\n\n    // Check for overlaps and highlight only the most overlapping element\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Check if there is overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    // Reset styles for all elements\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Apply styles only to the most overlapped element\n    if (mostOverlappedElement) {\n      mostOverlappedElement.style.border = '2px dashed #ff0000'; // Red dashed border\n      mostOverlappedElement.style.backgroundColor = 'rgba(255, 0, 0, 0.1)'; // Light red background\n    }\n  };\n\n  const onEnd = (): void => {\n    isDragging = false;\n    document.removeEventListener('mousemove', onMove);\n    document.removeEventListener('mouseup', onEnd);\n    document.removeEventListener('touchmove', onMove);\n    document.removeEventListener('touchend', onEnd);\n\n    // Reset styles when dragging ends\n    element.style.opacity = '';\n    element.style.cursor = 'move';\n\n    // Reset overlapping styles from all elements\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Check for overlaps and log the most overlapping element\n    const elementRect = element.getBoundingClientRect();\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Calculate overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    if (!mostOverlappedElement) return;\n\n    console.log('Most overlapping element:', mostOverlappedElement['value'], element['value']);\n\n    // Add pulse and highlight effect for a successful match\n    if (mostOverlappedElement['value'] === element['value']) {\n      console.log('🚀 ~ onEnd ~ mostOverlappedElement onMatch:', mostOverlappedElement['onMatch']);\n\n      // Apply a pulse and highlight effect\n      applyPulseAndHighlightEffect(mostOverlappedElement);\n      applyPulseAndHighlightEffect(element);\n\n      // Delay the execution of the action to show the effects\n      setTimeout(() => {\n        // Reset the visual effect after the delay\n        mostOverlappedElement.style.transition = '';\n        mostOverlappedElement.style.boxShadow = '';\n        mostOverlappedElement.style.backgroundColor = '';\n        element.style.transition = '';\n        element.style.boxShadow = '';\n        element.style.backgroundColor = '';\n\n        // Perform actions if onMatch is defined\n        const onMatch = mostOverlappedElement.getAttribute('onMatch');\n        if (onMatch) {\n          executeActions(onMatch, mostOverlappedElement, element);\n        }\n      }, 1000); // Adjust the delay time as needed (1000ms in this case)\n    }\n  };\n\n  // Function to apply a pulse and highlight effect using inline styles\n  const applyPulseAndHighlightEffect = (el: HTMLElement): void => {\n    // Apply a longer background color change to light green and pulse effect\n    el.style.transition = 'box-shadow 0.5s ease, background-color 0.5s ease';\n    el.style.backgroundColor = 'rgba(144, 238, 144, 0.7)'; // Light green color\n\n    // Apply a subtle pulse effect using box-shadow\n    el.style.boxShadow = '0 0 15px 7px rgba(144, 238, 144, 0.5)'; // Light green shadow\n\n    // Reset box-shadow after the effect duration\n    setTimeout(() => {\n      el.style.boxShadow = '0 0 0px 0px rgba(144, 238, 144, 0.0)'; // Reset shadow\n    }, 500); // Extended duration for the pulse effect\n  };\n\n  // Function to execute actions parsed from the onMatch string\n  const executeActions = (actionsString: string, dropElement: HTMLElement, dragElement: HTMLElement): void => {\n    const actions = parseActions(actionsString);\n    console.log('🚀 ~ executeActions ~ actions:', actions);\n    actions.forEach(action => {\n      const targetElement = action.actor === 'this' ? dropElement : action.actor === 'element' ? dragElement : document.getElementById(action.actor);\n      console.log('🚀 ~ executeActions ~ targetElement:', targetElement);\n      if (targetElement) {\n        targetElement.style[action.action as any] = action.value;\n      }\n    });\n  };\n\n  // Function to parse actions string\n  const parseActions = (input: string): Array<{ actor: string; action: string; value: string }> => {\n    const actions = [];\n    const actionStrings = input.split(';').map(action => action.trim());\n\n    actionStrings.forEach(actionString => {\n      if (actionString) {\n        const [actorAction, value] = actionString.split('=').map(part => part.trim());\n        const lastDotIndex = actorAction.lastIndexOf('.');\n        if (lastDotIndex !== -1) {\n          const actor = actorAction.substring(0, lastDotIndex).trim();\n          const action = actorAction.substring(lastDotIndex + 1).trim();\n          actions.push({ actor, action, value: value.replace(/['\"]/g, '') });\n        }\n      }\n    });\n\n    return actions;\n  };\n\n  // Initialize draggable element styles\n  element.style.cursor = 'move';\n  element.style.transform = 'translate(0, 0)'; // Initialize transform for consistent dragging\n\n  element.addEventListener('mousedown', onStart);\n  element.addEventListener('touchstart', onStart);\n}\n"],"mappings":"SAAgBA,EAAOC,EAAgBC,EAAiBC,GACtD,OAAQF,GAAS,KAAOC,EAAS,IAAIA,IAAW,KAAOC,EAAO,IAAIA,IAAS,GAC7E,C,SAEgBC,EAA0BC,GACxC,IAAIC,EAAa,MACjB,IAAIC,EAAS,EACb,IAAIC,EAAS,EACb,IAAIC,EAAW,EACf,IAAIC,EAAW,EAGf,MAAMC,EAAYC,SAASC,eAAe,aAC1C,IAAKF,EAAW,CACdG,QAAQC,MAAM,4CACd,M,CAIF,MAAMC,EAAmBC,IACvB,MAAMC,EAAYC,OAAOC,iBAAiBH,GAAIC,UAC9C,GAAIA,IAAc,OAAQ,CACxB,OAAO,C,KACF,CACL,MAAMG,EAASH,EAAUI,MAAM,qBAC/B,GAAID,EAAQ,CACV,MAAME,EAAeF,EAAO,GAAGG,MAAM,MACrC,MAAMC,EAASC,WAAWH,EAAa,IACvC,OAAOE,C,EAGX,OAAO,CAAC,EAGV,MAAME,EAAWC,IACftB,EAAa,KAEb,GAAIsB,aAAiBC,WAAY,CAC/BtB,EAASqB,EAAME,QACftB,EAASoB,EAAMG,O,KACV,CACLxB,EAASqB,EAAMI,QAAQ,GAAGF,QAC1BtB,EAASoB,EAAMI,QAAQ,GAAGD,O,CAI5B1B,EAAQ4B,MAAMC,QAAU,MACxB7B,EAAQ4B,MAAME,OAAS,WAGvB,MAAMjB,EAAYC,OAAOC,iBAAiBf,GAASa,UACnD,GAAIA,IAAc,OAAQ,CACxB,MAAMG,EAASH,EAAUI,MAAM,qBAC/B,GAAID,EAAQ,CACV,MAAME,EAAeF,EAAO,GAAGG,MAAM,MACrCf,EAAWiB,WAAWH,EAAa,IACnCb,EAAWgB,WAAWH,EAAa,G,MAEhC,CACLd,EAAW,EACXC,EAAW,C,CAGbE,SAASwB,iBAAiB,YAAaC,GACvCzB,SAASwB,iBAAiB,UAAWE,GACrC1B,SAASwB,iBAAiB,YAAaC,GACvCzB,SAASwB,iBAAiB,WAAYE,EAAM,EAG9C,MAAMC,EAAQ5B,EAAU6B,wBACxB,MAAMC,EAAQpC,EAAQmC,wBAEtB,IAAIE,EAAmBH,EAAMI,IAAMF,EAAME,IACzC,IAAIC,EAAqBL,EAAMM,KAAOJ,EAAMI,KAE5C,MAAMC,EAAW,IAAIC,kBAAiBC,IACpC,IAAK,MAAMC,KAAYD,EAAe,CACpC,GAAIC,EAASC,OAAS,cAAgBD,EAASE,gBAAkB,QAAS,CACxE,MAAMZ,EAAQ5B,EAAU6B,wBACxB,MAAMC,EAAQpC,EAAQmC,wBACtBE,EAAmBH,EAAMI,IAAMF,EAAME,IACrCC,EAAqBL,EAAMM,KAAOJ,EAAMI,I,MAM9C,MAAMO,EAAiB,CACrBC,WAAY,KACZC,gBAAiB,CAAC,UAIpBR,EAASS,QAAQ5C,EAAWyC,GAE5B,MAAMf,EAAUT,IACd,IAAKtB,EAAY,OAEjB,MAAMkD,EAAiBxC,EAAgBL,GAEvC,IAAI8C,EAAK,EACT,IAAIC,EAAK,EAET,GAAI9B,aAAiBC,WAAY,CAC/B4B,GAAM7B,EAAME,QAAUvB,GAAUiD,EAChCE,GAAM9B,EAAMG,QAAUvB,GAAUgD,C,KAC3B,CACLC,GAAM7B,EAAMI,QAAQ,GAAGF,QAAUvB,GAAUiD,EAC3CE,GAAM9B,EAAMI,QAAQ,GAAGD,QAAUvB,GAAUgD,C,CAI7C,MAAMG,EAAUlD,EAAWgD,EAC3B,MAAMG,EAASlD,EAAWgD,EAG1B,MAAMG,EAAgBlD,EAAU6B,wBAChC,MAAMsB,EAAczD,EAAQmC,wBAE5B,MAAMuB,EAAU1D,EAAQ4B,MAAMf,UAAUI,MAAM,kBAC9C,MAAM0C,EAASD,EAAQE,IAAIC,QAC3B,MAAMC,EAAuBL,EAAYjB,KAAOW,EAAiBQ,EAAO,GACxE,MAAMI,EAAsBN,EAAYnB,IAAMqB,EAAO,GAErD,MAAMK,EAAWR,EAAcS,MAAQd,EAAiBe,KAAKC,IAAI5B,EAAqBY,GAAkBM,EAAYQ,MAAQd,EAC5H,MAAMiB,EAAUZ,EAAchB,KAAOsB,EACrC,MAAMO,EAASb,EAAclB,IAAMyB,EACnC,MAAMO,EAAYd,EAAce,OAASpB,EAAiBe,KAAKC,IAAI9B,EAAmBc,GAAkBM,EAAYc,OAASpB,EAE7H,MAAMqB,EAAelB,EAAUQ,GAAwBN,EAAchB,KAAO4B,EAAUF,KAAKO,IAAInB,EAASU,GACxG,MAAMU,EAAcnB,EAASQ,GAAuBP,EAAclB,IAAM+B,EAASH,KAAKO,IAAIlB,EAAQe,GAGlGtE,EAAQ4B,MAAMf,UAAY,aAAa2D,QAAmBE,OAG1D,MAAMC,EAAcpE,SAASqE,iBAA8B,iBAC3D,IAAIC,EAA4C,KAChD,IAAIC,EAAiB,EAErBH,EAAYI,SAAQC,IAClB,MAAMC,EAAYD,EAAa7C,wBAG/B,MAAM+C,EAAehB,KAAKiB,IAAI,EAAGjB,KAAKO,IAAIhB,EAAY2B,MAAOH,EAAUG,OAASlB,KAAKiB,IAAI1B,EAAYjB,KAAMyC,EAAUzC,OACrH,MAAM6C,EAAgBnB,KAAKiB,IAAI,EAAGjB,KAAKO,IAAIhB,EAAY6B,OAAQL,EAAUK,QAAUpB,KAAKiB,IAAI1B,EAAYnB,IAAK2C,EAAU3C,MACvH,MAAMiD,EAAcL,EAAeG,EAGnC,GAAIE,EAAcT,EAAgB,CAChCA,EAAiBS,EACjBV,EAAwBG,C,KAK5BL,EAAYI,SAAQC,IAClBA,EAAapD,MAAM4D,OAAS,GAC5BR,EAAapD,MAAM6D,gBAAkB,EAAE,IAIzC,GAAIZ,EAAuB,CACzBA,EAAsBjD,MAAM4D,OAAS,qBACrCX,EAAsBjD,MAAM6D,gBAAkB,sB,GAIlD,MAAMxD,EAAQ,KACZhC,EAAa,MACbM,SAASmF,oBAAoB,YAAa1D,GAC1CzB,SAASmF,oBAAoB,UAAWzD,GACxC1B,SAASmF,oBAAoB,YAAa1D,GAC1CzB,SAASmF,oBAAoB,WAAYzD,GAGzCjC,EAAQ4B,MAAMC,QAAU,GACxB7B,EAAQ4B,MAAME,OAAS,OAGvB,MAAM6C,EAAcpE,SAASqE,iBAA8B,iBAC3DD,EAAYI,SAAQC,IAClBA,EAAapD,MAAM4D,OAAS,GAC5BR,EAAapD,MAAM6D,gBAAkB,EAAE,IAIzC,MAAMhC,EAAczD,EAAQmC,wBAC5B,IAAI0C,EAA4C,KAChD,IAAIC,EAAiB,EAErBH,EAAYI,SAAQC,IAClB,MAAMC,EAAYD,EAAa7C,wBAG/B,MAAM+C,EAAehB,KAAKiB,IAAI,EAAGjB,KAAKO,IAAIhB,EAAY2B,MAAOH,EAAUG,OAASlB,KAAKiB,IAAI1B,EAAYjB,KAAMyC,EAAUzC,OACrH,MAAM6C,EAAgBnB,KAAKiB,IAAI,EAAGjB,KAAKO,IAAIhB,EAAY6B,OAAQL,EAAUK,QAAUpB,KAAKiB,IAAI1B,EAAYnB,IAAK2C,EAAU3C,MACvH,MAAMiD,EAAcL,EAAeG,EAGnC,GAAIE,EAAcT,EAAgB,CAChCA,EAAiBS,EACjBV,EAAwBG,C,KAI5B,IAAKH,EAAuB,OAE5BpE,QAAQkF,IAAI,4BAA6Bd,EAAsB,SAAU7E,EAAQ,UAGjF,GAAI6E,EAAsB,WAAa7E,EAAQ,SAAU,CACvDS,QAAQkF,IAAI,8CAA+Cd,EAAsB,YAGjFe,EAA6Bf,GAC7Be,EAA6B5F,GAG7B6F,YAAW,KAEThB,EAAsBjD,MAAMkE,WAAa,GACzCjB,EAAsBjD,MAAMmE,UAAY,GACxClB,EAAsBjD,MAAM6D,gBAAkB,GAC9CzF,EAAQ4B,MAAMkE,WAAa,GAC3B9F,EAAQ4B,MAAMmE,UAAY,GAC1B/F,EAAQ4B,MAAM6D,gBAAkB,GAGhC,MAAMO,EAAUnB,EAAsBoB,aAAa,WACnD,GAAID,EAAS,CACXE,EAAeF,EAASnB,EAAuB7E,E,IAEhD,I,GAKP,MAAM4F,EAAgChF,IAEpCA,EAAGgB,MAAMkE,WAAa,mDACtBlF,EAAGgB,MAAM6D,gBAAkB,2BAG3B7E,EAAGgB,MAAMmE,UAAY,wCAGrBF,YAAW,KACTjF,EAAGgB,MAAMmE,UAAY,sCAAsC,GAC1D,IAAI,EAIT,MAAMG,EAAiB,CAACC,EAAuBC,EAA0BC,KACvE,MAAMC,EAAUC,EAAaJ,GAC7B1F,QAAQkF,IAAI,iCAAkCW,GAC9CA,EAAQvB,SAAQyB,IACd,MAAMC,EAAgBD,EAAOE,QAAU,OAASN,EAAcI,EAAOE,QAAU,UAAYL,EAAc9F,SAASC,eAAegG,EAAOE,OACxIjG,QAAQkF,IAAI,uCAAwCc,GACpD,GAAIA,EAAe,CACjBA,EAAc7E,MAAM4E,EAAOA,QAAiBA,EAAOG,K,IAErD,EAIJ,MAAMJ,EAAgBK,IACpB,MAAMN,EAAU,GAChB,MAAMO,EAAgBD,EAAMzF,MAAM,KAAKyC,KAAI4C,GAAUA,EAAOM,SAE5DD,EAAc9B,SAAQgC,IACpB,GAAIA,EAAc,CAChB,MAAOC,EAAaL,GAASI,EAAa5F,MAAM,KAAKyC,KAAIqD,GAAQA,EAAKH,SACtE,MAAMI,EAAeF,EAAYG,YAAY,KAC7C,GAAID,KAAkB,EAAG,CACvB,MAAMR,EAAQM,EAAYI,UAAU,EAAGF,GAAcJ,OACrD,MAAMN,EAASQ,EAAYI,UAAUF,EAAe,GAAGJ,OACvDR,EAAQe,KAAK,CAAEX,QAAOF,SAAQG,MAAOA,EAAMW,QAAQ,QAAS,K,MAKlE,OAAOhB,CAAO,EAIhBtG,EAAQ4B,MAAME,OAAS,OACvB9B,EAAQ4B,MAAMf,UAAY,kBAE1Bb,EAAQ+B,iBAAiB,YAAaT,GACtCtB,EAAQ+B,iBAAiB,aAAcT,EACzC,Q","ignoreList":[]}
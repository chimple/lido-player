{"version":3,"names":["DragSelectedMapKey","SelectedValuesKey","ActivityScoreKey","ActivityEndKey","LessonEndKey","NextContainerKey","ActivityChangeKey","GameCompletedKey","ElementDropKey","ElementClickKey","TraceMode","GameScore","constructor","this","rightMoves","wrongMoves","finalScore","dispatchCustomEvent","eventName","detail","event","CustomEvent","window","dispatchEvent","dispatchActivityEndEvent","index","totalIndex","score","dispatchLessonEndEvent","dispatchNextContainerEvent","dispatchGameCompletedEvent","dispatchActivityChangeEvent","dispatchElementDropEvent","dragElement","dropElement","isCorrect","createdAt","Date","toISOString","dispatchClickEvent","element","gameScore","format","first","middle","last","getElementScale","el","transform","getComputedStyle","matrix","match","matrixValues","split","scaleX","parseFloat","slidingWithScaling","overlapElement","isDragging","startX","startY","initialX","initialY","parentElement","console","error","onStart","removeHighlight","MouseEvent","clientX","clientY","touches","style","opacity","cursor","getBoundingClientRect","document","addEventListener","onMove","onEnd","observer","MutationObserver","mutationsList","mutation","type","attributeName","observerConfig","attributes","attributeFilter","observe","parentElementScale","dx","dy","newLeft","newTop","containerRect","elementRect","numbers","result","map","Number","initialElementLeftPx","left","initialElementTopPx","top","initialElementRightPx","right","initialElementBottomPx","bottom","maxRight","maxLeft","maxTop","maxBottom","newLeftClamp","Math","min","newTopClamp","allElements","querySelectorAll","mostOverlappedElement","maxOverlapArea","forEach","otherElement","otherRect","elementArea","width","height","otherArea","overlapWidth","max","overlapHeight","overlapArea","overlapThreshold","parent1","parent2","elementPlaceholder","createComment","overlappedPlaceholder","replaceChild","endEv","removeEventListener","slideCompleted","ev","onClickDropOrDragElement","slideElement","slideArr","JSON","parse","localStorage","getItem","allSlideElements","item","setItem","stringify","objectiveString","getElementById","objectiveArray","elementIndex","indexOf","matchStringPattern","trim","storingEachActivityScore","handleShowCheck","enableDraggingWithScaling","container","verticalDistance","horizontalDistance","rect1","rect2","containerScale","abs","border","backgroundColor","onElementDropComplete","async","selectedValueData","dragSelectedData","selectedValue","filter","value","dragSelected","dropIndex","getAttribute","hasOwnProperty","onCorrect","executeActions","onInCorrect","onActivityComplete","actionsString","thisElement","actions","parseActions","i","length","action","targetElement","actor","currentTransform","dropRect","scaledLeft","scaledTop","position","classList","add","audioUrl","convertUrlToRelative","audioElement","newAudio","createElement","id","body","appendChild","pause","currentTime","src","log","play","highlightSpeakingElement","ended","Promise","resolve","setTimeout","stopHighlightForSpeakingElement","isNumber","isNaN","input","actionStrings","_a","actionString","actorAction","part","lastDotIndex","lastIndexOf","substring","push","replace","pattern","arr","patternGroups","group","arrIndex","options","Set","startsWith","endsWith","choices","slice","option","includes","choice","has","delete","countPatternWords","wordCount","isAllowOnlyCorrect","dragScore","sortedKeys","Object","keys","sort","a","b","parseInt","sortedValues","reduce","acc","key","concat","flag","calculateScore","floor","storeActivityScore","appHome","querySelector","_b","activityScore","_c","activityScoreKey","toString","scoresArray","values","cur","removeItem","selectValues","checkButton","showCheck","remove","validateObjectiveStatus","res","appendingDragElementsInDrop","triggerNextContainer","isContinueOnCorrect","dragItems","dropItems","drop","drag","initEventsForElement","canplay","addClickListenerForClickType","handleDropElement","onEntry","onTouchListenerForOnTouch","onTouch","onclick","onClick","boxShadow","transition","objective","highlightedElements","innerHTML","head","ariaPressed","selectedDropElement","selectedDragElement","dragRect","translateX","translateY","styleId","url","baseUrl"],"sources":["src/utils/constants.ts","src/utils/customEvents.ts","src/utils/utils.ts"],"sourcesContent":["export const DragSelectedMapKey = 'lidoDragSelectedMap';\nexport const SelectedValuesKey = 'lidoSelectedValues';\nexport const ActivityScoreKey = 'lidoActivityScore';\nexport const ActivityEndKey = 'lidoActivityEnd';\nexport const LessonEndKey = 'lidoLessonEnd';\nexport const NextContainerKey = 'lidoNextContainer';\nexport const ActivityChangeKey = 'lidoActivityChange';\nexport const GameCompletedKey = 'lidoGameCompleted';\nexport const GameExitKey = 'lidoGameExit';\nexport const ElementDropKey = 'lidoElementDrop';\nexport const ElementClickKey = 'lidoElementClick';\n\nexport enum TraceMode {\n  NoFlow = 'lido-noFlow',\n  ShowFlow = 'lido-showFlow',\n  FreeTrace = 'lido-freeTrace',\n  BlindTracing = 'lido-blindTracing',\n  BlindFreeTrace = 'lido-blindFreeTrace',\n}\n\nexport default class GameScore{\n  rightMoves: number = 0;\n  wrongMoves: number = 0;\n  finalScore: number = 0;\n}\n","import { ActivityChangeKey, ActivityEndKey, ElementClickKey, ElementDropKey, GameCompletedKey, GameExitKey, LessonEndKey, NextContainerKey } from './constants';\n\nfunction dispatchCustomEvent(eventName: string, detail: any) {\n  const event = new CustomEvent(eventName, { detail });\n  window.dispatchEvent(event);\n}\n\nexport function dispatchActivityEndEvent(index: number, totalIndex: number, score: number) {\n  dispatchCustomEvent(ActivityEndKey, { index, totalIndex, score });\n}\n\nexport function dispatchLessonEndEvent(score: number) {\n  dispatchCustomEvent(LessonEndKey, { score });\n}\n\nexport function dispatchNextContainerEvent() {\n  dispatchCustomEvent(NextContainerKey, {});\n}\n\nexport function dispatchGameCompletedEvent() {\n  dispatchCustomEvent(GameCompletedKey, {});\n}\n\nexport function dispatchGameExitEvent() {\n  dispatchCustomEvent(GameExitKey, {});\n}\n\nexport function dispatchActivityChangeEvent(index: number) {\n  dispatchCustomEvent(ActivityChangeKey, { index });\n}\n\nexport function dispatchElementDropEvent(dragElement: HTMLElement, dropElement: HTMLElement, isCorrect: boolean) {\n  dispatchCustomEvent(ElementDropKey, { dragElement, dropElement, isCorrect: isCorrect, createdAt: new Date().toISOString() });\n}\n\nexport function dispatchClickEvent(element: HTMLElement, isCorrect: boolean) {\n  dispatchCustomEvent(ElementClickKey, { element, isCorrect: isCorrect, createdAt: new Date().toISOString() });\n}\n","import { ActivityScoreKey, DragSelectedMapKey, LessonEndKey, SelectedValuesKey } from './constants';\nimport { dispatchActivityEndEvent, dispatchClickEvent, dispatchElementDropEvent, dispatchLessonEndEvent, dispatchNextContainerEvent } from './customEvents';\nimport GameScore from './constants';\nconst gameScore = new GameScore();\n\nexport function format(first?: string, middle?: string, last?: string): string {\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\n// Function to get the scale of an element\nconst getElementScale = (el: HTMLElement): number => {\n  const transform = window.getComputedStyle(el).transform;\n  if (transform === 'none') {\n    return 1; // No scaling\n  } else {\n    const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n    if (matrix) {\n      const matrixValues = matrix[1].split(', ');\n      const scaleX = parseFloat(matrixValues[0]);\n      return scaleX; // Assuming uniform scaling (same scale in X and Y)\n    }\n  }\n  return 1; // Fallback to no scaling\n};\n\nfunction slidingWithScaling(element: HTMLElement): void {\n  let overlapElement = false;\n  let isDragging = false;\n  let startX = 0;\n  let startY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  // Fetch the container element\n  const parentElement = element.parentElement;\n  if (!parentElement) {\n    console.error(`Parent element not found.`);\n    return;\n  }\n\n  let verticalDistance;\n  let horizontalDistance;\n\n  const onStart = (event: MouseEvent | TouchEvent): void => {\n    removeHighlight(element);\n    isDragging = true;\n\n    if (event instanceof MouseEvent) {\n      startX = event.clientX;\n      startY = event.clientY;\n    } else {\n      startX = event.touches[0].clientX;\n      startY = event.touches[0].clientY;\n    }\n\n    // Apply dragging styles to the element\n    element.style.opacity = '0.8';\n    element.style.cursor = 'grabbing';\n\n    // Parse the current transform values at the start of each drag\n    const transform = window.getComputedStyle(element).transform;\n    if (transform !== 'none') {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        initialX = parseFloat(matrixValues[4]);\n        initialY = parseFloat(matrixValues[5]);\n      }\n    } else {\n      initialX = 0;\n      initialY = 0;\n    }\n\n    const rect1 = parentElement.getBoundingClientRect();\n    const rect2 = element.getBoundingClientRect();\n    verticalDistance = rect1.top - rect2.top;\n    horizontalDistance = rect1.left - rect2.left;\n\n    document.addEventListener('mousemove', onMove);\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchmove', onMove);\n    document.addEventListener('touchend', onEnd);\n  };\n\n  const observer = new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n        const rect1 = parentElement.getBoundingClientRect();\n        const rect2 = element.getBoundingClientRect();\n        verticalDistance = rect1.top - rect2.top;\n        horizontalDistance = rect1.left - rect2.left;\n      }\n    }\n  });\n\n  // Configure the observer to watch for attribute changes\n  const observerConfig = {\n    attributes: true, // Monitor attribute changes\n    attributeFilter: ['style'], // Only observe changes to the 'style' attribute\n  };\n\n  // Start observing the element\n  observer.observe(parentElement, observerConfig);\n\n  const onMove = (event: MouseEvent | TouchEvent): void => {\n    if (!isDragging) return;\n    const parentElementScale = getElementScale(parentElement);\n    let dx = 0;\n    let dy = 0;\n\n    if (event instanceof MouseEvent) {\n      dx = (event.clientX - startX) / parentElementScale;\n      dy = (event.clientY - startY) / parentElementScale;\n    } else {\n      dx = (event.touches[0].clientX - startX) / parentElementScale;\n      dy = (event.touches[0].clientY - startY) / parentElementScale;\n    }\n\n    // Calculate the new position considering scaling\n    const newLeft = initialX + dx;\n    const newTop = initialY + dy;\n\n    // Get the dimensions and scale-corrected position of the container and element\n    const containerRect = parentElement.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n\n    const numbers = element.style.transform.match(/-?\\d+(\\.\\d+)?/g);\n    const result = numbers.map(Number);\n    const initialElementLeftPx = elementRect.left / parentElementScale - result[0];\n    const initialElementTopPx = elementRect.top - result[1];\n    const initialElementRightPx = elementRect.right / parentElementScale - result[0];\n    const initialElementBottomPx = elementRect.bottom - result[1];\n\n    const maxRight = containerRect.right - initialElementRightPx;\n    const maxLeft = containerRect.left - initialElementLeftPx;\n    const maxTop = containerRect.top - initialElementTopPx;\n    const maxBottom = containerRect.bottom - initialElementBottomPx;\n\n    const newLeftClamp = newLeft + initialElementLeftPx <= containerRect.left ? maxLeft : Math.min(newLeft, maxRight);\n    const newTopClamp = newTop + initialElementTopPx <= containerRect.top ? maxTop : Math.min(newTop, maxBottom);\n\n    // Apply transform with translation within boundaries\n    element.style.transform = `translate(${newLeftClamp}px, ${newTopClamp}px)`;\n\n    // Check for overlaps and highlight only the most overlapping element\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='slide']\");\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      if (otherElement === element) return;\n\n      const otherRect = otherElement.getBoundingClientRect();\n      const elementArea = elementRect.width * elementRect.height; // Area of the dragged element\n      const otherArea = otherRect.width * otherRect.height; // Area of the other element\n\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Determine the threshold for overlap (at least 80% of the smaller element's area)\n      const overlapThreshold = Math.min(elementArea, otherArea) * 0.8;\n\n      // Check if the overlap area exceeds the threshold\n      if (overlapArea >= overlapThreshold && overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    // Apply styles only to the most overlapped element\n    if (mostOverlappedElement) {\n      if (mostOverlappedElement != element) {\n        const parent1 = element.parentElement;\n        const parent2 = mostOverlappedElement.parentElement;\n\n        if (parent1 && parent2) {\n          // Temporarily detach both elements\n          const elementPlaceholder = document.createComment('element-placeholder');\n          const overlappedPlaceholder = document.createComment('overlapped-placeholder');\n          parent1.replaceChild(elementPlaceholder, element);\n          parent2.replaceChild(overlappedPlaceholder, mostOverlappedElement);\n          // Swap the elements\n          parent1.replaceChild(mostOverlappedElement, elementPlaceholder);\n          parent2.replaceChild(element, overlappedPlaceholder);\n          element.style.transform = 'translate(0, 0)';\n\n          // Recalculate starting points for the swapped element\n          startX = event instanceof MouseEvent ? event.clientX : event.touches[0].clientX;\n          startY = event instanceof MouseEvent ? event.clientY : event.touches[0].clientY;\n          initialX = 0;\n          initialY = 0;\n          overlapElement = true;\n        }\n      }\n    }\n  };\n\n  const onEnd = (endEv): void => {\n    isDragging = false;\n    document.removeEventListener('mousemove', onMove);\n    document.removeEventListener('mouseup', onEnd);\n    document.removeEventListener('touchmove', onMove);\n    document.removeEventListener('touchend', onEnd);\n\n    // Reset styles when dragging ends\n    element.style.opacity = '';\n    element.style.cursor = 'move';\n    element.style.transform = 'translate(0, 0)';\n\n    if (overlapElement) {\n      slideCompleted(element);\n      overlapElement = false;\n    }\n  };\n  // Initialize draggable element styles\n  element.style.cursor = 'move';\n  element.style.transform = 'translate(0, 0)'; // Initialize transform for consistent dragging\n\n  element.addEventListener('mousedown', onStart);\n  element.addEventListener('touchstart', onStart);\n  element.addEventListener('click', ev => {\n    onClickDropOrDragElement(element, 'drag');\n  });\n}\n\nconst slideCompleted = (slideElement: HTMLElement) => {\n  const slideArr = JSON.parse(localStorage.getItem(SelectedValuesKey)) || [];\n  const allSlideElements = document.querySelectorAll(\"[type='slide']\");\n\n  let index = 0;\n  allSlideElements.forEach(item => {\n    slideArr[index++] = item['value'];\n  });\n  localStorage.setItem(SelectedValuesKey, JSON.stringify(slideArr));\n\n  const objectiveString = document.getElementById('lido-container')['objective'];\n  const objectiveArray = objectiveString.split(',');\n  const elementIndex = slideArr.indexOf(slideElement['value']);\n  const isCorrect = matchStringPattern(slideElement['value'], [objectiveArray[elementIndex].trim()]);\n  storingEachActivityScore(isCorrect);\n  handleShowCheck();\n};\n\nfunction enableDraggingWithScaling(element: HTMLElement): void {\n  let isDragging = false;\n  let startX = 0;\n  let startY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  // Fetch the container element\n  const container = document.getElementById('lido-container');\n  if (!container) {\n    console.error(`Container with ID \"container\" not found.`);\n    return;\n  }\n\n  let verticalDistance;\n  let horizontalDistance;\n\n  const onStart = (event: MouseEvent | TouchEvent): void => {\n    removeHighlight(element);\n    isDragging = true;\n\n    if (event instanceof MouseEvent) {\n      startX = event.clientX;\n      startY = event.clientY;\n    } else {\n      startX = event.touches[0].clientX;\n      startY = event.touches[0].clientY;\n    }\n\n    // Apply dragging styles to the element\n    element.style.opacity = '0.8';\n    element.style.cursor = 'grabbing';\n\n    // Parse the current transform values at the start of each drag\n    const transform = window.getComputedStyle(element).transform;\n    if (transform !== 'none') {\n      const matrix = transform.match(/matrix\\(([^)]+)\\)/);\n      if (matrix) {\n        const matrixValues = matrix[1].split(', ');\n        initialX = parseFloat(matrixValues[4]);\n        initialY = parseFloat(matrixValues[5]);\n      }\n    } else {\n      initialX = 0;\n      initialY = 0;\n    }\n\n    const rect1 = container.getBoundingClientRect();\n    const rect2 = element.getBoundingClientRect();\n    verticalDistance = rect1.top - rect2.top;\n    horizontalDistance = rect1.left - rect2.left;\n\n    document.addEventListener('mousemove', onMove);\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchmove', onMove);\n    document.addEventListener('touchend', onEnd);\n  };\n\n  const observer = new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n        const rect1 = container.getBoundingClientRect();\n        const rect2 = element.getBoundingClientRect();\n        verticalDistance = rect1.top - rect2.top;\n        horizontalDistance = rect1.left - rect2.left;\n      }\n    }\n  });\n\n  // Configure the observer to watch for attribute changes\n  const observerConfig = {\n    attributes: true, // Monitor attribute changes\n    attributeFilter: ['style'], // Only observe changes to the 'style' attribute\n  };\n\n  // Start observing the element\n  observer.observe(container, observerConfig);\n\n  const onMove = (event: MouseEvent | TouchEvent): void => {\n    if (!isDragging) return;\n\n    const containerScale = getElementScale(container);\n\n    let dx = 0;\n    let dy = 0;\n\n    if (event instanceof MouseEvent) {\n      dx = (event.clientX - startX) / containerScale;\n      dy = (event.clientY - startY) / containerScale;\n    } else {\n      dx = (event.touches[0].clientX - startX) / containerScale;\n      dy = (event.touches[0].clientY - startY) / containerScale;\n    }\n\n    // Calculate the new position considering scaling\n    const newLeft = initialX + dx;\n    const newTop = initialY + dy;\n\n    // Get the dimensions and scale-corrected position of the container and element\n    const containerRect = container.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n\n    const numbers = element.style.transform.match(/-?\\d+(\\.\\d+)?/g);\n    const result = numbers.map(Number);\n    const initialElementLeftPx = elementRect.left / containerScale - result[0];\n    const initialElementTopPx = elementRect.top - result[1];\n\n    const maxRight = containerRect.width / containerScale - Math.abs(horizontalDistance / containerScale) - elementRect.width / containerScale;\n    const maxLeft = containerRect.left - initialElementLeftPx;\n    const maxTop = containerRect.top - initialElementTopPx;\n    const maxBottom = containerRect.height / containerScale - Math.abs(verticalDistance / containerScale) - elementRect.height / containerScale;\n\n    const newLeftClamp = newLeft + initialElementLeftPx <= containerRect.left ? maxLeft : Math.min(newLeft, maxRight);\n    const newTopClamp = newTop + initialElementTopPx <= containerRect.top ? maxTop : Math.min(newTop, maxBottom);\n\n    // Apply transform with translation within boundaries\n    element.style.transform = `translate(${newLeftClamp}px, ${newTopClamp}px)`;\n\n    // Check for overlaps and highlight only the most overlapping element\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Check if there is overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    // Reset styles for all elements\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Apply styles only to the most overlapped element\n    if (mostOverlappedElement) {\n      mostOverlappedElement.style.border = '2px dashed #ff0000'; // Red dashed border\n      mostOverlappedElement.style.backgroundColor = 'rgba(255, 0, 0, 0.1)'; // Light red background\n    }\n  };\n\n  const onEnd = (endEv): void => {\n    isDragging = false;\n    document.removeEventListener('mousemove', onMove);\n    document.removeEventListener('mouseup', onEnd);\n    document.removeEventListener('touchmove', onMove);\n    document.removeEventListener('touchend', onEnd);\n\n    // Reset styles when dragging ends\n    element.style.opacity = '';\n    element.style.cursor = 'move';\n\n    // Reset overlapping styles from all elements\n    const allElements = document.querySelectorAll<HTMLElement>(\"[type='drop']\");\n    allElements.forEach(otherElement => {\n      otherElement.style.border = ''; // Reset border\n      otherElement.style.backgroundColor = ''; // Reset background color\n    });\n\n    // Check for overlaps and log the most overlapping element\n    const elementRect = element.getBoundingClientRect();\n    let mostOverlappedElement: HTMLElement | null = null;\n    let maxOverlapArea = 0;\n\n    allElements.forEach(otherElement => {\n      const otherRect = otherElement.getBoundingClientRect();\n\n      // Calculate overlap\n      const overlapWidth = Math.max(0, Math.min(elementRect.right, otherRect.right) - Math.max(elementRect.left, otherRect.left));\n      const overlapHeight = Math.max(0, Math.min(elementRect.bottom, otherRect.bottom) - Math.max(elementRect.top, otherRect.top));\n      const overlapArea = overlapWidth * overlapHeight;\n\n      // Update the most overlapped element if this one has a larger overlap area\n      if (overlapArea > maxOverlapArea) {\n        maxOverlapArea = overlapArea;\n        mostOverlappedElement = otherElement;\n      }\n    });\n\n    onElementDropComplete(element, mostOverlappedElement);\n  };\n  // Initialize draggable element styles\n  element.style.cursor = 'move';\n  element.style.transform = 'translate(0, 0)'; // Initialize transform for consistent dragging\n\n  element.addEventListener('mousedown', onStart);\n  element.addEventListener('touchstart', onStart);\n  element.addEventListener('click', ev => {\n    onClickDropOrDragElement(element, 'drag');\n  });\n}\n\nasync function onElementDropComplete(dragElement: HTMLElement, dropElement: HTMLElement): Promise<void> {\n  if (!dropElement) {\n    const selectedValueData = localStorage.getItem(SelectedValuesKey);\n    const dragSelectedData = localStorage.getItem(DragSelectedMapKey);\n    if (selectedValueData) {\n      let selectedValue = JSON.parse(selectedValueData);\n      selectedValue = selectedValue.filter(value => value != dragElement['value']);\n      localStorage.setItem(SelectedValuesKey, JSON.stringify(selectedValue));\n    }\n    if (dragSelectedData) {\n      let dragSelected = JSON.parse(dragSelectedData);\n      const dropIndex = dragElement.parentElement.getAttribute('tabIndex');\n      if (dropIndex && dragSelected.hasOwnProperty(dropIndex)) {\n        delete dragSelected[dropIndex];\n      }\n      localStorage.setItem(DragSelectedMapKey, JSON.stringify(dragSelected));\n    }\n    handleShowCheck();\n    return;\n  }\n\n  // Add pulse and highlight effect for a successful match\n  const isCorrect = matchStringPattern(dropElement['value'], [dragElement['value']]);\n  dispatchElementDropEvent(dragElement, dropElement, isCorrect);\n  if (isCorrect) {\n    // Perform actions if onMatch is defined\n    const onCorrect = dropElement.getAttribute('onCorrect');\n    if (onCorrect) {\n      await executeActions(onCorrect, dropElement, dragElement);\n    }\n  } else {\n    const onInCorrect = dropElement.getAttribute('onInCorrect');\n\n    await executeActions(onInCorrect, dropElement, dragElement);\n\n    // showWrongAnswerAnimation([dropElement, dragElement]);\n  }\n  storingEachActivityScore(isCorrect);\n  await onActivityComplete(dragElement, dropElement);\n}\n\n// Function to execute actions parsed from the onMatch string\nconst executeActions = async (actionsString: string, thisElement: HTMLElement, element?: HTMLElement): Promise<void> => {\n  const actions = parseActions(actionsString);\n\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i];\n    const targetElement = action.actor === 'this' ? thisElement : action.actor === 'element' ? element : document.getElementById(action.actor);\n\n    if (targetElement) {\n      // Handle the 'transform' property separately\n      switch (action.action) {\n        case 'transform': {\n          const currentTransform = window.getComputedStyle(targetElement).transform;\n          targetElement.style.transform = currentTransform !== 'none' ? `${currentTransform} ${action.value}` : action.value;\n          break;\n        }\n        case 'alignMatch': {\n          const dropElement = targetElement;\n          const dragElement = element;\n\n          const container = document.getElementById('lido-container');\n          const containerScale = getElementScale(container);\n          const containerRect = container.getBoundingClientRect();\n          const dropRect = dropElement.getBoundingClientRect();\n\n          const scaledLeft = (dropRect.left - containerRect.left) / containerScale;\n          const scaledTop = (dropRect.top - containerRect.top) / containerScale;\n\n          dragElement.style.position = 'fixed';\n          dragElement.style.left = `${scaledLeft}px`;\n          dragElement.style.top = `${scaledTop}px`;\n          dragElement.style.transform = `translate(0px, 0px)`;\n          break;\n        }\n        case 'addClass': {\n          targetElement.classList.add(action.value);\n          break;\n        }\n        case 'speak': {\n          {\n            let audioUrl = targetElement.getAttribute('audio');\n            if (audioUrl) {\n              audioUrl = convertUrlToRelative(audioUrl);\n              let audioElement = document.getElementById('audio') as HTMLAudioElement;\n              if (!audioElement) {\n                const newAudio = document.createElement('audio');\n                newAudio.id = 'audio';\n                document.body.appendChild(newAudio);\n                audioElement = newAudio;\n              }\n\n              audioElement.pause();\n              audioElement.currentTime = 0;\n              audioElement.src = audioUrl;\n              console.log('🚀 ~ executeActions ~ audioElement.src:', audioElement.src);\n\n              try {\n                await audioElement.play();\n                highlightSpeakingElement(targetElement);\n                while (!audioElement.ended || audioElement.error) {\n                  await new Promise(resolve => setTimeout(resolve, 100));\n                }\n                stopHighlightForSpeakingElement(targetElement);\n              } catch (error) {\n                console.log('🚀 ~ executeActions ~ audioElement.src: error', error);\n              }\n            }\n            break;\n          }\n        }\n\n        case 'sleep': {\n          const isNumber = !isNaN(Number(action.value));\n          if (isNumber) {\n            await new Promise(resolve => setTimeout(resolve, Number(action.value)));\n          }\n          break;\n        }\n\n        default: {\n          targetElement.style[action.action] = action.value;\n          break;\n        }\n      }\n    }\n  }\n};\n\n// Function to parse actions string\nconst parseActions = (input: string): Array<{ actor: string; action: string; value: string }> => {\n  const actions = [];\n  if (!input) return actions;\n  const actionStrings = input.split(';')?.map(action => action.trim());\n\n  actionStrings.forEach(actionString => {\n    if (actionString) {\n      const [actorAction, value] = actionString.split('=').map(part => part.trim());\n      const lastDotIndex = actorAction.lastIndexOf('.');\n      if (lastDotIndex !== -1) {\n        const actor = actorAction.substring(0, lastDotIndex).trim();\n        const action = actorAction.substring(lastDotIndex + 1).trim();\n        actions.push({ actor, action, value: value.replace(/['\"]/g, '') });\n      }\n    }\n  });\n\n  return actions;\n};\n\nconst matchStringPattern = (pattern: string, arr: string[]): boolean => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let arrIndex = 0;\n  let options = new Set<string>();\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      // Inside parentheses: '|' acts like \"OR\" condition\n      const choices = group\n        .slice(1, -1)\n        .split('|')\n        .map(option => option.trim());\n\n      if (arrIndex >= arr.length) return false;\n\n      if (!choices.includes(arr[arrIndex])) return false;\n\n      arrIndex++;\n    } else if (group.includes('|')) {\n      // Outside parentheses: '|' acts as optional order\n      const choices = group.split('|').map(option => option.trim());\n\n      for (const choice of choices) {\n        options.add(choice);\n      }\n    } else {\n      // Exact match required\n      if (arrIndex >= arr.length || arr[arrIndex] !== group) return false;\n\n      arrIndex++;\n    }\n  }\n\n  // Validate the optional ordered items against the remaining array elements\n  while (arrIndex < arr.length) {\n    if (!options.has(arr[arrIndex])) {\n      return false;\n    }\n    options.delete(arr[arrIndex]);\n    arrIndex++;\n  }\n\n  return arrIndex === arr.length;\n};\n\nconst countPatternWords = (pattern: string): number => {\n  const patternGroups = pattern.split(',').map(group => group.trim());\n\n  let wordCount = 0;\n\n  for (const group of patternGroups) {\n    if (group.startsWith('(') && group.endsWith(')')) {\n      wordCount += 1;\n    } else {\n      wordCount += group.split('|').length;\n    }\n  }\n\n  return wordCount;\n};\n\nasync function onActivityComplete(dragElement?: HTMLElement, dropElement?: HTMLElement) {\n  const container = document.getElementById('lido-container');\n  if (!container) return;\n\n  const isAllowOnlyCorrect = container.getAttribute('isAllowOnlyCorrect') === 'true';\n  if (isAllowOnlyCorrect) {\n    const isCorrect = matchStringPattern(dropElement['value'], [dragElement['value']]);\n    if (!isCorrect) {\n      dragElement.style.transform = 'translate(0,0)';\n      return;\n    }\n  }\n\n  await executeActions(\"this.alignMatch='true'\", dropElement, dragElement);\n\n  let dragScore = JSON.parse(localStorage.getItem(DragSelectedMapKey) ?? '{}');\n  if (!dragScore[dropElement.getAttribute('tabindex')]) {\n    dragScore[dropElement.getAttribute('tabindex')] = [];\n  }\n\n  // dragScore[mostOverlappedElement.getAttribute('tabindex')].push(element['value']);\n  dragScore[dropElement.getAttribute('tabindex')] = [dragElement['value']];\n\n  localStorage.setItem(DragSelectedMapKey, JSON.stringify(dragScore));\n  const sortedKeys = Object.keys(dragScore).sort((a, b) => parseInt(a) - parseInt(b));\n  const sortedValues = sortedKeys.reduce((acc, key) => acc.concat(dragScore[key]), []);\n  localStorage.setItem(SelectedValuesKey, JSON.stringify(sortedValues));\n\n  handleShowCheck();\n}\n\nconst storingEachActivityScore = (flag: boolean) => {\n  if (flag) {\n    gameScore.rightMoves += 1;\n  } else {\n    gameScore.wrongMoves += 1;\n  }\n  console.log('Right Moves : ', gameScore.rightMoves);\n  console.log('Wrong Moves : ', gameScore.wrongMoves);\n};\n\nconst calculateScore = () => {\n  const rightMoves = gameScore.rightMoves;\n  const wrongMoves = gameScore.wrongMoves;\n  let finalScore = Math.floor((rightMoves / (rightMoves + wrongMoves)) * 100);\n  storeActivityScore(finalScore);\n  gameScore.rightMoves = 0;\n  gameScore.wrongMoves = 0;\n};\n\nconst storeActivityScore = (score: number) => {\n  const appHome = document.querySelector('lido-home');\n  if (!appHome) return;\n  const index = Number(appHome.getAttribute('index') ?? 0);\n  const totalIndex = Number(appHome.getAttribute('totalIndex') ?? 0);\n\n  const activityScore = JSON.parse(localStorage.getItem(ActivityScoreKey) ?? '{}');\n  const activityScoreKey = index.toString();\n  activityScore[activityScoreKey] = score;\n\n  //send Custom Event to parent\n  // window.dispatchEvent(new CustomEvent(ActivityEndKey, { detail: { index: index, totalIndex: totalIndex, score: score } }));\n  dispatchActivityEndEvent(index, totalIndex, score);\n\n  localStorage.setItem(ActivityScoreKey, JSON.stringify(activityScore));\n  if (totalIndex - 1 == index) {\n    const scoresArray: number[] = Object.values(activityScore);\n    const finalScore = scoresArray.reduce((acc, cur) => acc + cur, 0) / scoresArray.length;\n    gameScore.finalScore = Math.floor(finalScore);\n    console.log('Total Score : ', gameScore.finalScore);\n    // window.dispatchEvent(new CustomEvent(LessonEndKey, { detail: { score: finalScore } }));\n    dispatchLessonEndEvent(finalScore);\n    localStorage.removeItem(ActivityScoreKey);\n  }\n};\n\nconst handleShowCheck = () => {\n  const container = document.getElementById('lido-container');\n  const objectiveString = container['objective'];\n  const selectValues = JSON.parse(localStorage.getItem(SelectedValuesKey) ?? '[]');\n\n  const checkButton = document.getElementById('lido-checkButton');\n\n  if (!selectValues || selectValues.length !== countPatternWords(objectiveString)) {\n    executeActions(\"this.addClass='disable-check-button'\", checkButton);\n    return;\n  }\n\n  const showCheck = container.getAttribute('showCheck') == 'true';\n\n  if (showCheck) {\n    checkButton.classList.remove('lido-disable-check-button');\n  } else {\n    validateObjectiveStatus();\n  }\n};\n\nconst validateObjectiveStatus = async () => {\n  const container = document.getElementById('lido-container');\n  if (!container) return;\n  const objectiveString = container['objective'];\n  const objectiveArray = JSON.parse(localStorage.getItem(SelectedValuesKey) ?? '[]');\n  const res = matchStringPattern(objectiveString, objectiveArray);\n\n  if (res) {\n    appendingDragElementsInDrop();\n    const onCorrect = container.getAttribute('onCorrect');\n    if (onCorrect) {\n      await executeActions(onCorrect, container);\n    }\n    triggerNextContainer();\n  } else {\n    const onInCorrect = container.getAttribute('onInCorrect');\n    await executeActions(onInCorrect, container);\n    const isContinueOnCorrect = container.getAttribute('isContinueOnCorrect') === 'true';\n    if (!isContinueOnCorrect) {\n      triggerNextContainer();\n    }\n  }\n  await calculateScore();\n};\n\nconst appendingDragElementsInDrop = () => {\n  const dragItems = document.querySelectorAll(\"[type='drag']\");\n  const dropItems = document.querySelectorAll(\"[type='drop']\");\n  if (!dragItems || !dropItems) return;\n  dropItems.forEach(drop => {\n    dragItems.forEach(dragElement => {\n      const drag = dragElement as HTMLElement;\n      if (drag['value'] === drop['value']) {\n        drag.style.position = 'unset';\n        drop.appendChild(drag);\n      }\n    });\n  });\n};\n\nexport const triggerNextContainer = () => {\n  // const event = new CustomEvent('nextContainer');\n  console.log('🚀 ~ triggerNextContainer ~ event:', event);\n  // window.dispatchEvent(event);\n  dispatchNextContainerEvent();\n};\n\nexport const initEventsForElement = async (element: HTMLElement, type: string) => {\n  const container = document.getElementById('lido-container');\n  if (!container) return;\n  const canplay = container.getAttribute('canplay');\n  if (canplay != null && canplay === 'false') return;\n  switch (type) {\n    case 'drag': {\n      enableDraggingWithScaling(element);\n      break;\n    }\n    case 'click': {\n      addClickListenerForClickType(element);\n      break;\n    }\n    case 'drop': {\n      handleDropElement(element);\n      break;\n    }\n    case 'slide': {\n      slidingWithScaling(element);\n      break;\n    }\n    default:\n      break;\n  }\n  const onEntry = element.getAttribute('onEntry');\n  await executeActions(onEntry, element);\n\n  onTouchListenerForOnTouch(element);\n};\n\nfunction onTouchListenerForOnTouch(element: HTMLElement) {\n  if (!element) return;\n  const onTouch = element.getAttribute('onTouch');\n  if (!onTouch) return;\n  element.onclick = async () => {\n    console.log('🚀 ~ element.onclick= ~ onTouch:', onTouch);\n    if (!onTouch) return;\n    await executeActions(onTouch, element);\n  };\n}\n\nfunction addClickListenerForClickType(element: HTMLElement): void {\n  element.style.cursor = 'pointer';\n  if (!element) {\n    console.error('No element provided.');\n    return;\n  }\n\n  const onClick = async () => {\n    const container = document.getElementById('lido-container');\n    if (element.getAttribute('id') == 'lido-checkButton') {\n      validateObjectiveStatus();\n      return;\n    }\n\n    localStorage.setItem(SelectedValuesKey, JSON.stringify([element['value']]));\n    element.style.border = '2px solid yellow';\n    element.style.boxShadow = '0px 0px 10px rgba(255, 255, 0, 0.7)';\n\n    element.style.transition = 'transform 0.2s ease, border 0.5s ease';\n    element.style.transform = 'scale(1.1)';\n\n    element.style.transform = 'scale(1)';\n    element.style.border = '';\n    element.style.boxShadow = '';\n\n    const objective = container['objective'];\n\n    const isCorrect = matchStringPattern(objective, [element['value']]);\n    dispatchClickEvent(element, isCorrect);\n    if (isCorrect) {\n      const onCorrect = element.getAttribute('onCorrect');\n      await executeActions(onCorrect, element);\n    } else {\n      const onInCorrect = element.getAttribute('onInCorrect');\n      await executeActions(onInCorrect, element);\n\n      // showWrongAnswerAnimation([element]);\n    }\n    storingEachActivityScore(isCorrect);\n    handleShowCheck();\n  };\n  element.addEventListener('click', onClick);\n}\n\nexport function showWrongAnswerAnimation(elements: HTMLElement[]): void {\n  const styleId = 'wrong-answer-animation-style';\n\n  executeActions(\"tryAgain.speak='true'\", document.getElementById('tryAgain'));\n\n  // Check if the style is already added, if not, add it\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n          @keyframes enhanced-shake {\n              0% { left: 0; }\n              10% { left: -8px; }\n              20% { left: 8px; }\n              30% { left: -8px; }\n              40% { left: 8px; }\n              50% { left: -6px; }\n              60% { left: 6px; }\n              70% { left: -4px; }\n              80% { left: 4px; }\n              90% { left: -2px; }\n              100% { left: 0; }\n          }\n\n          \n          .wrong-answer {\n              position: relative; /* Enable relative positioning to move the element */\n              animation: enhanced-shake 0.6s cubic-bezier(0.36, 0.07, 0.19, 0.97);\n              background-color: #ffdddd; /* Flash red background to indicate wrong answer */\n              box-shadow: 0 0 10px rgba(255, 0, 0, 0.5); /* Subtle red shadow */\n\n              border: 4px solid red;\n          }\n\n          \n      `;\n\n    document.head.appendChild(style);\n  }\n\n  elements.forEach(element => {\n    // Add the class to trigger the animation\n    element.classList.add('wrong-answer');\n\n    // Remove the class after the animation ends to reset the element\n    element.addEventListener(\n      'animationend',\n      () => {\n        element.classList.remove('wrong-answer');\n      },\n      { once: true },\n    );\n  });\n}\n\nfunction handleDropElement(element: HTMLElement): void {\n  element.onclick = () => {\n    onClickDropOrDragElement(element, 'drop');\n  };\n}\n\nasync function onClickDropOrDragElement(element: HTMLElement, type: 'drop' | 'drag'): Promise<void> {\n  // Remove the highlight class from elements matching the selector\n  const highlightedElements = document.querySelectorAll(`[type='${type}']`);\n\n  highlightedElements.forEach(el => {\n    removeHighlight(el as HTMLElement);\n  });\n\n  // Dynamically create the highlight class if it doesn't exist\n  if (!document.getElementById('dynamic-highlight-style')) {\n    const style = document.createElement('style');\n    style.id = 'dynamic-highlight-style';\n    style.innerHTML = `\n      .highlight {\n        border: 4px solid #e74c3c; /* Thicker red border for more visibility */\n        border-radius: 12px; /* Larger rounded corners */\n        background-color: rgba(231, 76, 60, 0.3); /* Stronger, more noticeable background */\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2), 0 12px 40px rgba(0, 0, 0, 0.2); /* Stronger shadow */\n        outline: 4px solid rgba(231, 76, 60, 0.6); /* Glow effect */\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  element?.classList.add('highlight');\n  element.ariaPressed = 'true';\n\n  const selectedDropElement: HTMLElement = type === 'drop' ? element : document.querySelector(\"[type='drop'].highlight\");\n  const selectedDragElement: HTMLElement = type === 'drag' ? element : document.querySelector(\"[type='drag'].highlight\");\n\n  if (selectedDropElement && selectedDragElement) {\n    // Add a transition for a smooth, slower movement\n    (selectedDragElement as HTMLElement).style.transition = 'transform 0.5s ease'; // 0.5s for a slower move\n\n    // Reset the transform of the drag element before calculating the new position\n    (selectedDragElement as HTMLElement).style.transform = '';\n    const container = document.getElementById('lido-container');\n\n    const containerScale = getElementScale(container);\n    console.log('🚀 ~ onClickDropOrDragElement ~ containerScale:', containerScale);\n\n    // Get the positions of the drop and drag elements\n    const dropRect = selectedDropElement.getBoundingClientRect();\n    const dragRect = selectedDragElement.getBoundingClientRect();\n\n    // Calculate the difference in positions\n    const translateX = (dropRect.left - dragRect.left) / containerScale;\n    const translateY = (dropRect.top - dragRect.top) / containerScale;\n\n    // Move the drag element to the drop position\n    selectedDragElement.style.transform = `translate(${translateX}px, ${translateY}px)`;\n\n    // Remove highlights after moving the element\n    const allElements = document.querySelectorAll(`*`);\n    allElements.forEach(el => {\n      removeHighlight(el as HTMLElement);\n    });\n\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await onElementDropComplete(selectedDragElement, selectedDropElement);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    selectedDragElement.style.transform = 'translate(0px, 0px)';\n  }\n}\n\nfunction removeHighlight(element: HTMLElement): void {\n  element.classList.remove('highlight');\n  element.ariaPressed = 'false';\n}\n\n// Function to highlight the speaking element\nfunction highlightSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Add a custom class for highlighting\n  element.classList.add('speaking-highlight');\n\n  // Inject keyframe animation and class styles into the document's head if it doesn't already exist\n  const styleId = 'speaking-highlight-style';\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.innerHTML = `\n      .speaking-highlight {\n        box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9); /* Stronger orange glow effect */\n        border: 3px solid orange;\n        transition: box-shadow 0.5s ease-in-out, transform 0.5s ease-in-out;\n        transform: scale(1.05); /* Subtle scale effect to pop the element */\n        animation: pulseEffect 1.5s infinite; /* Pulsing animation */\n      }\n\n      @keyframes pulseEffect {\n        0% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n        50% {\n          box-shadow: 0 0 30px 15px rgba(255, 165, 0, 1);\n          transform: scale(1.1);\n        }\n        100% {\n          box-shadow: 0 0 20px 10px rgba(255, 165, 0, 0.9);\n          transform: scale(1.05);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n}\n\n// Function to stop highlighting\nfunction stopHighlightForSpeakingElement(element: HTMLElement): void {\n  if (!element) return;\n\n  // Remove the custom class for highlighting\n  element.classList.remove('speaking-highlight');\n\n  // Remove inline styles\n  element.style.boxShadow = '';\n  element.style.border = '';\n}\n\nexport function convertUrlToRelative(url: string): string {\n  //check if url is web\n  if (url.startsWith('http')) {\n    return url;\n  }\n  const container = document.getElementById('lido-container');\n  if (!container) return url;\n  const baseUrl = container.getAttribute('baseUrl');\n  if (!baseUrl) return url;\n  return baseUrl + url;\n}\n"],"mappings":"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","ignoreList":[]}
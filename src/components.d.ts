/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * @component LidoAvatar
     * The `LidoAvatar` component is a customizable avatar that integrates with Rive animations.
     * It allows for configurable properties such as size, position, visibility, background color,
     * and event handlers. The component supports accessibility attributes and can trigger various
     * events based on user interactions.
     * This component initializes and manages a Rive animation inside a canvas element.
     */
    interface LidoAvatar {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio": string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * The unique identifier for the column component.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch": string;
        /**
          * Source URL of the Rive (.riv) file
         */
        "src": string;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type": string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value": string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible": boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z": string;
    }
    interface LidoBalance {
        /**
          * Balance symbol shown when `showSymbol` is true. Default: "=".
         */
        "balanceSymbol": string;
        /**
          * Fill color applied to all loaded SVGs (pivot, scale, handler). Defaults to "brown".
         */
        "fill": string;
        /**
          * URL of the handler (side stands / hooks) image for the balance.
         */
        "handlerimage": string;
        /**
          * CSS height of the component (responsive values allowed). Default: "auto".
         */
        "height": string;
        "hideSymbol": () => Promise<void>;
        /**
          * CSS margin applied to the outer container.
         */
        "margin": string;
        /**
          * Maximum allowed tilt angle (in degrees) for the balance bar.
         */
        "maxTilt": number;
        /**
          * Action(s) to execute when the component enters the DOM. Example: trigger animations or audio cues.
         */
        "onEntry": string;
        /**
          * Operation type used to calculate balance values. Supported: "count", "add", "subtract", etc.
         */
        "operation": string;
        /**
          * CSS padding applied to the outer container.
         */
        "padding": string;
        /**
          * URL of the pivot (base stand) image used in the balance visualization.
         */
        "pivotimage": string;
        "revealSymbol": () => Promise<void>;
        /**
          * URL of the scale (bar) image that tilts based on the weight difference.
         */
        "scaleimage": string;
        /**
          * Whether the balance symbol is currently displayed. Can be toggled with `revealSymbol()` and `hideSymbol()`.
         */
        "showSymbol": boolean;
        /**
          * Initial tilt value of the balance. Negative = tilts left, Positive = tilts right.
         */
        "tilt": number;
        "updateTilt": (leftVal: number, rightVal: number) => Promise<void>;
        /**
          * Controls component visibility. Accepts boolean (`true`/`false`) or string ("true"/"false").
         */
        "visible": boolean | string;
        /**
          * CSS width of the component (responsive values allowed). Default: "auto".
         */
        "width": string;
        /**
          * Horizontal (X-axis) offset for positioning the component. Default: "0px".
         */
        "x": string;
        /**
          * Vertical (Y-axis) offset for positioning the component. Default: "0px".
         */
        "y": string;
        /**
          * Z-index for stacking order of the component. Default: "0".
         */
        "z": string;
    }
    interface LidoCalculator {
        /**
          * Background color for the calculator container
         */
        "bgColor": string;
        /**
          * Height of the calculator component (default: '711px')
         */
        "height": string;
        /**
          * Objective or identifier for activity-based logic or validation
         */
        "objective": string;
        /**
          * Code or actions to execute when the component is first rendered
         */
        "onEntry": string;
        /**
          * Icon URL for the pen image shown on the calculator UI
         */
        "penIcon": string;
        /**
          * Controls component visibility. Accepts boolean (`true`/`false`) or string ("true"/"false").
         */
        "visible": boolean | string;
        /**
          * Width of the calculator component (default: '479px')
         */
        "width": string;
        /**
          * X-position of the calculator (can be px, %, etc.)
         */
        "x": string;
        /**
          * Y-position of the calculator (can be px, %, etc.)
         */
        "y": string;
    }
    /**
     * @component LidoCell
     * A flexible UI cell component configurable via props like size, position, visibility,
     * background, and events. Supports layout flows (`wrap`, `flex`, `row`, `col`, `pos`, `random`), accessibility,
     * audio, and dynamic child management for rich interactive content.
     */
    interface LidoCell {
        /**
          * CSS align-items property to control the alignment of flex items. Example: 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'.
         */
        "alignItems": string;
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio": string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius": string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength": number;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * CSS flex direction for the component, which can be used to control the layout of child elements. Accepts values like 'row', 'column', etc.
         */
        "flexDirection": string;
        /**
          * The gap between child elements inside the column (CSS value, e.g., '10px', '5px 10px'). This is applicable when the layout is set to `wrap` or `flex`.
         */
        "gap": string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * The unique identifier for the column component.
         */
        "id": string;
        /**
          * Determines the layout behavior of the component's children.  - `wrap`: Applies a grid layout to the children, allowing them to wrap automatically in a grid format. - `flex`: Applies a flex layout with wrapping behavior (`flex-wrap`). - `col`: Arranges children in a single column using a vertical flex direction. - `row`: Arranges children in a single row using a horizontal flex direction. - `pos`: Applies absolute positioning to children, allowing manual placement using `x` and `y` values. - `random`: Positions child elements randomly within the container using absolute positioning.  Default: `'wrap'`
         */
        "layout": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch": string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding": string;
        /**
          * Defines the width of the scrollbar within the cell (e.g., '14px'). Defaults to '0px' if not specified, effectively hiding the scrollbar.
         */
        "scrollbarWidth": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon": boolean;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type": string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value": string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible": string;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z": string;
    }
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface LidoCol {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio": string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The border image of the column (CSS border-image value, e.g., 'url(border.png)', 'linear-gradient(red, blue)').
         */
        "borderImage"?: string;
        /**
          * Applies a CSS box-shadow to the component. Accepts any valid CSS box-shadow value. Example: "0px 4px 10px rgba(0, 0, 0, 0.1)"
         */
        "boxShadow"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength": number;
        /**
          * Specifies the direction of the component, which determines the layout or flow of elements.
         */
        "direction": string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * The unique identifier for the column component.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon": boolean;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type": string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value": string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible": boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z": string;
    }
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface LidoContainer {
        /**
          * Enables appending the dragged element to the drop target after all correct drops are completed.
         */
        "appendToDropOnCompletion": boolean;
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the container.
         */
        "audio": string;
        /**
          * Base URL for the container.
         */
        "baseUrl": string;
        /**
          * Background color of the container (CSS color value).
         */
        "bgColor": string;
        /**
          * The background image URL to be applied to the entire body.
         */
        "bgImage": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * Custom CSS styles to be applied to the container. Allows for dynamic styling through inline styles or class names.
         */
        "customStyle": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl": string;
        /**
          * The height of the container (CSS value).
         */
        "height": string;
        /**
          * Unique identifier for the container.
         */
        "id": string;
        /**
          * Determines if the activity should proceed automatically only after a correct response. Acceptable values: "true" or "false". Defaults to "false".
         */
        "isAllowOnlyCorrect": boolean;
        /**
          * Specifies whether the activity should continue automatically upon a correct response. Expected values: "true" or "false".
         */
        "isContinueOnCorrect": boolean;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl": string;
        /**
          * Objective or purpose of the container. Can be used for internal logic or tracking.
         */
        "objective": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the container is entered, useful for triggering animations or logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the container is touched or clicked.
         */
        "onTouch": string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl": string;
        /**
          * Indicates whether the "Check" button should be visible or not. Expected values: "true" or "false".
         */
        "showCheck": boolean;
        /**
          * Controls whether the drop zone displays a border; true shows the border, false hides it.
         */
        "showDropBorder": boolean;
        /**
          * Indicates whether the next button should be displayed. Expected values: "true" or "false".
         */
        "showNextButton": string;
        /**
          * Indicates whether the previous button should be displayed. Expected values: "true" or "false".
         */
        "showPrevButton": string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl": string;
        /**
          * TabIndex for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Type of the container, which can be used for conditional logic or styling purposes.
         */
        "type": string;
        /**
          * Value assigned to the container. This can be used for logic related to this component.
         */
        "value": string;
        /**
          * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the container (CSS value).
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the container.
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the container.
         */
        "y": string;
        /**
          * Z-index to control the stacking order of the container.
         */
        "z": string;
    }
    interface LidoFlashCard {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio": string;
        /**
          * Content (any markup) shown on the back face.
         */
        "back": any;
        /**
          * Background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "direction": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * The Display CSS property.
         */
        "display"?: string;
        /**
          * Whether the card is flipped (back side visible). `mutable` lets the component toggle itself on click; `reflect` keeps the `<lido-flash-card flipped>` attribute in sync.
         */
        "flipped": boolean;
        /**
          * Content (any markup) shown on the front face.
         */
        "front": any;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the column is entered, useful for triggering animations or logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type": string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value": string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible": boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the column within its container (CSS value, e.g., '10px', '5%').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the column within its container (CSS value, e.g., '10px', '5%').
         */
        "y": string;
        /**
          * Z-index for stacking order of the column relative to other elements.
         */
        "z": string;
    }
    interface LidoFloat {
        /**
          * The background color of the float element (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * Direction of the float element's movement (e.g., 'leftToRight', 'bottomToTop'). This can be used to control the animation or positioning of the float elements.
         */
        "floatDirection": string;
        /**
          * The height of the float element (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the text element.
         */
        "id": string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the component, which can be used for conditional logic or styling purposes.
         */
        "type": string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the float element (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface LidoHome {
        /**
          * URL for the avatar Rive file.
         */
        "avatarUrl": string;
        /**
          * Base URL for the containers.
         */
        "baseUrl": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl": string;
        /**
          * The height of the container (CSS value).
         */
        "height": string;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex": number;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl": string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl": string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl": string;
        /**
          * Unique identifier for the component instance. If not provided, a UUID is generated to ensure uniqueness.
         */
        "uuid": string;
        /**
          * XML data passed to the component, which is parsed and used to render various containers.
         */
        "xmlData": string;
    }
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface LidoImage {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the image.
         */
        "audio": string;
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * CSS filter to apply visual effects (e.g., blur, brightness) to the image. Example: 'blur(5px)', 'brightness(0.8)', 'grayscale(100%)'
         */
        "filter": string;
        /**
          * The height of the image component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the text element.
         */
        "id": string;
        /**
          * Enables border-image slice support when true; otherwise, behaves as a regular image component
         */
        "isSlice": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the image is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the image is touched or clicked.
         */
        "onTouch": string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon": boolean;
        /**
          * Specifies the width for border-image slice (e.g., "30px", "2em"). Only used when `isSlice` is enabled.
         */
        "sliceWidth": string;
        /**
          * The source URL of the image to be displayed.
         */
        "src": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * CSS transform property to apply transformations like rotate, scale, translate, etc. Example: 'rotate(45deg)' or 'scale(1.2)'.
         */
        "transform": string;
        /**
          * Defines the type of the image component, which can be used for conditional logic or styling purposes.
         */
        "type": string;
        /**
          * The value associated with the image. Typically used for internal logic or identification.
         */
        "value": string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible": boolean | string;
        /**
          * The width of the image component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z": string;
    }
    interface LidoKeyboard {
        /**
          * Background color for each key button
         */
        "bgColor": string;
        /**
          * Border radius for key buttons (e.g., "8px")
         */
        "borderRadius": string;
        /**
          * Number of columns in the keyboard layout (default: "10")
         */
        "columns": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * Font color for key labels (e.g., "#333")
         */
        "fontColor"?: string;
        /**
          * Font family for key labels (e.g., "Arial, sans-serif")
         */
        "fontFamily"?: string;
        /**
          * Font size for key labels (e.g., "16px")
         */
        "fontSize"?: string;
        /**
          * Gap between key buttons (default: "10px")
         */
        "gap": string;
        /**
          * Height of each key button (e.g., "40px")
         */
        "height"?: string;
        /**
          * Indicates whether the keyboard input is enabled. When set to `true`, the component will respond to keyboard events.
         */
        "keyboardInput": boolean;
        /**
          * Comma-separated list of keys, optionally with status (e.g., "A,B-disable,C")
         */
        "keys": string;
        /**
          * Total number of letters required for completion
         */
        "letterLength": number;
        /**
          * Margin around the keyboard container
         */
        "margin"?: string;
        /**
          * Custom callback function when a key is entered
         */
        "onEntry"?: string;
        /**
          * Padding inside the keyboard container
         */
        "padding"?: string;
        /**
          * Type of key interaction (e.g., "click", "drag")
         */
        "type"?: string;
        /**
          * Whether the keyboard is visible ("true" / "false")
         */
        "visible"?: string;
        /**
          * Width of each key button (e.g., "40px")
         */
        "width"?: string;
        /**
          * X position (left) of the keyboard
         */
        "x"?: string;
        /**
          * Y position (top) of the keyboard
         */
        "y"?: string;
        /**
          * Z-index for stacking order
         */
        "z"?: string;
    }
    interface LidoMathMatrix {
        /**
          * Background color for active slots
         */
        "activeBgColor": string;
        /**
          * If true, only active slots are visible; inactive ones are hidden
         */
        "activeOnlyVisible": boolean;
        /**
          * Border style applied to each slot
         */
        "border": string;
        /**
          * Border radius for each slot
         */
        "borderRadius": string;
        /**
          * Show row index numbers on the bottom side
         */
        "bottomIndex": boolean;
        /**
          * Enable/disable click interactions on the slots
         */
        "clickable": boolean;
        /**
          * Number of columns in the matrix
         */
        "cols": number;
        /**
          * Number of slots to pre-fill as active by default
         */
        "defualtFill": number;
        /**
          * Height of the slot container
         */
        "height": string;
        /**
          * Background color for inactive slots
         */
        "inactiveBgColor": string;
        /**
          * Show row index numbers on the left side
         */
        "leftIndex": boolean;
        /**
          * Margin around the matrix container
         */
        "margin": string;
        /**
          * Image source used inside the slots
         */
        "matrixImage": string;
        /**
          * Padding inside the matrix container
         */
        "padding": string;
        /**
          * Number of rows in the matrix
         */
        "rows": number;
        /**
          * Show column index numbers on the top side
         */
        "topIndex": boolean;
        /**
          * Controls visibility of the matrix (string "true" or "false")
         */
        "visible": string;
        /**
          * Width of the slot container
         */
        "width": string;
        /**
          * Z-index value for the matrix container
         */
        "z": string;
    }
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface LidoPos {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio": string;
        /**
          * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the positional element.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the component is entered, often used to trigger animations or custom logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch": string;
        /**
          * Tab index to support keyboard navigation within the component.
         */
        "tabIndex": number;
        /**
          * The type of the component, used for conditional logic or specific styles.
         */
        "type": string;
        /**
          * Value assigned to the component, often used for internal logic or data tracking.
         */
        "value": string;
        /**
          * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).
         */
        "visible": boolean | string;
        /**
          * The width of the component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the element relative to others.
         */
        "z": string;
    }
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface LidoRandom {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio": string;
        /**
          * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the container (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the random container.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon": boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * The type of the component, used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the component, often used for internal logic.
         */
        "value": string;
        /**
          * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the container (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the container relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface LidoRoot {
        /**
          * Base URL for the containers.
         */
        "baseUrl": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl": string;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex": number;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl": string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl": string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl": string;
        /**
          * Prop to hold the XML file path or URL. This can be a relative path or an external URL.
         */
        "xmlPath": string;
    }
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface LidoRow {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the row.
         */
        "audio": string;
        /**
          * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength": number;
        /**
          * Specifies the direction of the component, which determines the layout or flow of elements.
         */
        "direction": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * Sets the CSS display property for the component. Accepts any valid CSS display value (e.g., 'block', 'flex', 'grid', 'none').
         */
        "display"?: string;
        /**
          * The height of the row (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the row is entered, often used for triggering animations or custom logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the row is touched or clicked.
         */
        "onTouch": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon": boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the row, used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the row, typically used for internal logic or data.
         */
        "value": string;
        /**
          * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the row (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the row relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface LidoShape {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the shape.
         */
        "audio": string;
        /**
          * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue'). This is ignored for polygons.
         */
        "bgColor": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * The height of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "height": string;
        /**
          * Unique identifier for the shape element.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the shape is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the shape is touched or clicked.
         */
        "onTouch": string;
        /**
          * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').
         */
        "shapeType": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the shape, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the shape, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the shape relative to other elements.
         */
        "z": string;
    }
    interface LidoSlideFill {
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * Number of divisions or segments to split the ruler path into
         */
        "division": number;
        /**
          * Fill amount to display inside the SVG rect. Accepts values like "30%" or "30" (treated as percentage of fill)
         */
        "fill": string;
        /**
          * Determines the direction in which the rect fill should grow: - 'vertical': from bottom to top - 'horizontal': from left to right
         */
        "fillDirection": string;
        /**
          * CSS height of the component (e.g., "300px", "100%")
         */
        "height": string;
        /**
          * Unique identifier for the component instance
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * Maximum value shown on the ruler (used for number generation)
         */
        "max": number;
        /**
          * Minimum value shown on the ruler (used for number generation)
         */
        "min": number;
        /**
          * Type of number to be displayed on the ruler. Can be 'integer', 'decimal', or 'fraction'.
         */
        "numberType": string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding": string;
        /**
          * Enables slider interaction (currently unused in logic, can be used to toggle slider UI)
         */
        "slider": boolean;
        /**
          * URL or relative path to the external SVG file to be fetched and rendered
         */
        "src": string;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible": boolean | string;
        /**
          * CSS width of the component (e.g., "300px", "100%")
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface LidoText {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio": string;
        /**
          * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The border image of the column (CSS border-image value, e.g., 'url(border.png)', 'linear-gradient(red, blue)').
         */
        "borderImage"?: string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * Font color for the text (CSS color value, e.g., '#000000', 'red').
         */
        "fontColor": string;
        /**
          * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').
         */
        "fontFamily": string;
        /**
          * Font size for the text (CSS value, e.g., '16px', '1.5em').
         */
        "fontSize": string;
        /**
          * Height of the text component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * When set to `true`, the text will highlight while being spoken, typically used for accessibility.
         */
        "highlightWhileSpeaking": boolean;
        /**
          * Unique identifier for the text element.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the text component is touched or clicked.
         */
        "onTouch": string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon": boolean;
        /**
          * Indicates whether to wrap each letter or each word of the text in a span element. This can be useful for animations or styling individual letters.
         */
        "spanType": 'letters' | 'words' | '';
        /**
          * The string of text to be displayed in the component.
         */
        "string": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible": boolean | string;
        /**
          * Width of the text component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z": string;
    }
    interface LidoTrace {
        /**
          * Indicates whether to play an animation trace when the SVG is completed.
         */
        "animationTrace": boolean;
        /**
          * Controls visibility for assistive technologies. If `"true"`, the component is hidden from screen readers.
         */
        "ariaHidden": string;
        /**
          * Accessible label for screen readers, providing a textual description of the component's purpose.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio": string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible": string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * URL for the finger hint image
         */
        "fingerHintUrl": string;
        /**
          * Specifies the height of the component container, accepts any valid CSS height value (e.g., `"100px"`, `"50%"`).
         */
        "height": string;
        /**
          * Indicates whether to highlight the text associated with the SVG when the trace is completed.
         */
        "highlightTextId": string;
        /**
          * Unique identifier for this `lido-trace` component instance.
         */
        "id": string;
        /**
          * Mode for the tracing interaction, defining how users interact with the SVG paths. Options may include `"noFlow"`, `"showFlow"`, `"freeTrace"`, `"blindTracing"`, and `"blindFreeTrace"`
         */
        "mode": string;
        /**
          * Event handler for a Correct Trace, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler for an Incorrect Trace, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon": boolean;
        /**
          * Source URL or path for the SVG file used in this component.
         */
        "svgSource": string;
        /**
          * Sets the tab order of the component within the page, enabling keyboard navigation.
         */
        "tabIndex": number;
        /**
          * A custom string value associated with the component for additional data or identification.
         */
        "value": string;
        /**
          * Specifies the width of the component container, accepts any valid CSS width value (e.g., `"100px"`, `"50%"`).
         */
        "width": string;
        /**
          * Defines the x-coordinate position (left offset) of the component container, using any valid CSS `left` value (e.g., `"10px"`, `"5%"`).
         */
        "x": string;
        /**
          * Defines the y-coordinate position (top offset) of the component container, using any valid CSS `top` value (e.g., `"10px"`, `"5%"`).
         */
        "y": string;
        /**
          * Sets the z-index of the component, controlling its stacking order on the page.
         */
        "z": string;
    }
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface LidoWrap {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the wrap container.
         */
        "audio": string;
        /**
          * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength": number;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak": boolean;
        /**
          * Enables flex layout mode for the container. If set to `"true"`, the component will use a flex layout (`display: flex`) instead of the default grid layout (`display: grid`). Additionally, the `lido-wrap` class will be replaced with `lido-flex` to allow custom flex-specific styling.
         */
        "flex": string;
        /**
          * The height of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the wrap element.
         */
        "id": string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin": string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops": number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength": number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops": number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength": number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the wrap container is touched or clicked.
         */
        "onTouch": string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon": boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the wrap container, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the wrap element, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the wrap container relative to other elements.
         */
        "z": string;
    }
}
export interface LidoCalculatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLidoCalculatorElement;
}
declare global {
    /**
     * @component LidoAvatar
     * The `LidoAvatar` component is a customizable avatar that integrates with Rive animations.
     * It allows for configurable properties such as size, position, visibility, background color,
     * and event handlers. The component supports accessibility attributes and can trigger various
     * events based on user interactions.
     * This component initializes and manages a Rive animation inside a canvas element.
     */
    interface HTMLLidoAvatarElement extends Components.LidoAvatar, HTMLStencilElement {
    }
    var HTMLLidoAvatarElement: {
        prototype: HTMLLidoAvatarElement;
        new (): HTMLLidoAvatarElement;
    };
    interface HTMLLidoBalanceElement extends Components.LidoBalance, HTMLStencilElement {
    }
    var HTMLLidoBalanceElement: {
        prototype: HTMLLidoBalanceElement;
        new (): HTMLLidoBalanceElement;
    };
    interface HTMLLidoCalculatorElementEventMap {
        "onOk": boolean;
    }
    interface HTMLLidoCalculatorElement extends Components.LidoCalculator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLidoCalculatorElementEventMap>(type: K, listener: (this: HTMLLidoCalculatorElement, ev: LidoCalculatorCustomEvent<HTMLLidoCalculatorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLidoCalculatorElementEventMap>(type: K, listener: (this: HTMLLidoCalculatorElement, ev: LidoCalculatorCustomEvent<HTMLLidoCalculatorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLidoCalculatorElement: {
        prototype: HTMLLidoCalculatorElement;
        new (): HTMLLidoCalculatorElement;
    };
    /**
     * @component LidoCell
     * A flexible UI cell component configurable via props like size, position, visibility,
     * background, and events. Supports layout flows (`wrap`, `flex`, `row`, `col`, `pos`, `random`), accessibility,
     * audio, and dynamic child management for rich interactive content.
     */
    interface HTMLLidoCellElement extends Components.LidoCell, HTMLStencilElement {
    }
    var HTMLLidoCellElement: {
        prototype: HTMLLidoCellElement;
        new (): HTMLLidoCellElement;
    };
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface HTMLLidoColElement extends Components.LidoCol, HTMLStencilElement {
    }
    var HTMLLidoColElement: {
        prototype: HTMLLidoColElement;
        new (): HTMLLidoColElement;
    };
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface HTMLLidoContainerElement extends Components.LidoContainer, HTMLStencilElement {
    }
    var HTMLLidoContainerElement: {
        prototype: HTMLLidoContainerElement;
        new (): HTMLLidoContainerElement;
    };
    interface HTMLLidoFlashCardElement extends Components.LidoFlashCard, HTMLStencilElement {
    }
    var HTMLLidoFlashCardElement: {
        prototype: HTMLLidoFlashCardElement;
        new (): HTMLLidoFlashCardElement;
    };
    interface HTMLLidoFloatElement extends Components.LidoFloat, HTMLStencilElement {
    }
    var HTMLLidoFloatElement: {
        prototype: HTMLLidoFloatElement;
        new (): HTMLLidoFloatElement;
    };
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface HTMLLidoHomeElement extends Components.LidoHome, HTMLStencilElement {
    }
    var HTMLLidoHomeElement: {
        prototype: HTMLLidoHomeElement;
        new (): HTMLLidoHomeElement;
    };
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface HTMLLidoImageElement extends Components.LidoImage, HTMLStencilElement {
    }
    var HTMLLidoImageElement: {
        prototype: HTMLLidoImageElement;
        new (): HTMLLidoImageElement;
    };
    interface HTMLLidoKeyboardElement extends Components.LidoKeyboard, HTMLStencilElement {
    }
    var HTMLLidoKeyboardElement: {
        prototype: HTMLLidoKeyboardElement;
        new (): HTMLLidoKeyboardElement;
    };
    interface HTMLLidoMathMatrixElement extends Components.LidoMathMatrix, HTMLStencilElement {
    }
    var HTMLLidoMathMatrixElement: {
        prototype: HTMLLidoMathMatrixElement;
        new (): HTMLLidoMathMatrixElement;
    };
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface HTMLLidoPosElement extends Components.LidoPos, HTMLStencilElement {
    }
    var HTMLLidoPosElement: {
        prototype: HTMLLidoPosElement;
        new (): HTMLLidoPosElement;
    };
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface HTMLLidoRandomElement extends Components.LidoRandom, HTMLStencilElement {
    }
    var HTMLLidoRandomElement: {
        prototype: HTMLLidoRandomElement;
        new (): HTMLLidoRandomElement;
    };
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface HTMLLidoRootElement extends Components.LidoRoot, HTMLStencilElement {
    }
    var HTMLLidoRootElement: {
        prototype: HTMLLidoRootElement;
        new (): HTMLLidoRootElement;
    };
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface HTMLLidoRowElement extends Components.LidoRow, HTMLStencilElement {
    }
    var HTMLLidoRowElement: {
        prototype: HTMLLidoRowElement;
        new (): HTMLLidoRowElement;
    };
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface HTMLLidoShapeElement extends Components.LidoShape, HTMLStencilElement {
    }
    var HTMLLidoShapeElement: {
        prototype: HTMLLidoShapeElement;
        new (): HTMLLidoShapeElement;
    };
    interface HTMLLidoSlideFillElement extends Components.LidoSlideFill, HTMLStencilElement {
    }
    var HTMLLidoSlideFillElement: {
        prototype: HTMLLidoSlideFillElement;
        new (): HTMLLidoSlideFillElement;
    };
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface HTMLLidoTextElement extends Components.LidoText, HTMLStencilElement {
    }
    var HTMLLidoTextElement: {
        prototype: HTMLLidoTextElement;
        new (): HTMLLidoTextElement;
    };
    interface HTMLLidoTraceElement extends Components.LidoTrace, HTMLStencilElement {
    }
    var HTMLLidoTraceElement: {
        prototype: HTMLLidoTraceElement;
        new (): HTMLLidoTraceElement;
    };
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface HTMLLidoWrapElement extends Components.LidoWrap, HTMLStencilElement {
    }
    var HTMLLidoWrapElement: {
        prototype: HTMLLidoWrapElement;
        new (): HTMLLidoWrapElement;
    };
    interface HTMLElementTagNameMap {
        "lido-avatar": HTMLLidoAvatarElement;
        "lido-balance": HTMLLidoBalanceElement;
        "lido-calculator": HTMLLidoCalculatorElement;
        "lido-cell": HTMLLidoCellElement;
        "lido-col": HTMLLidoColElement;
        "lido-container": HTMLLidoContainerElement;
        "lido-flash-card": HTMLLidoFlashCardElement;
        "lido-float": HTMLLidoFloatElement;
        "lido-home": HTMLLidoHomeElement;
        "lido-image": HTMLLidoImageElement;
        "lido-keyboard": HTMLLidoKeyboardElement;
        "lido-math-matrix": HTMLLidoMathMatrixElement;
        "lido-pos": HTMLLidoPosElement;
        "lido-random": HTMLLidoRandomElement;
        "lido-root": HTMLLidoRootElement;
        "lido-row": HTMLLidoRowElement;
        "lido-shape": HTMLLidoShapeElement;
        "lido-slide-fill": HTMLLidoSlideFillElement;
        "lido-text": HTMLLidoTextElement;
        "lido-trace": HTMLLidoTraceElement;
        "lido-wrap": HTMLLidoWrapElement;
    }
}
declare namespace LocalJSX {
    /**
     * @component LidoAvatar
     * The `LidoAvatar` component is a customizable avatar that integrates with Rive animations.
     * It allows for configurable properties such as size, position, visibility, background color,
     * and event handlers. The component supports accessibility attributes and can trigger various
     * events based on user interactions.
     * This component initializes and manages a Rive animation inside a canvas element.
     */
    interface LidoAvatar {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio"?: string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * The unique identifier for the column component.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch"?: string;
        /**
          * Source URL of the Rive (.riv) file
         */
        "src"?: string;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type"?: string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value"?: string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible"?: boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z"?: string;
    }
    interface LidoBalance {
        /**
          * Balance symbol shown when `showSymbol` is true. Default: "=".
         */
        "balanceSymbol"?: string;
        /**
          * Fill color applied to all loaded SVGs (pivot, scale, handler). Defaults to "brown".
         */
        "fill"?: string;
        /**
          * URL of the handler (side stands / hooks) image for the balance.
         */
        "handlerimage"?: string;
        /**
          * CSS height of the component (responsive values allowed). Default: "auto".
         */
        "height"?: string;
        /**
          * CSS margin applied to the outer container.
         */
        "margin"?: string;
        /**
          * Maximum allowed tilt angle (in degrees) for the balance bar.
         */
        "maxTilt"?: number;
        /**
          * Action(s) to execute when the component enters the DOM. Example: trigger animations or audio cues.
         */
        "onEntry"?: string;
        /**
          * Operation type used to calculate balance values. Supported: "count", "add", "subtract", etc.
         */
        "operation"?: string;
        /**
          * CSS padding applied to the outer container.
         */
        "padding"?: string;
        /**
          * URL of the pivot (base stand) image used in the balance visualization.
         */
        "pivotimage"?: string;
        /**
          * URL of the scale (bar) image that tilts based on the weight difference.
         */
        "scaleimage"?: string;
        /**
          * Whether the balance symbol is currently displayed. Can be toggled with `revealSymbol()` and `hideSymbol()`.
         */
        "showSymbol"?: boolean;
        /**
          * Initial tilt value of the balance. Negative = tilts left, Positive = tilts right.
         */
        "tilt"?: number;
        /**
          * Controls component visibility. Accepts boolean (`true`/`false`) or string ("true"/"false").
         */
        "visible"?: boolean | string;
        /**
          * CSS width of the component (responsive values allowed). Default: "auto".
         */
        "width"?: string;
        /**
          * Horizontal (X-axis) offset for positioning the component. Default: "0px".
         */
        "x"?: string;
        /**
          * Vertical (Y-axis) offset for positioning the component. Default: "0px".
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the component. Default: "0".
         */
        "z"?: string;
    }
    interface LidoCalculator {
        /**
          * Background color for the calculator container
         */
        "bgColor"?: string;
        /**
          * Height of the calculator component (default: '711px')
         */
        "height"?: string;
        /**
          * Objective or identifier for activity-based logic or validation
         */
        "objective"?: string;
        /**
          * Code or actions to execute when the component is first rendered
         */
        "onEntry"?: string;
        /**
          * Event emitted when user confirms or completes an action (e.g., pressing OK)
         */
        "onOnOk"?: (event: LidoCalculatorCustomEvent<boolean>) => void;
        /**
          * Icon URL for the pen image shown on the calculator UI
         */
        "penIcon"?: string;
        /**
          * Controls component visibility. Accepts boolean (`true`/`false`) or string ("true"/"false").
         */
        "visible"?: boolean | string;
        /**
          * Width of the calculator component (default: '479px')
         */
        "width"?: string;
        /**
          * X-position of the calculator (can be px, %, etc.)
         */
        "x"?: string;
        /**
          * Y-position of the calculator (can be px, %, etc.)
         */
        "y"?: string;
    }
    /**
     * @component LidoCell
     * A flexible UI cell component configurable via props like size, position, visibility,
     * background, and events. Supports layout flows (`wrap`, `flex`, `row`, `col`, `pos`, `random`), accessibility,
     * audio, and dynamic child management for rich interactive content.
     */
    interface LidoCell {
        /**
          * CSS align-items property to control the alignment of flex items. Example: 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'.
         */
        "alignItems"?: string;
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio"?: string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength"?: number;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * CSS flex direction for the component, which can be used to control the layout of child elements. Accepts values like 'row', 'column', etc.
         */
        "flexDirection"?: string;
        /**
          * The gap between child elements inside the column (CSS value, e.g., '10px', '5px 10px'). This is applicable when the layout is set to `wrap` or `flex`.
         */
        "gap"?: string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * The unique identifier for the column component.
         */
        "id"?: string;
        /**
          * Determines the layout behavior of the component's children.  - `wrap`: Applies a grid layout to the children, allowing them to wrap automatically in a grid format. - `flex`: Applies a flex layout with wrapping behavior (`flex-wrap`). - `col`: Arranges children in a single column using a vertical flex direction. - `row`: Arranges children in a single row using a horizontal flex direction. - `pos`: Applies absolute positioning to children, allowing manual placement using `x` and `y` values. - `random`: Positions child elements randomly within the container using absolute positioning.  Default: `'wrap'`
         */
        "layout"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch"?: string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding"?: string;
        /**
          * Defines the width of the scrollbar within the cell (e.g., '14px'). Defaults to '0px' if not specified, effectively hiding the scrollbar.
         */
        "scrollbarWidth"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon"?: boolean;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type"?: string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value"?: string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible"?: string;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z"?: string;
    }
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface LidoCol {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio"?: string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The border image of the column (CSS border-image value, e.g., 'url(border.png)', 'linear-gradient(red, blue)').
         */
        "borderImage"?: string;
        /**
          * Applies a CSS box-shadow to the component. Accepts any valid CSS box-shadow value. Example: "0px 4px 10px rgba(0, 0, 0, 0.1)"
         */
        "boxShadow"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength"?: number;
        /**
          * Specifies the direction of the component, which determines the layout or flow of elements.
         */
        "direction"?: string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * The unique identifier for the column component.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon"?: boolean;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type"?: string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value"?: string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible"?: boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z"?: string;
    }
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface LidoContainer {
        /**
          * Enables appending the dragged element to the drop target after all correct drops are completed.
         */
        "appendToDropOnCompletion"?: boolean;
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the container.
         */
        "audio"?: string;
        /**
          * Base URL for the container.
         */
        "baseUrl"?: string;
        /**
          * Background color of the container (CSS color value).
         */
        "bgColor"?: string;
        /**
          * The background image URL to be applied to the entire body.
         */
        "bgImage"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * Custom CSS styles to be applied to the container. Allows for dynamic styling through inline styles or class names.
         */
        "customStyle"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl"?: string;
        /**
          * The height of the container (CSS value).
         */
        "height"?: string;
        /**
          * Unique identifier for the container.
         */
        "id"?: string;
        /**
          * Determines if the activity should proceed automatically only after a correct response. Acceptable values: "true" or "false". Defaults to "false".
         */
        "isAllowOnlyCorrect"?: boolean;
        /**
          * Specifies whether the activity should continue automatically upon a correct response. Expected values: "true" or "false".
         */
        "isContinueOnCorrect"?: boolean;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl"?: string;
        /**
          * Objective or purpose of the container. Can be used for internal logic or tracking.
         */
        "objective"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the container is entered, useful for triggering animations or logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the container is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl"?: string;
        /**
          * Indicates whether the "Check" button should be visible or not. Expected values: "true" or "false".
         */
        "showCheck"?: boolean;
        /**
          * Controls whether the drop zone displays a border; true shows the border, false hides it.
         */
        "showDropBorder"?: boolean;
        /**
          * Indicates whether the next button should be displayed. Expected values: "true" or "false".
         */
        "showNextButton"?: string;
        /**
          * Indicates whether the previous button should be displayed. Expected values: "true" or "false".
         */
        "showPrevButton"?: string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl"?: string;
        /**
          * TabIndex for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Type of the container, which can be used for conditional logic or styling purposes.
         */
        "type"?: string;
        /**
          * Value assigned to the container. This can be used for logic related to this component.
         */
        "value"?: string;
        /**
          * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the container (CSS value).
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the container.
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the container.
         */
        "y"?: string;
        /**
          * Z-index to control the stacking order of the container.
         */
        "z"?: string;
    }
    interface LidoFlashCard {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio"?: string;
        /**
          * Content (any markup) shown on the back face.
         */
        "back"?: any;
        /**
          * Background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "direction"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * The Display CSS property.
         */
        "display"?: string;
        /**
          * Whether the card is flipped (back side visible). `mutable` lets the component toggle itself on click; `reflect` keeps the `<lido-flash-card flipped>` attribute in sync.
         */
        "flipped"?: boolean;
        /**
          * Content (any markup) shown on the front face.
         */
        "front"?: any;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the column is entered, useful for triggering animations or logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type"?: string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value"?: string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible"?: boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the column within its container (CSS value, e.g., '10px', '5%').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the column within its container (CSS value, e.g., '10px', '5%').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the column relative to other elements.
         */
        "z"?: string;
    }
    interface LidoFloat {
        /**
          * The background color of the float element (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * Direction of the float element's movement (e.g., 'leftToRight', 'bottomToTop'). This can be used to control the animation or positioning of the float elements.
         */
        "floatDirection"?: string;
        /**
          * The height of the float element (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the text element.
         */
        "id"?: string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the component, which can be used for conditional logic or styling purposes.
         */
        "type"?: string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the float element (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface LidoHome {
        /**
          * URL for the avatar Rive file.
         */
        "avatarUrl"?: string;
        /**
          * Base URL for the containers.
         */
        "baseUrl"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl"?: string;
        /**
          * The height of the container (CSS value).
         */
        "height"?: string;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex"?: number;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl"?: string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl"?: string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl"?: string;
        /**
          * Unique identifier for the component instance. If not provided, a UUID is generated to ensure uniqueness.
         */
        "uuid"?: string;
        /**
          * XML data passed to the component, which is parsed and used to render various containers.
         */
        "xmlData"?: string;
    }
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface LidoImage {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the image.
         */
        "audio"?: string;
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * CSS filter to apply visual effects (e.g., blur, brightness) to the image. Example: 'blur(5px)', 'brightness(0.8)', 'grayscale(100%)'
         */
        "filter"?: string;
        /**
          * The height of the image component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the text element.
         */
        "id"?: string;
        /**
          * Enables border-image slice support when true; otherwise, behaves as a regular image component
         */
        "isSlice"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the image is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the image is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Specifies the width for border-image slice (e.g., "30px", "2em"). Only used when `isSlice` is enabled.
         */
        "sliceWidth"?: string;
        /**
          * The source URL of the image to be displayed.
         */
        "src"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * CSS transform property to apply transformations like rotate, scale, translate, etc. Example: 'rotate(45deg)' or 'scale(1.2)'.
         */
        "transform"?: string;
        /**
          * Defines the type of the image component, which can be used for conditional logic or styling purposes.
         */
        "type"?: string;
        /**
          * The value associated with the image. Typically used for internal logic or identification.
         */
        "value"?: string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible"?: boolean | string;
        /**
          * The width of the image component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z"?: string;
    }
    interface LidoKeyboard {
        /**
          * Background color for each key button
         */
        "bgColor"?: string;
        /**
          * Border radius for key buttons (e.g., "8px")
         */
        "borderRadius"?: string;
        /**
          * Number of columns in the keyboard layout (default: "10")
         */
        "columns"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * Font color for key labels (e.g., "#333")
         */
        "fontColor"?: string;
        /**
          * Font family for key labels (e.g., "Arial, sans-serif")
         */
        "fontFamily"?: string;
        /**
          * Font size for key labels (e.g., "16px")
         */
        "fontSize"?: string;
        /**
          * Gap between key buttons (default: "10px")
         */
        "gap"?: string;
        /**
          * Height of each key button (e.g., "40px")
         */
        "height"?: string;
        /**
          * Indicates whether the keyboard input is enabled. When set to `true`, the component will respond to keyboard events.
         */
        "keyboardInput"?: boolean;
        /**
          * Comma-separated list of keys, optionally with status (e.g., "A,B-disable,C")
         */
        "keys"?: string;
        /**
          * Total number of letters required for completion
         */
        "letterLength"?: number;
        /**
          * Margin around the keyboard container
         */
        "margin"?: string;
        /**
          * Custom callback function when a key is entered
         */
        "onEntry"?: string;
        /**
          * Padding inside the keyboard container
         */
        "padding"?: string;
        /**
          * Type of key interaction (e.g., "click", "drag")
         */
        "type"?: string;
        /**
          * Whether the keyboard is visible ("true" / "false")
         */
        "visible"?: string;
        /**
          * Width of each key button (e.g., "40px")
         */
        "width"?: string;
        /**
          * X position (left) of the keyboard
         */
        "x"?: string;
        /**
          * Y position (top) of the keyboard
         */
        "y"?: string;
        /**
          * Z-index for stacking order
         */
        "z"?: string;
    }
    interface LidoMathMatrix {
        /**
          * Background color for active slots
         */
        "activeBgColor"?: string;
        /**
          * If true, only active slots are visible; inactive ones are hidden
         */
        "activeOnlyVisible"?: boolean;
        /**
          * Border style applied to each slot
         */
        "border"?: string;
        /**
          * Border radius for each slot
         */
        "borderRadius"?: string;
        /**
          * Show row index numbers on the bottom side
         */
        "bottomIndex"?: boolean;
        /**
          * Enable/disable click interactions on the slots
         */
        "clickable"?: boolean;
        /**
          * Number of columns in the matrix
         */
        "cols"?: number;
        /**
          * Number of slots to pre-fill as active by default
         */
        "defualtFill"?: number;
        /**
          * Height of the slot container
         */
        "height"?: string;
        /**
          * Background color for inactive slots
         */
        "inactiveBgColor"?: string;
        /**
          * Show row index numbers on the left side
         */
        "leftIndex"?: boolean;
        /**
          * Margin around the matrix container
         */
        "margin"?: string;
        /**
          * Image source used inside the slots
         */
        "matrixImage"?: string;
        /**
          * Padding inside the matrix container
         */
        "padding"?: string;
        /**
          * Number of rows in the matrix
         */
        "rows"?: number;
        /**
          * Show column index numbers on the top side
         */
        "topIndex"?: boolean;
        /**
          * Controls visibility of the matrix (string "true" or "false")
         */
        "visible"?: string;
        /**
          * Width of the slot container
         */
        "width"?: string;
        /**
          * Z-index value for the matrix container
         */
        "z"?: string;
    }
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface LidoPos {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio"?: string;
        /**
          * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the positional element.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the component is entered, often used to trigger animations or custom logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Tab index to support keyboard navigation within the component.
         */
        "tabIndex"?: number;
        /**
          * The type of the component, used for conditional logic or specific styles.
         */
        "type"?: string;
        /**
          * Value assigned to the component, often used for internal logic or data tracking.
         */
        "value"?: string;
        /**
          * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).
         */
        "visible"?: boolean | string;
        /**
          * The width of the component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the element relative to others.
         */
        "z"?: string;
    }
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface LidoRandom {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio"?: string;
        /**
          * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the container (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the random container.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * The type of the component, used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the component, often used for internal logic.
         */
        "value"?: string;
        /**
          * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the container (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the container relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface LidoRoot {
        /**
          * Base URL for the containers.
         */
        "baseUrl"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * Custom URL for the Exit button icon. Falls back to the default icon if not provided or invalid.
         */
        "exitButtonUrl"?: string;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex"?: number;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * Custom URL for the Next button icon. Falls back to the default icon if not provided or invalid.
         */
        "nextButtonUrl"?: string;
        /**
          * Custom URL for the Previous button icon. Falls back to the default icon if not provided or invalid.
         */
        "prevButtonUrl"?: string;
        /**
          * Custom URL for the Speaker button icon. Falls back to the default icon if not provided or invalid.
         */
        "speakerButtonUrl"?: string;
        /**
          * Prop to hold the XML file path or URL. This can be a relative path or an external URL.
         */
        "xmlPath"?: string;
    }
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface LidoRow {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the row.
         */
        "audio"?: string;
        /**
          * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength"?: number;
        /**
          * Specifies the direction of the component, which determines the layout or flow of elements.
         */
        "direction"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * Sets the CSS display property for the component. Accepts any valid CSS display value (e.g., 'block', 'flex', 'grid', 'none').
         */
        "display"?: string;
        /**
          * The height of the row (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the row is entered, often used for triggering animations or custom logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the row is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the row, used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the row, typically used for internal logic or data.
         */
        "value"?: string;
        /**
          * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the row (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the row relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface LidoShape {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the shape.
         */
        "audio"?: string;
        /**
          * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue'). This is ignored for polygons.
         */
        "bgColor"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * The height of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "height"?: string;
        /**
          * Unique identifier for the shape element.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the shape is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the shape is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').
         */
        "shapeType"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the shape, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the shape, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the shape relative to other elements.
         */
        "z"?: string;
    }
    interface LidoSlideFill {
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * Number of divisions or segments to split the ruler path into
         */
        "division"?: number;
        /**
          * Fill amount to display inside the SVG rect. Accepts values like "30%" or "30" (treated as percentage of fill)
         */
        "fill"?: string;
        /**
          * Determines the direction in which the rect fill should grow: - 'vertical': from bottom to top - 'horizontal': from left to right
         */
        "fillDirection"?: string;
        /**
          * CSS height of the component (e.g., "300px", "100%")
         */
        "height"?: string;
        /**
          * Unique identifier for the component instance
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * Maximum value shown on the ruler (used for number generation)
         */
        "max"?: number;
        /**
          * Minimum value shown on the ruler (used for number generation)
         */
        "min"?: number;
        /**
          * Type of number to be displayed on the ruler. Can be 'integer', 'decimal', or 'fraction'.
         */
        "numberType"?: string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding"?: string;
        /**
          * Enables slider interaction (currently unused in logic, can be used to toggle slider UI)
         */
        "slider"?: boolean;
        /**
          * URL or relative path to the external SVG file to be fetched and rendered
         */
        "src"?: string;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible"?: boolean | string;
        /**
          * CSS width of the component (e.g., "300px", "100%")
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface LidoText {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio"?: string;
        /**
          * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The border image of the column (CSS border-image value, e.g., 'url(border.png)', 'linear-gradient(red, blue)').
         */
        "borderImage"?: string;
        /**
          * CSS filter to apply border radius to the image. Example: '10px' for  images.
         */
        "borderRadius"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * Font color for the text (CSS color value, e.g., '#000000', 'red').
         */
        "fontColor"?: string;
        /**
          * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').
         */
        "fontFamily"?: string;
        /**
          * Font size for the text (CSS value, e.g., '16px', '1.5em').
         */
        "fontSize"?: string;
        /**
          * Height of the text component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * When set to `true`, the text will highlight while being spoken, typically used for accessibility.
         */
        "highlightWhileSpeaking"?: boolean;
        /**
          * Unique identifier for the text element.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the text component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * CSS padding value applied to each child element inside the container. Accepts standard CSS padding formats (e.g., '10px', '5px 10px', etc.).
         */
        "padding"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element if it is true.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Indicates whether to wrap each letter or each word of the text in a span element. This can be useful for animations or styling individual letters.
         */
        "spanType"?: 'letters' | 'words' | '';
        /**
          * The string of text to be displayed in the component.
         */
        "string"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible"?: boolean | string;
        /**
          * Width of the text component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z"?: string;
    }
    interface LidoTrace {
        /**
          * Indicates whether to play an animation trace when the SVG is completed.
         */
        "animationTrace"?: boolean;
        /**
          * Controls visibility for assistive technologies. If `"true"`, the component is hidden from screen readers.
         */
        "ariaHidden"?: string;
        /**
          * Accessible label for screen readers, providing a textual description of the component's purpose.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio"?: string;
        /**
          * Delay in milliseconds to make the cell visible after mount.
         */
        "delayVisible"?: string;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * URL for the finger hint image
         */
        "fingerHintUrl"?: string;
        /**
          * Specifies the height of the component container, accepts any valid CSS height value (e.g., `"100px"`, `"50%"`).
         */
        "height"?: string;
        /**
          * Indicates whether to highlight the text associated with the SVG when the trace is completed.
         */
        "highlightTextId"?: string;
        /**
          * Unique identifier for this `lido-trace` component instance.
         */
        "id"?: string;
        /**
          * Mode for the tracing interaction, defining how users interact with the SVG paths. Options may include `"noFlow"`, `"showFlow"`, `"freeTrace"`, `"blindTracing"`, and `"blindFreeTrace"`
         */
        "mode"?: string;
        /**
          * Event handler for a Correct Trace, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler for an Incorrect Trace, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Source URL or path for the SVG file used in this component.
         */
        "svgSource"?: string;
        /**
          * Sets the tab order of the component within the page, enabling keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * A custom string value associated with the component for additional data or identification.
         */
        "value"?: string;
        /**
          * Specifies the width of the component container, accepts any valid CSS width value (e.g., `"100px"`, `"50%"`).
         */
        "width"?: string;
        /**
          * Defines the x-coordinate position (left offset) of the component container, using any valid CSS `left` value (e.g., `"10px"`, `"5%"`).
         */
        "x"?: string;
        /**
          * Defines the y-coordinate position (top offset) of the component container, using any valid CSS `top` value (e.g., `"10px"`, `"5%"`).
         */
        "y"?: string;
        /**
          * Sets the z-index of the component, controlling its stacking order on the page.
         */
        "z"?: string;
    }
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface LidoWrap {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the wrap container.
         */
        "audio"?: string;
        /**
          * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The number of child elements that should be displayed inside the row. This value is dynamically adjusted based on `minLength` and `maxLength`.
         */
        "childElementsLength"?: number;
        /**
          * When set to true, disables the speak functionality of long press for this component and its children.
         */
        "disableSpeak"?: boolean;
        /**
          * Enables flex layout mode for the container. If set to `"true"`, the component will use a flex layout (`display: flex`) instead of the default grid layout (`display: grid`). Additionally, the `lido-wrap` class will be replaced with `lido-flex` to allow custom flex-specific styling.
         */
        "flex"?: string;
        /**
          * The height of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the wrap element.
         */
        "id"?: string;
        /**
          * CSS margin value applied to each child element inside the container. Accepts standard CSS margin formats (e.g., '10px', '5px 10px', etc.).
         */
        "margin"?: string;
        /**
          * The Maximum number of drag elements that can be dropped inside the Drop element.
         */
        "maxDrops"?: number;
        /**
          * The maximum number of child elements that can be displayed inside the row. If `childElementsLength` exceeds this value, excess elements will be hidden.
         */
        "maxLength"?: number;
        /**
          * The minimum number of drag elements that must be dropped inside the Drop element.
         */
        "minDrops"?: number;
        /**
          * The minimum number of child elements that must be displayed inside the row. If `childElementsLength` is less than this value, additional elements may be shown to meet this minimum.
         */
        "minLength"?: number;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the wrap container is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Controls whether the speak icon should appear directly on the top right corner of targeted element.
         */
        "showSpeakIcon"?: boolean;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the wrap container, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the wrap element, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the wrap container relative to other elements.
         */
        "z"?: string;
    }
    interface IntrinsicElements {
        "lido-avatar": LidoAvatar;
        "lido-balance": LidoBalance;
        "lido-calculator": LidoCalculator;
        "lido-cell": LidoCell;
        "lido-col": LidoCol;
        "lido-container": LidoContainer;
        "lido-flash-card": LidoFlashCard;
        "lido-float": LidoFloat;
        "lido-home": LidoHome;
        "lido-image": LidoImage;
        "lido-keyboard": LidoKeyboard;
        "lido-math-matrix": LidoMathMatrix;
        "lido-pos": LidoPos;
        "lido-random": LidoRandom;
        "lido-root": LidoRoot;
        "lido-row": LidoRow;
        "lido-shape": LidoShape;
        "lido-slide-fill": LidoSlideFill;
        "lido-text": LidoText;
        "lido-trace": LidoTrace;
        "lido-wrap": LidoWrap;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @component LidoAvatar
             * The `LidoAvatar` component is a customizable avatar that integrates with Rive animations.
             * It allows for configurable properties such as size, position, visibility, background color,
             * and event handlers. The component supports accessibility attributes and can trigger various
             * events based on user interactions.
             * This component initializes and manages a Rive animation inside a canvas element.
             */
            "lido-avatar": LocalJSX.LidoAvatar & JSXBase.HTMLAttributes<HTMLLidoAvatarElement>;
            "lido-balance": LocalJSX.LidoBalance & JSXBase.HTMLAttributes<HTMLLidoBalanceElement>;
            "lido-calculator": LocalJSX.LidoCalculator & JSXBase.HTMLAttributes<HTMLLidoCalculatorElement>;
            /**
             * @component LidoCell
             * A flexible UI cell component configurable via props like size, position, visibility,
             * background, and events. Supports layout flows (`wrap`, `flex`, `row`, `col`, `pos`, `random`), accessibility,
             * audio, and dynamic child management for rich interactive content.
             */
            "lido-cell": LocalJSX.LidoCell & JSXBase.HTMLAttributes<HTMLLidoCellElement>;
            /**
             * @component LidoCol
             * The `LidoCol` component is a dynamic column-like UI element that can be
             * customized via various properties such as dimensions, position, visibility,
             * background color, and event handlers. It is designed to work within
             * containers (`lido-container`) and can include child components like
             * `lido-text`, `lido-row`, etc.
             */
            "lido-col": LocalJSX.LidoCol & JSXBase.HTMLAttributes<HTMLLidoColElement>;
            /**
             * @component LidoContainer
             * The `LidoContainer` component acts as a container for other elements. It scales responsively
             * based on the window size, adjusts background color, and provides various configurable properties
             * such as dimensions, positioning, visibility, and custom event handlers.
             */
            "lido-container": LocalJSX.LidoContainer & JSXBase.HTMLAttributes<HTMLLidoContainerElement>;
            "lido-flash-card": LocalJSX.LidoFlashCard & JSXBase.HTMLAttributes<HTMLLidoFlashCardElement>;
            "lido-float": LocalJSX.LidoFloat & JSXBase.HTMLAttributes<HTMLLidoFloatElement>;
            /**
             * @component LidoHome
             * The `LidoHome` component renders a series of containers parsed from the provided XML data.
             * It handles navigation between containers, resets the state on page reloads or container transitions,
             * and displays progress indicators (dots) for each container.
             */
            "lido-home": LocalJSX.LidoHome & JSXBase.HTMLAttributes<HTMLLidoHomeElement>;
            /**
             * @component LidoImage
             * The `LidoImage` component displays an image element within a container. It is a versatile
             * component that allows dynamic sizing, positioning, visibility control, and event handling.
             * The component is designed to work in different types of environments, supporting custom
             * events such as touch, match, and entry events.
             */
            "lido-image": LocalJSX.LidoImage & JSXBase.HTMLAttributes<HTMLLidoImageElement>;
            "lido-keyboard": LocalJSX.LidoKeyboard & JSXBase.HTMLAttributes<HTMLLidoKeyboardElement>;
            "lido-math-matrix": LocalJSX.LidoMathMatrix & JSXBase.HTMLAttributes<HTMLLidoMathMatrixElement>;
            /**
             * @component LidoPos
             * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
             * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
             * events for interaction such as touch, match, and entry events.
             */
            "lido-pos": LocalJSX.LidoPos & JSXBase.HTMLAttributes<HTMLLidoPosElement>;
            /**
             * @component LidoRandom
             * The `LidoRandom` component randomly positions its child elements within its container.
             * This component can be used when a random layout of elements is required. It allows
             * full customization via props such as dimensions, positioning, visibility, and event handling.
             */
            "lido-random": LocalJSX.LidoRandom & JSXBase.HTMLAttributes<HTMLLidoRandomElement>;
            /**
             * @component LidoRoot
             * The `LidoRoot` component is the main application entry point. It loads an external XML data file
             * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
             * The XML path can be configured via a prop.
             */
            "lido-root": LocalJSX.LidoRoot & JSXBase.HTMLAttributes<HTMLLidoRootElement>;
            /**
             * @component LidoRow
             * The `LidoRow` component is used to create a flexible row element that can contain other elements.
             * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
             */
            "lido-row": LocalJSX.LidoRow & JSXBase.HTMLAttributes<HTMLLidoRowElement>;
            /**
             * @component LidoShape
             * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
             * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
             * Additionally, it supports custom events for interaction like touch, match, and entry.
             */
            "lido-shape": LocalJSX.LidoShape & JSXBase.HTMLAttributes<HTMLLidoShapeElement>;
            "lido-slide-fill": LocalJSX.LidoSlideFill & JSXBase.HTMLAttributes<HTMLLidoSlideFillElement>;
            /**
             * @component LidoText
             * The `LidoText` component is used to display text with customizable styling.
             * It allows you to set the font, size, color, and background color, along with
             * positioning and visibility control. The component supports custom events like touch, match, and entry.
             */
            "lido-text": LocalJSX.LidoText & JSXBase.HTMLAttributes<HTMLLidoTextElement>;
            "lido-trace": LocalJSX.LidoTrace & JSXBase.HTMLAttributes<HTMLLidoTraceElement>;
            /**
             * @component LidoWrap
             * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
             * The component can display its content as a grid and supports custom events like touch, match, and entry.
             * It allows for full customization via props like dimensions, background color, visibility, and z-index.
             */
            "lido-wrap": LocalJSX.LidoWrap & JSXBase.HTMLAttributes<HTMLLidoWrapElement>;
        }
    }
}

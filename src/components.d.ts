/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface LidoCol {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio": string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * The unique identifier for the column component.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch": string;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type": string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value": string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible": boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z": string;
    }
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface LidoContainer {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the container.
         */
        "audio": string;
        /**
          * Base URL for the container.
         */
        "baseUrl": string;
        /**
          * Background color of the container (CSS color value).
         */
        "bgColor": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * The height of the container (CSS value).
         */
        "height": string;
        /**
          * Unique identifier for the container.
         */
        "id": string;
        /**
          * Specifies whether the activity should continue automatically upon a correct response. Expected values: "true" or "false".
         */
        "isContinueOnCorrect": string;
        /**
          * Objective or purpose of the container. Can be used for internal logic or tracking.
         */
        "objective": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the container is entered, useful for triggering animations or logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the container is touched or clicked.
         */
        "onTouch": string;
        /**
          * Indicates whether the "Check" button should be visible or not. Expected values: "true" or "false".
         */
        "showCheck": string;
        /**
          * TabIndex for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Type of the container, which can be used for conditional logic or styling purposes.
         */
        "type": string;
        /**
          * Value assigned to the container. This can be used for logic related to this component.
         */
        "value": string;
        /**
          * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the container (CSS value).
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the container.
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the container.
         */
        "y": string;
        /**
          * Z-index to control the stacking order of the container.
         */
        "z": string;
    }
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface LidoHome {
        /**
          * Base URL for the containers.
         */
        "baseUrl": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex": number;
        /**
          * XML data passed to the component, which is parsed and used to render various containers.
         */
        "xmlData": string;
    }
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface LidoImage {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the image.
         */
        "audio": string;
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the image component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the image is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the image is touched or clicked.
         */
        "onTouch": string;
        /**
          * The source URL of the image to be displayed.
         */
        "src": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the image component, which can be used for conditional logic or styling purposes.
         */
        "type": string;
        /**
          * The value associated with the image. Typically used for internal logic or identification.
         */
        "value": string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the image component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface LidoPos {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio": string;
        /**
          * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the positional element.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the component is entered, often used to trigger animations or custom logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch": string;
        /**
          * Tab index to support keyboard navigation within the component.
         */
        "tabIndex": number;
        /**
          * The type of the component, used for conditional logic or specific styles.
         */
        "type": string;
        /**
          * Value assigned to the component, often used for internal logic or data tracking.
         */
        "value": string;
        /**
          * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).
         */
        "visible": boolean;
        /**
          * The width of the component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the element relative to others.
         */
        "z": string;
    }
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface LidoRandom {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio": string;
        /**
          * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the container (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the random container.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * The type of the component, used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the component, often used for internal logic.
         */
        "value": string;
        /**
          * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the container (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the container relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface LidoRoot {
        /**
          * Base URL for the containers.
         */
        "baseUrl": string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay": boolean;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex": number;
        /**
          * Prop to hold the XML file path or URL. This can be a relative path or an external URL.
         */
        "xmlPath": string;
    }
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface LidoRow {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the row.
         */
        "audio": string;
        /**
          * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the row (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the row is entered, often used for triggering animations or custom logic.
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the row is touched or clicked.
         */
        "onTouch": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the row, used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the row, typically used for internal logic or data.
         */
        "value": string;
        /**
          * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the row (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the row relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface LidoShape {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the shape.
         */
        "audio": string;
        /**
          * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue'). This is ignored for polygons.
         */
        "bgColor": string;
        /**
          * The height of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "height": string;
        /**
          * Unique identifier for the shape element.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the shape is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the shape is touched or clicked.
         */
        "onTouch": string;
        /**
          * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').
         */
        "shapeType": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the shape, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the shape, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the shape relative to other elements.
         */
        "z": string;
    }
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface LidoText {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio": string;
        /**
          * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').
         */
        "font": string;
        /**
          * Font color for the text (CSS color value, e.g., '#000000', 'red').
         */
        "fontColor": string;
        /**
          * Font size for the text (CSS value, e.g., '16px', '1.5em').
         */
        "fontSize": string;
        /**
          * Height of the text component (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * When set to `true`, the text will highlight while being spoken, typically used for accessibility.
         */
        "highlightWhileSpeaking": boolean;
        /**
          * Unique identifier for the text element.
         */
        "id": string;
        "isAllowOnlyOneDrop": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the text component is touched or clicked.
         */
        "onTouch": string;
        /**
          * The string of text to be displayed in the component.
         */
        "string": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * Width of the text component (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z": string;
    }
    interface LidoTrace {
        /**
          * Controls visibility for assistive technologies. If `"true"`, the component is hidden from screen readers.
         */
        "ariaHidden": string;
        /**
          * Accessible label for screen readers, providing a textual description of the component's purpose.
         */
        "ariaLabel": string;
        /**
          * Specifies the height of the component container, accepts any valid CSS height value (e.g., `"100px"`, `"50%"`).
         */
        "height": string;
        /**
          * Unique identifier for this `lido-trace` component instance.
         */
        "id": string;
        /**
          * Mode for the tracing interaction, defining how users interact with the SVG paths. Options may include `"noFlow"`, `"showFlow"`, `"freeTrace"`, `"blindTracing"`, and `"blindFreeTrace"`.
         */
        "mode": string;
        /**
          * Source URL or path for the SVG file used in this component.
         */
        "svgSource": string;
        /**
          * Sets the tab order of the component within the page, enabling keyboard navigation.
         */
        "tabIndex": number;
        /**
          * A custom string value associated with the component for additional data or identification.
         */
        "value": string;
        /**
          * Specifies the width of the component container, accepts any valid CSS width value (e.g., `"100px"`, `"50%"`).
         */
        "width": string;
        /**
          * Defines the x-coordinate position (left offset) of the component container, using any valid CSS `left` value (e.g., `"10px"`, `"5%"`).
         */
        "x": string;
        /**
          * Defines the y-coordinate position (top offset) of the component container, using any valid CSS `top` value (e.g., `"10px"`, `"5%"`).
         */
        "y": string;
        /**
          * Sets the z-index of the component, controlling its stacking order on the page.
         */
        "z": string;
    }
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface LidoWrap {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden": string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel": string;
        /**
          * URL or identifier of an audio file associated with the wrap container.
         */
        "audio": string;
        /**
          * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor": string;
        /**
          * The height of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "height": string;
        /**
          * Unique identifier for the wrap element.
         */
        "id": string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect": string;
        /**
          * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).
         */
        "onEntry": string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect": string;
        /**
          * Event handler triggered when the wrap container is touched or clicked.
         */
        "onTouch": string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex": number;
        /**
          * Defines the type of the wrap container, which can be used for conditional logic or specific styling.
         */
        "type": string;
        /**
          * Value associated with the wrap element, typically used for internal logic or tracking.
         */
        "value": string;
        /**
          * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible": boolean;
        /**
          * The width of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "width": string;
        /**
          * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').
         */
        "x": string;
        /**
          * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').
         */
        "y": string;
        /**
          * Z-index for stacking order of the wrap container relative to other elements.
         */
        "z": string;
    }
}
declare global {
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface HTMLLidoColElement extends Components.LidoCol, HTMLStencilElement {
    }
    var HTMLLidoColElement: {
        prototype: HTMLLidoColElement;
        new (): HTMLLidoColElement;
    };
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface HTMLLidoContainerElement extends Components.LidoContainer, HTMLStencilElement {
    }
    var HTMLLidoContainerElement: {
        prototype: HTMLLidoContainerElement;
        new (): HTMLLidoContainerElement;
    };
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface HTMLLidoHomeElement extends Components.LidoHome, HTMLStencilElement {
    }
    var HTMLLidoHomeElement: {
        prototype: HTMLLidoHomeElement;
        new (): HTMLLidoHomeElement;
    };
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface HTMLLidoImageElement extends Components.LidoImage, HTMLStencilElement {
    }
    var HTMLLidoImageElement: {
        prototype: HTMLLidoImageElement;
        new (): HTMLLidoImageElement;
    };
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface HTMLLidoPosElement extends Components.LidoPos, HTMLStencilElement {
    }
    var HTMLLidoPosElement: {
        prototype: HTMLLidoPosElement;
        new (): HTMLLidoPosElement;
    };
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface HTMLLidoRandomElement extends Components.LidoRandom, HTMLStencilElement {
    }
    var HTMLLidoRandomElement: {
        prototype: HTMLLidoRandomElement;
        new (): HTMLLidoRandomElement;
    };
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface HTMLLidoRootElement extends Components.LidoRoot, HTMLStencilElement {
    }
    var HTMLLidoRootElement: {
        prototype: HTMLLidoRootElement;
        new (): HTMLLidoRootElement;
    };
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface HTMLLidoRowElement extends Components.LidoRow, HTMLStencilElement {
    }
    var HTMLLidoRowElement: {
        prototype: HTMLLidoRowElement;
        new (): HTMLLidoRowElement;
    };
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface HTMLLidoShapeElement extends Components.LidoShape, HTMLStencilElement {
    }
    var HTMLLidoShapeElement: {
        prototype: HTMLLidoShapeElement;
        new (): HTMLLidoShapeElement;
    };
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface HTMLLidoTextElement extends Components.LidoText, HTMLStencilElement {
    }
    var HTMLLidoTextElement: {
        prototype: HTMLLidoTextElement;
        new (): HTMLLidoTextElement;
    };
    interface HTMLLidoTraceElement extends Components.LidoTrace, HTMLStencilElement {
    }
    var HTMLLidoTraceElement: {
        prototype: HTMLLidoTraceElement;
        new (): HTMLLidoTraceElement;
    };
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface HTMLLidoWrapElement extends Components.LidoWrap, HTMLStencilElement {
    }
    var HTMLLidoWrapElement: {
        prototype: HTMLLidoWrapElement;
        new (): HTMLLidoWrapElement;
    };
    interface HTMLElementTagNameMap {
        "lido-col": HTMLLidoColElement;
        "lido-container": HTMLLidoContainerElement;
        "lido-home": HTMLLidoHomeElement;
        "lido-image": HTMLLidoImageElement;
        "lido-pos": HTMLLidoPosElement;
        "lido-random": HTMLLidoRandomElement;
        "lido-root": HTMLLidoRootElement;
        "lido-row": HTMLLidoRowElement;
        "lido-shape": HTMLLidoShapeElement;
        "lido-text": HTMLLidoTextElement;
        "lido-trace": HTMLLidoTraceElement;
        "lido-wrap": HTMLLidoWrapElement;
    }
}
declare namespace LocalJSX {
    /**
     * @component LidoCol
     * The `LidoCol` component is a dynamic column-like UI element that can be
     * customized via various properties such as dimensions, position, visibility,
     * background color, and event handlers. It is designed to work within
     * containers (`lido-container`) and can include child components like
     * `lido-text`, `lido-row`, etc.
     */
    interface LidoCol {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * Audio file URL or identifier for sound that will be associated with the column.
         */
        "audio"?: string;
        /**
          * The background color of the column (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the column component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * The unique identifier for the column component.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler for when the column is entered, which can be used to initiate specific behaviors on entry.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler for a touch event, where a custom function can be triggered when the column is touched.
         */
        "onTouch"?: string;
        /**
          * The tab index value, used to set the tab order of the column for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the column, which can be used for styling or specific logic handling.
         */
        "type"?: string;
        /**
          * The value associated with the column component. Typically used for internal logic.
         */
        "value"?: string;
        /**
          * A boolean that controls whether the column is visible (`true`) or hidden (`false`).
         */
        "visible"?: boolean;
        /**
          * The width of the column component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * The x-coordinate (left position) of the column within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * The y-coordinate (top position) of the column within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * The z-index of the column to control stacking order.
         */
        "z"?: string;
    }
    /**
     * @component LidoContainer
     * The `LidoContainer` component acts as a container for other elements. It scales responsively
     * based on the window size, adjusts background color, and provides various configurable properties
     * such as dimensions, positioning, visibility, and custom event handlers.
     */
    interface LidoContainer {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the container.
         */
        "audio"?: string;
        /**
          * Base URL for the container.
         */
        "baseUrl"?: string;
        /**
          * Background color of the container (CSS color value).
         */
        "bgColor"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * The height of the container (CSS value).
         */
        "height"?: string;
        /**
          * Unique identifier for the container.
         */
        "id"?: string;
        /**
          * Specifies whether the activity should continue automatically upon a correct response. Expected values: "true" or "false".
         */
        "isContinueOnCorrect"?: string;
        /**
          * Objective or purpose of the container. Can be used for internal logic or tracking.
         */
        "objective"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the container is entered, useful for triggering animations or logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the container is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Indicates whether the "Check" button should be visible or not. Expected values: "true" or "false".
         */
        "showCheck"?: string;
        /**
          * TabIndex for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Type of the container, which can be used for conditional logic or styling purposes.
         */
        "type"?: string;
        /**
          * Value assigned to the container. This can be used for logic related to this component.
         */
        "value"?: string;
        /**
          * Visibility flag for the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the container (CSS value).
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the container.
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the container.
         */
        "y"?: string;
        /**
          * Z-index to control the stacking order of the container.
         */
        "z"?: string;
    }
    /**
     * @component LidoHome
     * The `LidoHome` component renders a series of containers parsed from the provided XML data.
     * It handles navigation between containers, resets the state on page reloads or container transitions,
     * and displays progress indicators (dots) for each container.
     */
    interface LidoHome {
        /**
          * Base URL for the containers.
         */
        "baseUrl"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex"?: number;
        /**
          * XML data passed to the component, which is parsed and used to render various containers.
         */
        "xmlData"?: string;
    }
    /**
     * @component LidoImage
     * The `LidoImage` component displays an image element within a container. It is a versatile
     * component that allows dynamic sizing, positioning, visibility control, and event handling.
     * The component is designed to work in different types of environments, supporting custom
     * events such as touch, match, and entry events.
     */
    interface LidoImage {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the image.
         */
        "audio"?: string;
        /**
          * Background color for the container of the image (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the image component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the image is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the image is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * The source URL of the image to be displayed.
         */
        "src"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the image component, which can be used for conditional logic or styling purposes.
         */
        "type"?: string;
        /**
          * The value associated with the image. Typically used for internal logic or identification.
         */
        "value"?: string;
        /**
          * Controls the visibility of the image component. If `true`, the image is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the image component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the image within its container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the image within its container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the image relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoPos
     * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
     * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
     * events for interaction such as touch, match, and entry events.
     */
    interface LidoPos {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio"?: string;
        /**
          * Background color of the component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the positional element.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the component is entered, often used to trigger animations or custom logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Tab index to support keyboard navigation within the component.
         */
        "tabIndex"?: number;
        /**
          * The type of the component, used for conditional logic or specific styles.
         */
        "type"?: string;
        /**
          * Value assigned to the component, often used for internal logic or data tracking.
         */
        "value"?: string;
        /**
          * Visibility flag to control whether the element is displayed (`true`) or hidden (`false`).
         */
        "visible"?: boolean;
        /**
          * The width of the component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the component (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the component (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the element relative to others.
         */
        "z"?: string;
    }
    /**
     * @component LidoRandom
     * The `LidoRandom` component randomly positions its child elements within its container.
     * This component can be used when a random layout of elements is required. It allows
     * full customization via props such as dimensions, positioning, visibility, and event handling.
     */
    interface LidoRandom {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the component.
         */
        "audio"?: string;
        /**
          * Background color of the container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the container (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the random container.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * The type of the component, used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the component, often used for internal logic.
         */
        "value"?: string;
        /**
          * Controls the visibility of the container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the container (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the container relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoRoot
     * The `LidoRoot` component is the main application entry point. It loads an external XML data file
     * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
     * The XML path can be configured via a prop.
     */
    interface LidoRoot {
        /**
          * Base URL for the containers.
         */
        "baseUrl"?: string;
        /**
          * Boolean that controls the playability of the game.
         */
        "canplay"?: boolean;
        /**
          * Initial index of the container being displayed.
         */
        "initialIndex"?: number;
        /**
          * Prop to hold the XML file path or URL. This can be a relative path or an external URL.
         */
        "xmlPath"?: string;
    }
    /**
     * @component LidoRow
     * The `LidoRow` component is used to create a flexible row element that can contain other elements.
     * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
     */
    interface LidoRow {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the row.
         */
        "audio"?: string;
        /**
          * Background color of the row (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the row (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the row is entered, often used for triggering animations or custom logic.
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the row is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the row, used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the row, typically used for internal logic or data.
         */
        "value"?: string;
        /**
          * Controls the visibility of the row. If `true`, the row is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the row (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the row (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the row (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the row relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoShape
     * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
     * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
     * Additionally, it supports custom events for interaction like touch, match, and entry.
     */
    interface LidoShape {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the shape.
         */
        "audio"?: string;
        /**
          * Background color of the shape (CSS color value, e.g., '#FFFFFF', 'blue'). This is ignored for polygons.
         */
        "bgColor"?: string;
        /**
          * The height of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "height"?: string;
        /**
          * Unique identifier for the shape element.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the shape is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the shape is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Type of shape to render (e.g., 'circle', 'rectangle', 'polygon').
         */
        "shapeType"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the shape, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the shape, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the shape. If `true`, the shape is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the shape (CSS value, e.g., '100px', '50%'). This is ignored for polygons.
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the shape (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the shape (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the shape relative to other elements.
         */
        "z"?: string;
    }
    /**
     * @component LidoText
     * The `LidoText` component is used to display text with customizable styling.
     * It allows you to set the font, size, color, and background color, along with
     * positioning and visibility control. The component supports custom events like touch, match, and entry.
     */
    interface LidoText {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier for an audio file associated with the text component.
         */
        "audio"?: string;
        /**
          * Background color of the text component (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * Font family for the text (CSS value, e.g., 'Arial', 'Times New Roman').
         */
        "font"?: string;
        /**
          * Font color for the text (CSS color value, e.g., '#000000', 'red').
         */
        "fontColor"?: string;
        /**
          * Font size for the text (CSS value, e.g., '16px', '1.5em').
         */
        "fontSize"?: string;
        /**
          * Height of the text component (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * When set to `true`, the text will highlight while being spoken, typically used for accessibility.
         */
        "highlightWhileSpeaking"?: boolean;
        /**
          * Unique identifier for the text element.
         */
        "id"?: string;
        "isAllowOnlyOneDrop"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the text component is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the text component is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * The string of text to be displayed in the component.
         */
        "string"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the component, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the text element, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the text component. If `true`, the text is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * Width of the text component (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the text component (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the text component (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the text component relative to other elements.
         */
        "z"?: string;
    }
    interface LidoTrace {
        /**
          * Controls visibility for assistive technologies. If `"true"`, the component is hidden from screen readers.
         */
        "ariaHidden"?: string;
        /**
          * Accessible label for screen readers, providing a textual description of the component's purpose.
         */
        "ariaLabel"?: string;
        /**
          * Specifies the height of the component container, accepts any valid CSS height value (e.g., `"100px"`, `"50%"`).
         */
        "height"?: string;
        /**
          * Unique identifier for this `lido-trace` component instance.
         */
        "id"?: string;
        /**
          * Mode for the tracing interaction, defining how users interact with the SVG paths. Options may include `"noFlow"`, `"showFlow"`, `"freeTrace"`, `"blindTracing"`, and `"blindFreeTrace"`.
         */
        "mode"?: string;
        /**
          * Source URL or path for the SVG file used in this component.
         */
        "svgSource"?: string;
        /**
          * Sets the tab order of the component within the page, enabling keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * A custom string value associated with the component for additional data or identification.
         */
        "value"?: string;
        /**
          * Specifies the width of the component container, accepts any valid CSS width value (e.g., `"100px"`, `"50%"`).
         */
        "width"?: string;
        /**
          * Defines the x-coordinate position (left offset) of the component container, using any valid CSS `left` value (e.g., `"10px"`, `"5%"`).
         */
        "x"?: string;
        /**
          * Defines the y-coordinate position (top offset) of the component container, using any valid CSS `top` value (e.g., `"10px"`, `"5%"`).
         */
        "y"?: string;
        /**
          * Sets the z-index of the component, controlling its stacking order on the page.
         */
        "z"?: string;
    }
    /**
     * @component LidoWrap
     * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
     * The component can display its content as a grid and supports custom events like touch, match, and entry.
     * It allows for full customization via props like dimensions, background color, visibility, and z-index.
     */
    interface LidoWrap {
        /**
          * The ARIA hidden attribute of the container. Used for accessibility to hide the element.
         */
        "ariaHidden"?: string;
        /**
          * The ARIA label of the container. Used for accessibility to indicate the purpose of the element.
         */
        "ariaLabel"?: string;
        /**
          * URL or identifier of an audio file associated with the wrap container.
         */
        "audio"?: string;
        /**
          * Background color of the wrap container (CSS color value, e.g., '#FFFFFF', 'blue').
         */
        "bgColor"?: string;
        /**
          * The height of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "height"?: string;
        /**
          * Unique identifier for the wrap element.
         */
        "id"?: string;
        /**
          * Event handler for a Correct matching action, which can be used to hide the column or trigger other custom logic.
         */
        "onCorrect"?: string;
        /**
          * Event handler triggered when the wrap container is entered (useful for animations or logic on entry).
         */
        "onEntry"?: string;
        /**
          * Event handler for an Incorrect matching action, which can be used to trigger custom logic when the action is incorrect.
         */
        "onInCorrect"?: string;
        /**
          * Event handler triggered when the wrap container is touched or clicked.
         */
        "onTouch"?: string;
        /**
          * Tab index for keyboard navigation.
         */
        "tabIndex"?: number;
        /**
          * Defines the type of the wrap container, which can be used for conditional logic or specific styling.
         */
        "type"?: string;
        /**
          * Value associated with the wrap element, typically used for internal logic or tracking.
         */
        "value"?: string;
        /**
          * Controls the visibility of the wrap container. If `true`, the container is visible; otherwise, it is hidden.
         */
        "visible"?: boolean;
        /**
          * The width of the wrap container (CSS value, e.g., '100px', '50%').
         */
        "width"?: string;
        /**
          * X-axis (horizontal) position of the wrap container (CSS value, e.g., '10px', '5vw').
         */
        "x"?: string;
        /**
          * Y-axis (vertical) position of the wrap container (CSS value, e.g., '10px', '5vh').
         */
        "y"?: string;
        /**
          * Z-index for stacking order of the wrap container relative to other elements.
         */
        "z"?: string;
    }
    interface IntrinsicElements {
        "lido-col": LidoCol;
        "lido-container": LidoContainer;
        "lido-home": LidoHome;
        "lido-image": LidoImage;
        "lido-pos": LidoPos;
        "lido-random": LidoRandom;
        "lido-root": LidoRoot;
        "lido-row": LidoRow;
        "lido-shape": LidoShape;
        "lido-text": LidoText;
        "lido-trace": LidoTrace;
        "lido-wrap": LidoWrap;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @component LidoCol
             * The `LidoCol` component is a dynamic column-like UI element that can be
             * customized via various properties such as dimensions, position, visibility,
             * background color, and event handlers. It is designed to work within
             * containers (`lido-container`) and can include child components like
             * `lido-text`, `lido-row`, etc.
             */
            "lido-col": LocalJSX.LidoCol & JSXBase.HTMLAttributes<HTMLLidoColElement>;
            /**
             * @component LidoContainer
             * The `LidoContainer` component acts as a container for other elements. It scales responsively
             * based on the window size, adjusts background color, and provides various configurable properties
             * such as dimensions, positioning, visibility, and custom event handlers.
             */
            "lido-container": LocalJSX.LidoContainer & JSXBase.HTMLAttributes<HTMLLidoContainerElement>;
            /**
             * @component LidoHome
             * The `LidoHome` component renders a series of containers parsed from the provided XML data.
             * It handles navigation between containers, resets the state on page reloads or container transitions,
             * and displays progress indicators (dots) for each container.
             */
            "lido-home": LocalJSX.LidoHome & JSXBase.HTMLAttributes<HTMLLidoHomeElement>;
            /**
             * @component LidoImage
             * The `LidoImage` component displays an image element within a container. It is a versatile
             * component that allows dynamic sizing, positioning, visibility control, and event handling.
             * The component is designed to work in different types of environments, supporting custom
             * events such as touch, match, and entry events.
             */
            "lido-image": LocalJSX.LidoImage & JSXBase.HTMLAttributes<HTMLLidoImageElement>;
            /**
             * @component LidoPos
             * The `LidoPos` component is used to position a block-level element with dynamic styling and event handling.
             * It supports positioning with `x` and `y` coordinates, sizing with `height` and `width`, and custom
             * events for interaction such as touch, match, and entry events.
             */
            "lido-pos": LocalJSX.LidoPos & JSXBase.HTMLAttributes<HTMLLidoPosElement>;
            /**
             * @component LidoRandom
             * The `LidoRandom` component randomly positions its child elements within its container.
             * This component can be used when a random layout of elements is required. It allows
             * full customization via props such as dimensions, positioning, visibility, and event handling.
             */
            "lido-random": LocalJSX.LidoRandom & JSXBase.HTMLAttributes<HTMLLidoRandomElement>;
            /**
             * @component LidoRoot
             * The `LidoRoot` component is the main application entry point. It loads an external XML data file
             * from a specified URL or asset path and passes it down to the `lido-home` component for rendering.
             * The XML path can be configured via a prop.
             */
            "lido-root": LocalJSX.LidoRoot & JSXBase.HTMLAttributes<HTMLLidoRootElement>;
            /**
             * @component LidoRow
             * The `LidoRow` component is used to create a flexible row element that can contain other elements.
             * It supports dynamic positioning, sizing, visibility control, and custom events for interaction.
             */
            "lido-row": LocalJSX.LidoRow & JSXBase.HTMLAttributes<HTMLLidoRowElement>;
            /**
             * @component LidoShape
             * The `LidoShape` component is used to display various types of shapes like rectangles, circles, or polygons.
             * The shape's appearance is dynamically controlled by props such as dimensions, position, visibility, and the type of shape.
             * Additionally, it supports custom events for interaction like touch, match, and entry.
             */
            "lido-shape": LocalJSX.LidoShape & JSXBase.HTMLAttributes<HTMLLidoShapeElement>;
            /**
             * @component LidoText
             * The `LidoText` component is used to display text with customizable styling.
             * It allows you to set the font, size, color, and background color, along with
             * positioning and visibility control. The component supports custom events like touch, match, and entry.
             */
            "lido-text": LocalJSX.LidoText & JSXBase.HTMLAttributes<HTMLLidoTextElement>;
            "lido-trace": LocalJSX.LidoTrace & JSXBase.HTMLAttributes<HTMLLidoTraceElement>;
            /**
             * @component LidoWrap
             * The `LidoWrap` component acts as a flexible container that supports dynamic positioning, sizing, and layout.
             * The component can display its content as a grid and supports custom events like touch, match, and entry.
             * It allows for full customization via props like dimensions, background color, visibility, and z-index.
             */
            "lido-wrap": LocalJSX.LidoWrap & JSXBase.HTMLAttributes<HTMLLidoWrapElement>;
        }
    }
}
